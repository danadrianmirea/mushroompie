                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.6 #12533 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module mushroompie
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _init_game
                                     13 	.globl _reset_world
                                     14 	.globl _place_room_items
                                     15 	.globl _init_game_items
                                     16 	.globl _find_by_room_xy
                                     17 	.globl _find_by_id
                                     18 	.globl _pop_by_id
                                     19 	.globl _push_last
                                     20 	.globl _show_inventory
                                     21 	.globl _execute_inventory
                                     22 	.globl _execute_dialog
                                     23 	.globl _vbl_interrupt
                                     24 	.globl _lcd_interrupt
                                     25 	.globl _check_change_room
                                     26 	.globl _set_room
                                     27 	.globl _FadeDMG
                                     28 	.globl _check_dizzy_evil_collisions
                                     29 	.globl _check_dizzy_collisions
                                     30 	.globl _set_dizzy_position
                                     31 	.globl _set_dizzy_animdata
                                     32 	.globl _init_dizzy
                                     33 	.globl _set_enemies_position
                                     34 	.globl _get_coll
                                     35 	.globl _get_v_coll
                                     36 	.globl _get_h_coll
                                     37 	.globl _get_y_scroll_value
                                     38 	.globl _get_x_scroll_value
                                     39 	.globl _update_energy
                                     40 	.globl _show_energy
                                     41 	.globl _show_coins
                                     42 	.globl _sub_coins
                                     43 	.globl _add_coins
                                     44 	.globl _show_lives
                                     45 	.globl _on_dizzy_die
                                     46 	.globl _init_dizzy_energy
                                     47 	.globl _init_dizzy_lives
                                     48 	.globl _init_dizzy_coins
                                     49 	.globl _unshrink_and_mask
                                     50 	.globl _multiple_move_sprites_limits
                                     51 	.globl _multiple_move_sprites
                                     52 	.globl _multiple_set_sprite_tiles
                                     53 	.globl _multiple_set_sprite_prop
                                     54 	.globl _multiple_clear_sprite_tiledata
                                     55 	.globl _get_map_from_buf
                                     56 	.globl _put_map_to_buf
                                     57 	.globl _rle_decompress_data
                                     58 	.globl _rle_decompress_tilemap
                                     59 	.globl _get_shrinked_tile_offset
                                     60 	.globl _unshrink_tiles_to_buf
                                     61 	.globl _unshrink_tiles
                                     62 	.globl _set_inc_tiles
                                     63 	.globl _hUGE_init
                                     64 	.globl _PlayFx
                                     65 	.globl _set_bank
                                     66 	.globl _pop_bank
                                     67 	.globl _push_bank
                                     68 	.globl _set_sprite_data
                                     69 	.globl _set_win_tiles
                                     70 	.globl _set_win_data
                                     71 	.globl _set_bkg_tiles
                                     72 	.globl _set_bkg_data
                                     73 	.globl _display_off
                                     74 	.globl _wait_vbl_done
                                     75 	.globl _set_interrupts
                                     76 	.globl _waitpadup
                                     77 	.globl _joypad
                                     78 	.globl _delay
                                     79 	.globl _wait_int_handler
                                     80 	.globl _add_LCD
                                     81 	.globl _add_VBL
                                     82 	.globl _lyc_table
                                     83 	.globl _inventory
                                     84 	.globl ___lcd_int_state
                                     85 	.globl _tim_div
                                     86 	.globl _dizzy_old_pos_y
                                     87 	.globl _dizzy_old_pos_x
                                     88 	.globl _dizzy_stun
                                     89 	.globl _dizzy_falling
                                     90 	.globl _death_pause
                                     91 	.globl _game_over
                                     92 	.globl _joy
                                     93 	.globl _is_position_safe
                                     94 	.globl _safe_room_y
                                     95 	.globl _safe_room_x
                                     96 	.globl _delta_y
                                     97 	.globl _delta_x
                                     98 	.globl _dizzy_tmp_xy
                                     99 	.globl _dizzy_y
                                    100 	.globl _dizzy_x
                                    101 	.globl _current_room
                                    102 	.globl _current_room_y
                                    103 	.globl _current_room_x
                                    104 	.globl _cloud_timer
                                    105 	.globl _bal_update
                                    106 	.globl _walk_update
                                    107 	.globl _ani_update
                                    108 	.globl _current_dyn_phase
                                    109 	.globl _double_dyn
                                    110 	.globl _current_dyn
                                    111 	.globl _ani_phase
                                    112 	.globl _ani_type
                                    113 	.globl _item_stack
                                    114 	.globl _inventory_item_list
                                    115 	.globl ___temp_text_ptr2
                                    116 	.globl ___temp_text_ptr1
                                    117 	.globl ___temp_text_ptr0
                                    118 	.globl ___temp_text_buf
                                    119 	.globl ___temp_item_tiledata2
                                    120 	.globl ___temp_item_tiledata1
                                    121 	.globl ___temp_item_tiledata0
                                    122 	.globl ___temp_bkg_tiles
                                    123 	.globl ___temp_tiles
                                    124 	.globl ___temp_tiledata
                                    125 	.globl ___temp_game_item_desc
                                    126 	.globl ___temp_game_item3
                                    127 	.globl ___temp_game_item2
                                    128 	.globl ___temp_game_item
                                    129 	.globl _game_item_list
                                    130 	.globl _game_items
                                    131 	.globl _item_tiles_hiwater
                                    132 	.globl _font_tiles_start
                                    133 	.globl _inventoty_tiles_start
                                    134 	.globl _window_tiles_hiwater
                                    135 	.globl ___temp_coll_row
                                    136 	.globl _collision_buf
                                    137 	.globl _tile_pos_oy
                                    138 	.globl _tile_pos_ox
                                    139 	.globl _tile_pos_y
                                    140 	.globl _tile_pos_x
                                    141 	.globl ___temp_scroll_value
                                    142 	.globl _bkg_scroll_y_target
                                    143 	.globl _bkg_scroll_x_target
                                    144 	.globl _dec_energy
                                    145 	.globl _inc_energy
                                    146 	.globl _dizzy_energy_old
                                    147 	.globl _dizzy_energy
                                    148 	.globl _coins_indicator
                                    149 	.globl _coins
                                    150 	.globl _temp_tile_buffer
                                    151 	.globl _dizzy_energy_indicator
                                    152 	.globl _dizzy_lives_indicator
                                    153 	.globl _dizzy_lives
                                    154 	.globl _digits_start
                                    155 	.globl _dizzy_energy_start
                                    156 	.globl _dizzy_live_symbol
                                    157 	.globl ___temp_m
                                    158 	.globl ___temp_l
                                    159 	.globl ___temp_k
                                    160 	.globl ___temp_j
                                    161 	.globl ___temp_i
                                    162 	.globl _tmp_dizzy_y
                                    163 	.globl _tmp_dizzy_x
                                    164 	.globl _safe_dizzy_y
                                    165 	.globl _safe_dizzy_x
                                    166 	.globl _tmp_room_y
                                    167 	.globl _tmp_room_x
                                    168 	.globl _ani_type_old
                                    169 	.globl _current_animation
                                    170 	.globl _coll_buf
                                    171 	.globl _all_items_desc
                                    172 	.globl _itmdesc_coin2
                                    173 	.globl _itmdesc_coin1
                                    174 	.globl _itmdesc_coin0
                                    175 	.globl _itmdesc_blockage0
                                    176 	.globl _itmdesc_blockage1
                                    177 	.globl _itmdesc_blockage2
                                    178 	.globl _itmdesc_firefly
                                    179 	.globl _itmdesc_lid
                                    180 	.globl _itmdesc_jar
                                    181 	.globl _itmdesc_pie
                                    182 	.globl _itmdesc_mushrooms
                                    183 	.globl _itmdesc_grass
                                    184 	.globl _itmdesc_key
                                    185 	.globl _itmdesc_pickaxe
                                    186 	.globl _ethalon_tiles_offsets
                                    187 	.globl _ethalon_indicator
                                    188 	.globl _current_coll_idx
                                    189 	.globl _evil_hide
                                    190 	.globl _empty_compressed_map
                                    191 	.globl _ptr_div_reg
                                    192 	.globl _room_5_1
                                    193 	.globl _room_4_1
                                    194 	.globl _room_3_1
                                    195 	.globl _room_2_1
                                    196 	.globl _room_1_1
                                    197 	.globl _room_0_1
                                    198 	.globl _room_5_0
                                    199 	.globl _room_4_0
                                    200 	.globl _room_3_0
                                    201 	.globl _room_2_0
                                    202 	.globl _room_1_0
                                    203 	.globl _room_0_0
                                    204 	.globl _world_row_1
                                    205 	.globl _world_row_0
                                    206 	.globl _dizzy_world
                                    207 	.globl _fly_delta
                                    208 	.globl _fly_offsets
                                    209 	.globl _move_x_data
                                    210 	.globl _double_y_data
                                    211 	.globl _move_y_data
                                    212 	.globl _double_y_dynamics
                                    213 	.globl _move_y_dynamics
                                    214 	.globl _animation
                                    215 	.globl _dead_ani
                                    216 	.globl _stun_ani
                                    217 	.globl _jump_l_ani
                                    218 	.globl _jump_r_ani
                                    219 	.globl _roll_l_ani
                                    220 	.globl _roll_r_ani
                                    221 	.globl _walk_l_ani
                                    222 	.globl _walk_r_ani
                                    223 	.globl _up_ani
                                    224 	.globl _stand_ani
                                    225 	.globl _dizzy_offsets
                                    226 	.globl _show_dialog_window
                                    227 	.globl _default_draw
                                    228 	.globl _default_drop
                                    229 ;--------------------------------------------------------
                                    230 ; special function registers
                                    231 ;--------------------------------------------------------
                                    232 ;--------------------------------------------------------
                                    233 ; ram data
                                    234 ;--------------------------------------------------------
                                    235 	.area _DATA
      000000                        236 _coll_buf::
      000000                        237 	.ds 510
      0001FE                        238 _current_animation::
      0001FE                        239 	.ds 2
      000200                        240 _ani_type_old::
      000200                        241 	.ds 1
      000201                        242 _tmp_room_x::
      000201                        243 	.ds 1
      000202                        244 _tmp_room_y::
      000202                        245 	.ds 1
      000203                        246 _safe_dizzy_x::
      000203                        247 	.ds 2
      000205                        248 _safe_dizzy_y::
      000205                        249 	.ds 2
      000207                        250 _tmp_dizzy_x::
      000207                        251 	.ds 2
      000209                        252 _tmp_dizzy_y::
      000209                        253 	.ds 2
      00020B                        254 ___temp_i::
      00020B                        255 	.ds 1
      00020C                        256 ___temp_j::
      00020C                        257 	.ds 1
      00020D                        258 ___temp_k::
      00020D                        259 	.ds 1
      00020E                        260 ___temp_l::
      00020E                        261 	.ds 1
      00020F                        262 ___temp_m::
      00020F                        263 	.ds 1
      000210                        264 _dizzy_live_symbol::
      000210                        265 	.ds 1
      000211                        266 _dizzy_energy_start::
      000211                        267 	.ds 1
      000212                        268 _digits_start::
      000212                        269 	.ds 1
      000213                        270 _dizzy_lives::
      000213                        271 	.ds 1
      000214                        272 _dizzy_lives_indicator::
      000214                        273 	.ds 3
      000217                        274 _dizzy_energy_indicator::
      000217                        275 	.ds 8
      00021F                        276 _temp_tile_buffer::
      00021F                        277 	.ds 16
      00022F                        278 _coins::
      00022F                        279 	.ds 1
      000230                        280 _coins_indicator::
      000230                        281 	.ds 2
      000232                        282 _dizzy_energy::
      000232                        283 	.ds 1
      000233                        284 _dizzy_energy_old::
      000233                        285 	.ds 1
      000234                        286 _inc_energy::
      000234                        287 	.ds 1
      000235                        288 _dec_energy::
      000235                        289 	.ds 1
      000236                        290 _bkg_scroll_x_target::
      000236                        291 	.ds 1
      000237                        292 _bkg_scroll_y_target::
      000237                        293 	.ds 1
      000238                        294 ___temp_scroll_value::
      000238                        295 	.ds 2
      00023A                        296 _tile_pos_x::
      00023A                        297 	.ds 1
      00023B                        298 _tile_pos_y::
      00023B                        299 	.ds 1
      00023C                        300 _tile_pos_ox::
      00023C                        301 	.ds 1
      00023D                        302 _tile_pos_oy::
      00023D                        303 	.ds 1
      00023E                        304 _collision_buf::
      00023E                        305 	.ds 3
      000241                        306 ___temp_coll_row::
      000241                        307 	.ds 2
      000243                        308 _window_tiles_hiwater::
      000243                        309 	.ds 1
      000244                        310 _inventoty_tiles_start::
      000244                        311 	.ds 1
      000245                        312 _font_tiles_start::
      000245                        313 	.ds 1
      000246                        314 _item_tiles_hiwater::
      000246                        315 	.ds 1
      000247                        316 _game_items::
      000247                        317 	.ds 126
      0002C5                        318 _game_item_list::
      0002C5                        319 	.ds 5
      0002CA                        320 ___temp_game_item::
      0002CA                        321 	.ds 2
      0002CC                        322 ___temp_game_item2::
      0002CC                        323 	.ds 2
      0002CE                        324 ___temp_game_item3::
      0002CE                        325 	.ds 2
      0002D0                        326 ___temp_game_item_desc::
      0002D0                        327 	.ds 2
      0002D2                        328 ___temp_tiledata::
      0002D2                        329 	.ds 2
      0002D4                        330 ___temp_tiles::
      0002D4                        331 	.ds 4
      0002D8                        332 ___temp_bkg_tiles::
      0002D8                        333 	.ds 4
      0002DC                        334 ___temp_item_tiledata0::
      0002DC                        335 	.ds 64
      00031C                        336 ___temp_item_tiledata1::
      00031C                        337 	.ds 64
      00035C                        338 ___temp_item_tiledata2::
      00035C                        339 	.ds 64
      00039C                        340 ___temp_text_buf::
      00039C                        341 	.ds 20
      0003B0                        342 ___temp_text_ptr0::
      0003B0                        343 	.ds 2
      0003B2                        344 ___temp_text_ptr1::
      0003B2                        345 	.ds 2
      0003B4                        346 ___temp_text_ptr2::
      0003B4                        347 	.ds 2
      0003B6                        348 _inventory_item_list::
      0003B6                        349 	.ds 5
      0003BB                        350 _item_stack::
      0003BB                        351 	.ds 5
                                    352 ;--------------------------------------------------------
                                    353 ; ram data
                                    354 ;--------------------------------------------------------
                                    355 	.area _INITIALIZED
      000000                        356 ___CRASH_HEANDLER_INIT:
      000000                        357 	.ds 2
      000002                        358 _ani_type::
      000002                        359 	.ds 1
      000003                        360 _ani_phase::
      000003                        361 	.ds 1
      000004                        362 _current_dyn::
      000004                        363 	.ds 2
      000006                        364 _double_dyn::
      000006                        365 	.ds 1
      000007                        366 _current_dyn_phase::
      000007                        367 	.ds 1
      000008                        368 _ani_update::
      000008                        369 	.ds 1
      000009                        370 _walk_update::
      000009                        371 	.ds 1
      00000A                        372 _bal_update::
      00000A                        373 	.ds 1
      00000B                        374 _cloud_timer::
      00000B                        375 	.ds 1
      00000C                        376 _current_room_x::
      00000C                        377 	.ds 1
      00000D                        378 _current_room_y::
      00000D                        379 	.ds 1
      00000E                        380 _current_room::
      00000E                        381 	.ds 2
      000010                        382 _dizzy_x::
      000010                        383 	.ds 2
      000012                        384 _dizzy_y::
      000012                        385 	.ds 2
      000014                        386 _dizzy_tmp_xy::
      000014                        387 	.ds 2
      000016                        388 _delta_x::
      000016                        389 	.ds 2
      000018                        390 _delta_y::
      000018                        391 	.ds 2
      00001A                        392 _safe_room_x::
      00001A                        393 	.ds 1
      00001B                        394 _safe_room_y::
      00001B                        395 	.ds 1
      00001C                        396 _is_position_safe::
      00001C                        397 	.ds 1
      00001D                        398 _joy::
      00001D                        399 	.ds 1
      00001E                        400 _game_over::
      00001E                        401 	.ds 1
      00001F                        402 _death_pause::
      00001F                        403 	.ds 1
      000020                        404 _dizzy_falling::
      000020                        405 	.ds 1
      000021                        406 _dizzy_stun::
      000021                        407 	.ds 1
      000022                        408 _dizzy_old_pos_x::
      000022                        409 	.ds 2
      000024                        410 _dizzy_old_pos_y::
      000024                        411 	.ds 2
      000026                        412 _tim_div::
      000026                        413 	.ds 1
      000027                        414 ___lcd_int_state::
      000027                        415 	.ds 1
      000028                        416 _inventory::
      000028                        417 	.ds 1
      000029                        418 _lyc_table::
      000029                        419 	.ds 8
                                    420 ;--------------------------------------------------------
                                    421 ; absolute external ram data
                                    422 ;--------------------------------------------------------
                                    423 	.area _DABS (ABS)
                                    424 ;--------------------------------------------------------
                                    425 ; global & static initialisations
                                    426 ;--------------------------------------------------------
                                    427 	.area _HOME
                                    428 	.area _GSINIT
                                    429 	.area _GSFINAL
                                    430 	.area _GSINIT
                                    431 ;--------------------------------------------------------
                                    432 ; Home
                                    433 ;--------------------------------------------------------
                                    434 	.area _HOME
                                    435 ;src/mushroompie.c:293: void lcd_interrupt() NONBANKED __naked 
                                    436 ;	---------------------------------
                                    437 ; Function lcd_interrupt
                                    438 ; ---------------------------------
      000000                        439 _lcd_interrupt::
                                    440 ;src/mushroompie.c:349: __endasm;
      000000 FAr28r00               441 	ld	A, (#_inventory) ; if !inventory then use lyc_table 0..3 else 4..7
      000003 E6 01                  442 	and	#1
      000005 CB 27                  443 	sla	A
      000007 CB 27                  444 	sla	A
      000009 21r27r00               445 	ld	HL, #___lcd_int_state
      00000C 5E                     446 	ld	E, (HL)
      00000D 83                     447 	add	E
      00000E 21r29r00               448 	ld	HL, #_lyc_table
      000011 85                     449 	add	L
      000012 6F                     450 	ld	L, A
      000013 7C                     451 	ld	A, H
      000014 CE 00                  452 	adc	#0
      000016 67                     453 	ld	H, A ; HL = &lyc_table[__lcd_int_state]
      000017 7E                     454 	ld	A,(HL)
      000018 E0r00                  455 	ldh	(#_LYC_REG), A ; setting next interrupt row
      00001A 57                     456 	ld	D, A
      00001B 7B                     457 	ld	A, E
      00001C 3C                     458 	inc	A
      00001D E6 03                  459 	and	#3
      00001F EAr27r00               460 	ld	(#___lcd_int_state), A ; __lcd_int_state++; __lcd_int_state&=3;
      000022 E6 01                  461 	and	#1
      000024 CB 27                  462 	sla	A
      000026 5F                     463 	ld	E,A
      000027 EE 02                  464 	xor	#2
      000029 CB 37                  465 	swap	A
      00002B B3                     466 	or	E ; E = ((__lcd_int_state & 1) << 5) | (((!__lcd_int_state) & 1) << 1)
      00002C 5F                     467 	ld	E, A ; when WIN is ON, OBJ are OFF
      00002D F0r00                  468 	ldh	A, (#_LCDC_REG)
      00002F E6 DD                  469 	and	#0xDD ; mask other bits except WIN and OBJ
      000031 B3                     470 	or	E
      000032 E0r00                  471 	ldh	(#_LCDC_REG), A ; manipulate WIN and OBJ visibiliry
      000034 7A                     472 	ld	A, D
      000035 B7                     473 	or	A
      000036 C0                     474 	ret	NZ
      000037 3E 01                  475 	ld	A, #1
      000039 EA 00 20               476 	ld	(#0x2000), A
      00003C CDr00r00               477 	call	#_hUGE_dosound
      00003F 21r00r00               478 	ld	HL, #___banks_sp ; _current_bank = ((*__banks_sp)), *(uint8_t *)0x2000 = ((*__banks_sp));
      000042 2A                     479 	ld	A, (HL+)
      000043 66                     480 	ld	H, (HL)
      000044 6F                     481 	ld	L, A
      000045 7E                     482 	ld	A, (HL)
      000046 EA 00 20               483 	ld	(#0x2000), A
      000049 C9                     484 	ret
                                    485 ;src/mushroompie.c:350: }    
                                    486 ;src/mushroompie.c:351: void vbl_interrupt() NONBANKED __naked
                                    487 ;	---------------------------------
                                    488 ; Function vbl_interrupt
                                    489 ; ---------------------------------
      00004A                        490 _vbl_interrupt::
                                    491 ;src/mushroompie.c:373: __endasm;
      00004A FAr36r02               492 	ld	A, (#_bkg_scroll_x_target)
      00004D E0r00                  493 	ldh	(#_SCX_REG), A
      00004F FAr37r02               494 	ld	A, (#_bkg_scroll_y_target)
      000052 E0r00                  495 	ldh	(#_SCY_REG), A
      000054 FAr26r00               496 	ld	A, (#_tim_div)
      000057 3C                     497 	inc	A
      000058 E6 03                  498 	and	#3
      00005A EAr26r00               499 	ld	(#_tim_div), A
      00005D 20 05                  500 	jr	NZ, vblint01$
      00005F 21r08r00               501 	ld	HL, #_ani_update
      000062 36 01                  502 	ld	(HL), #1
      000064                        503 	vblint01$:
      000064 E6 01                  504 	and #1
      000066 28 03                  505 	jr	Z, vblint02$
      000068 EAr0Ar00               506 	ld	(#_bal_update), A
      00006B                        507 	vblint02$:
      00006B 3E 01                  508 	ld A, #1
      00006D EAr09r00               509 	ld	(#_walk_update), A
      000070 C9                     510 	ret
                                    511 ;src/mushroompie.c:374: } 
                                    512 ;src/include/inventory.h:74: void show_dialog_window(const UBYTE lines, const dialog_item* item) NONBANKED {
                                    513 ;	---------------------------------
                                    514 ; Function show_dialog_window
                                    515 ; ---------------------------------
      000071                        516 _show_dialog_window::
                                    517 ;src/include/inventory.h:75: push_bank(1);
      000071 3E 01                  518 	ld	a, #0x01
      000073 F5                     519 	push	af
      000074 33                     520 	inc	sp
      000075 CDr00r00               521 	call	_push_bank
      000078 33                     522 	inc	sp
                                    523 ;src/include/inventory.h:76: execute_dialog(lines, item);
      000079 F8 03                  524 	ldhl	sp,	#3
      00007B 2A                     525 	ld	a, (hl+)
      00007C 5F                     526 	ld	e, a
      00007D 3A                     527 	ld	a, (hl-)
      00007E 2B                     528 	dec	hl
      00007F 57                     529 	ld	d, a
      000080 D5                     530 	push	de
      000081 7E                     531 	ld	a, (hl)
      000082 F5                     532 	push	af
      000083 33                     533 	inc	sp
      000084 CDr00r00               534 	call	_execute_dialog
      000087 E8 03                  535 	add	sp, #3
                                    536 ;src/include/inventory.h:77: pop_bank();
                                    537 ;src/include/inventory.h:78: }
      000089 C3r00r00               538 	jp	_pop_bank
      00008C                        539 _itmdesc_pickaxe:
      00008C 01                     540 	.db #0x01	; 1
      00008D 01                     541 	.db #0x01	; 1
      00008E 01                     542 	.db #0x01	; 1
      00008F 03                     543 	.db #0x03	; 3
      000090 0A                     544 	.db #0x0a	; 10
      000091r42r01                  545 	.dw __str_0
      000093r00r00                  546 	.dw _pickaxe_tiles
      000095r00r00                  547 	.dw _pickaxe_mask
      000097                        548 _itmdesc_key:
      000097 02                     549 	.db #0x02	; 2
      000098 01                     550 	.db #0x01	; 1
      000099 04                     551 	.db #0x04	; 4
      00009A 0E                     552 	.db #0x0e	; 14
      00009B 0C                     553 	.db #0x0c	; 12
      00009Cr50r01                  554 	.dw __str_1
      00009Er00r00                  555 	.dw _key_tiles
      0000A0r00r00                  556 	.dw _key_mask
      0000A2                        557 _itmdesc_grass:
      0000A2 03                     558 	.db #0x03	; 3
      0000A3 01                     559 	.db #0x01	; 1
      0000A4 04                     560 	.db #0x04	; 4
      0000A5 0E                     561 	.db #0x0e	; 14
      0000A6 0C                     562 	.db #0x0c	; 12
      0000A7r5Dr01                  563 	.dw __str_2
      0000A9r00r00                  564 	.dw _grass_tiles
      0000ABr00r00                  565 	.dw _grass_mask
      0000AD                        566 _itmdesc_mushrooms:
      0000AD 04                     567 	.db #0x04	; 4
      0000AE 01                     568 	.db #0x01	; 1
      0000AF 00                     569 	.db #0x00	; 0
      0000B0 07                     570 	.db #0x07	; 7
      0000B1 06                     571 	.db #0x06	; 6
      0000B2r6Br01                  572 	.dw __str_3
      0000B4r00r00                  573 	.dw _mushrooms_tiles
      0000B6r00r00                  574 	.dw _mushrooms_mask
      0000B8                        575 _itmdesc_pie:
      0000B8 05                     576 	.db #0x05	; 5
      0000B9 FF                     577 	.db #0xff	; 255
      0000BA FF                     578 	.db #0xff	; 255
      0000BB 00                     579 	.db #0x00	; 0
      0000BC 00                     580 	.db #0x00	; 0
      0000BDr75r01                  581 	.dw __str_4
      0000BFr00r00                  582 	.dw _pie_tiles
      0000C1r00r00                  583 	.dw _pie_mask
      0000C3                        584 _itmdesc_jar:
      0000C3 06                     585 	.db #0x06	; 6
      0000C4 00                     586 	.db #0x00	; 0
      0000C5 05                     587 	.db #0x05	; 5
      0000C6 02                     588 	.db #0x02	; 2
      0000C7 0E                     589 	.db #0x0e	; 14
      0000C8r82r01                  590 	.dw __str_5
      0000CAr00r00                  591 	.dw _jar_tiles
      0000CCr00r00                  592 	.dw _jar_mask
      0000CE                        593 _itmdesc_lid:
      0000CE 07                     594 	.db #0x07	; 7
      0000CF 00                     595 	.db #0x00	; 0
      0000D0 02                     596 	.db #0x02	; 2
      0000D1 07                     597 	.db #0x07	; 7
      0000D2 04                     598 	.db #0x04	; 4
      0000D3r8Cr01                  599 	.dw __str_6
      0000D5r00r00                  600 	.dw _lid_tiles
      0000D7r00r00                  601 	.dw _lid_mask
      0000D9                        602 _itmdesc_firefly:
      0000D9 08                     603 	.db #0x08	; 8
      0000DA FF                     604 	.db #0xff	; 255
      0000DB FF                     605 	.db #0xff	; 255
      0000DC 00                     606 	.db #0x00	; 0
      0000DD 00                     607 	.db #0x00	; 0
      0000DEr97r01                  608 	.dw __str_7
      0000E0 00 00                  609 	.dw #0x0000
      0000E2 00 00                  610 	.dw #0x0000
      0000E4                        611 _itmdesc_blockage2:
      0000E4 0C                     612 	.db #0x0c	; 12
      0000E5 01                     613 	.db #0x01	; 1
      0000E6 01                     614 	.db #0x01	; 1
      0000E7 12                     615 	.db #0x12	; 18
      0000E8 0A                     616 	.db #0x0a	; 10
      0000E9r9Fr01                  617 	.dw __str_8
      0000EBr00r00                  618 	.dw _blockage2_tiles
      0000ED 00 00                  619 	.dw #0x0000
      0000EF                        620 _itmdesc_blockage1:
      0000EF 0D                     621 	.db #0x0d	; 13
      0000F0 01                     622 	.db #0x01	; 1
      0000F1 01                     623 	.db #0x01	; 1
      0000F2 11                     624 	.db #0x11	; 17
      0000F3 0A                     625 	.db #0x0a	; 10
      0000F4r9Fr01                  626 	.dw __str_8
      0000F6r00r00                  627 	.dw _blockage1_tiles
      0000F8 00 00                  628 	.dw #0x0000
      0000FA                        629 _itmdesc_blockage0:
      0000FA 0E                     630 	.db #0x0e	; 14
      0000FB 01                     631 	.db #0x01	; 1
      0000FC 01                     632 	.db #0x01	; 1
      0000FD 11                     633 	.db #0x11	; 17
      0000FE 09                     634 	.db #0x09	; 9
      0000FFr9Fr01                  635 	.dw __str_8
      000101r00r00                  636 	.dw _blockage0_tiles
      000103 00 00                  637 	.dw #0x0000
      000105                        638 _itmdesc_coin0:
      000105 89                     639 	.db #0x89	; 137
      000106 01                     640 	.db #0x01	; 1
      000107 01                     641 	.db #0x01	; 1
      000108 12                     642 	.db #0x12	; 18
      000109 02                     643 	.db #0x02	; 2
      00010ArA8r01                  644 	.dw __str_9
      00010Cr00r00                  645 	.dw _coin_tiles
      00010Er00r00                  646 	.dw _coin_mask
      000110                        647 _itmdesc_coin1:
      000110 8A                     648 	.db #0x8a	; 138
      000111 00                     649 	.db #0x00	; 0
      000112 00                     650 	.db #0x00	; 0
      000113 14                     651 	.db #0x14	; 20
      000114 05                     652 	.db #0x05	; 5
      000115rA8r01                  653 	.dw __str_9
      000117r00r00                  654 	.dw _coin_tiles
      000119r00r00                  655 	.dw _coin_mask
      00011B                        656 _itmdesc_coin2:
      00011B 8B                     657 	.db #0x8b	; 139
      00011C 01                     658 	.db #0x01	; 1
      00011D 03                     659 	.db #0x03	; 3
      00011E 01                     660 	.db #0x01	; 1
      00011F 02                     661 	.db #0x02	; 2
      000120rA8r01                  662 	.dw __str_9
      000122r00r00                  663 	.dw _coin_tiles
      000124r00r00                  664 	.dw _coin_mask
      000126                        665 _all_items_desc:
      000126r8Cr00                  666 	.dw _itmdesc_pickaxe
      000128r97r00                  667 	.dw _itmdesc_key
      00012ArADr00                  668 	.dw _itmdesc_mushrooms
      00012CrA2r00                  669 	.dw _itmdesc_grass
      00012ErB8r00                  670 	.dw _itmdesc_pie
      000130rC3r00                  671 	.dw _itmdesc_jar
      000132rCEr00                  672 	.dw _itmdesc_lid
      000134rD9r00                  673 	.dw _itmdesc_firefly
      000136rE4r00                  674 	.dw _itmdesc_blockage2
      000138rEFr00                  675 	.dw _itmdesc_blockage1
      00013ArFAr00                  676 	.dw _itmdesc_blockage0
      00013Cr05r01                  677 	.dw _itmdesc_coin0
      00013Er10r01                  678 	.dw _itmdesc_coin1
      000140r1Br01                  679 	.dw _itmdesc_coin2
      000142                        680 __str_0:
      000142 48 45 41 56 59 20 50   681 	.ascii "HEAVY PICKAXE"
             49 43 4B 41 58 45
      00014F 00                     682 	.db 0x00
      000150                        683 __str_1:
      000150 45 4C 45 56 41 54 4F   684 	.ascii "ELEVATOR KEY"
             52 20 4B 45 59
      00015C 00                     685 	.db 0x00
      00015D                        686 __str_2:
      00015D 54 55 46 54 20 4F 46   687 	.ascii "TUFT OF GRASS"
             20 47 52 41 53 53
      00016A 00                     688 	.db 0x00
      00016B                        689 __str_3:
      00016B 4D 55 53 48 52 4F 4F   690 	.ascii "MUSHROOMS"
             4D 53
      000174 00                     691 	.db 0x00
      000175                        692 __str_4:
      000175 4D 55 53 48 52 4F 4F   693 	.ascii "MUSHROOM PIE"
             4D 20 50 49 45
      000181 00                     694 	.db 0x00
      000182                        695 __str_5:
      000182 47 4C 41 53 53 20 4A   696 	.ascii "GLASS JAR"
             41 52
      00018B 00                     697 	.db 0x00
      00018C                        698 __str_6:
      00018C 57 4F 4F 44 45 4E 20   699 	.ascii "WOODEN LID"
             4C 49 44
      000196 00                     700 	.db 0x00
      000197                        701 __str_7:
      000197 46 49 52 45 46 4C 59   702 	.ascii "FIREFLY"
      00019E 00                     703 	.db 0x00
      00019F                        704 __str_8:
      00019F 42 4F 55 4C 44 45 52   705 	.ascii "BOULDERS"
             53
      0001A7 00                     706 	.db 0x00
      0001A8                        707 __str_9:
      0001A8 43 4F 49 4E            708 	.ascii "COIN"
      0001AC 00                     709 	.db 0x00
                                    710 ;src/include/inventory.h:81: game_item * show_inventory() NONBANKED {
                                    711 ;	---------------------------------
                                    712 ; Function show_inventory
                                    713 ; ---------------------------------
      0001AD                        714 _show_inventory::
                                    715 ;src/include/inventory.h:82: push_bank(1);
      0001AD 3E 01                  716 	ld	a, #0x01
      0001AF F5                     717 	push	af
      0001B0 33                     718 	inc	sp
      0001B1 CDr00r00               719 	call	_push_bank
      0001B4 33                     720 	inc	sp
                                    721 ;src/include/inventory.h:83: game_item * res = execute_inventory();
      0001B5 CDr00r00               722 	call	_execute_inventory
                                    723 ;src/include/inventory.h:84: pop_bank();
      0001B8 D5                     724 	push	de
      0001B9 CDr00r00               725 	call	_pop_bank
      0001BC D1                     726 	pop	de
                                    727 ;src/include/inventory.h:85: return res;
                                    728 ;src/include/inventory.h:86: }
      0001BD C9                     729 	ret
                                    730 ;src/include/inventory.h:157: void place_room_items(const UBYTE row, const UBYTE col, unsigned char * room_buf) NONBANKED {
                                    731 ;	---------------------------------
                                    732 ; Function place_room_items
                                    733 ; ---------------------------------
      0001BE                        734 _place_room_items::
      0001BE 3B                     735 	dec	sp
      0001BF 3B                     736 	dec	sp
                                    737 ;src/include/inventory.h:158: item_tiles_hiwater = window_tiles_hiwater;
      0001C0 FAr43r02               738 	ld	a, (#_window_tiles_hiwater)
      0001C3 EAr46r02               739 	ld	(#_item_tiles_hiwater),a
                                    740 ;src/include/inventory.h:159: __temp_game_item = game_item_list.first;
      0001C6 11rC6r02               741 	ld	de, #(_game_item_list + 1)
      0001C9 1A                     742 	ld	a, (de)
      0001CA 21rCAr02               743 	ld	hl, #___temp_game_item
      0001CD 22                     744 	ld	(hl+), a
      0001CE 13                     745 	inc	de
      0001CF 1A                     746 	ld	a, (de)
      0001D0 77                     747 	ld	(hl), a
                                    748 ;src/include/inventory.h:160: while (__temp_game_item) {
      0001D1                        749 00110$:
      0001D1 21rCBr02               750 	ld	hl, #___temp_game_item + 1
      0001D4 3A                     751 	ld	a, (hl-)
      0001D5 B6                     752 	or	a, (hl)
      0001D6 CArE3r03               753 	jp	Z, 00117$
                                    754 ;src/include/inventory.h:161: if ((__temp_game_item->room_row == row) && (__temp_game_item->room_col == col)) {
      0001D9 7E                     755 	ld	a, (hl)
      0001DA F8 00                  756 	ldhl	sp,	#0
      0001DC 77                     757 	ld	(hl), a
      0001DD FArCBr02               758 	ld	a, (#___temp_game_item + 1)
      0001E0 F8 01                  759 	ldhl	sp,	#1
      0001E2 77                     760 	ld	(hl), a
      0001E3 C1                     761 	pop	bc
      0001E4 C5                     762 	push	bc
      0001E5 03                     763 	inc	bc
      0001E6 0A                     764 	ld	a, (bc)
      0001E7 4F                     765 	ld	c, a
      0001E8 F8 04                  766 	ldhl	sp,	#4
      0001EA 7E                     767 	ld	a, (hl)
      0001EB 91                     768 	sub	a, c
      0001EC C2rCCr03               769 	jp	NZ,00108$
      0001EF C1                     770 	pop	bc
      0001F0 C5                     771 	push	bc
      0001F1 03                     772 	inc	bc
      0001F2 03                     773 	inc	bc
      0001F3 0A                     774 	ld	a, (bc)
      0001F4 4F                     775 	ld	c, a
      0001F5 F8 05                  776 	ldhl	sp,	#5
      0001F7 7E                     777 	ld	a, (hl)
      0001F8 91                     778 	sub	a, c
      0001F9 C2rCCr03               779 	jp	NZ,00108$
                                    780 ;src/include/inventory.h:162: __temp_tiledata = __temp_game_item->desc->data;
      0001FC D1                     781 	pop	de
      0001FD D5                     782 	push	de
      0001FE 21 05 00               783 	ld	hl, #0x0005
      000201 19                     784 	add	hl, de
      000202 2A                     785 	ld	a, (hl+)
      000203 4F                     786 	ld	c, a
      000204 46                     787 	ld	b, (hl)
      000205 21 07 00               788 	ld	hl, #0x0007
      000208 09                     789 	add	hl, bc
      000209 5D                     790 	ld	e, l
      00020A 54                     791 	ld	d, h
      00020B 1A                     792 	ld	a, (de)
      00020C 21rD2r02               793 	ld	hl, #___temp_tiledata
      00020F 22                     794 	ld	(hl+), a
      000210 13                     795 	inc	de
      000211 1A                     796 	ld	a, (de)
      000212 77                     797 	ld	(hl), a
                                    798 ;src/include/inventory.h:163: if (__temp_tiledata) {
      000213 21rD3r02               799 	ld	hl, #___temp_tiledata + 1
      000216 3A                     800 	ld	a, (hl-)
      000217 B6                     801 	or	a, (hl)
      000218 CArCCr03               802 	jp	Z, 00108$
                                    803 ;src/include/inventory.h:164: item_tiles_hiwater -= item_map_size;
      00021B 21r46r02               804 	ld	hl, #_item_tiles_hiwater
      00021E 7E                     805 	ld	a, (hl)
      00021F C6 FC                  806 	add	a, #0xfc
      000221 77                     807 	ld	(hl), a
                                    808 ;src/include/inventory.h:167: push_bank(1); 
      000222 3E 01                  809 	ld	a, #0x01
      000224 F5                     810 	push	af
      000225 33                     811 	inc	sp
      000226 CDr00r00               812 	call	_push_bank
      000229 33                     813 	inc	sp
                                    814 ;src/include/inventory.h:168: unshrink_tiles_to_buf(item_map_size, __temp_tiledata->data, __temp_item_tiledata0); 
      00022A 21rD2r02               815 	ld	hl, #___temp_tiledata
      00022D 2A                     816 	ld	a, (hl+)
      00022E 4F                     817 	ld	c, a
      00022F 46                     818 	ld	b, (hl)
      000230 03                     819 	inc	bc
      000231 11rDCr02               820 	ld	de, #___temp_item_tiledata0
      000234 D5                     821 	push	de
      000235 C5                     822 	push	bc
      000236 3E 04                  823 	ld	a, #0x04
      000238 F5                     824 	push	af
      000239 33                     825 	inc	sp
      00023A CDr91r00               826 	call	_unshrink_tiles_to_buf
      00023D E8 05                  827 	add	sp, #5
                                    828 ;src/include/inventory.h:161: if ((__temp_game_item->room_row == row) && (__temp_game_item->room_col == col)) {
      00023F 21rCAr02               829 	ld	hl, #___temp_game_item
      000242 2A                     830 	ld	a, (hl+)
      000243 4F                     831 	ld	c, a
      000244 46                     832 	ld	b, (hl)
                                    833 ;src/include/inventory.h:162: __temp_tiledata = __temp_game_item->desc->data;
      000245 21 05 00               834 	ld	hl, #0x0005
      000248 09                     835 	add	hl, bc
                                    836 ;src/include/inventory.h:169: __temp_tiledata = (__temp_game_item->desc->mask) ? __temp_game_item->desc->mask : &null_mask;
      000249 2A                     837 	ld	a, (hl+)
      00024A 4F                     838 	ld	c, a
      00024B 46                     839 	ld	b, (hl)
      00024C 21 09 00               840 	ld	hl, #0x0009
      00024F 09                     841 	add	hl, bc
      000250 2A                     842 	ld	a, (hl+)
      000251 4F                     843 	ld	c, a
      000252 46                     844 	ld	b, (hl)
      000253 78                     845 	ld	a, b
      000254 B1                     846 	or	a, c
      000255 20 03                  847 	jr	NZ, 00120$
      000257 01r00r00               848 	ld	bc, #_null_mask
      00025A                        849 00120$:
      00025A 21rD2r02               850 	ld	hl, #___temp_tiledata
      00025D 79                     851 	ld	a, c
      00025E 22                     852 	ld	(hl+), a
                                    853 ;src/include/inventory.h:170: unshrink_tiles_to_buf(item_map_size, __temp_tiledata->data, __temp_item_tiledata2); 
      00025F 78                     854 	ld	a, b
      000260 32                     855 	ld	(hl-), a
      000261 2A                     856 	ld	a, (hl+)
      000262 4F                     857 	ld	c, a
      000263 46                     858 	ld	b, (hl)
      000264 03                     859 	inc	bc
      000265 11r5Cr03               860 	ld	de, #___temp_item_tiledata2
      000268 D5                     861 	push	de
      000269 C5                     862 	push	bc
      00026A 3E 04                  863 	ld	a, #0x04
      00026C F5                     864 	push	af
      00026D 33                     865 	inc	sp
      00026E CDr91r00               866 	call	_unshrink_tiles_to_buf
      000271 E8 05                  867 	add	sp, #5
                                    868 ;src/include/inventory.h:171: pop_bank();
      000273 CDr00r00               869 	call	_pop_bank
                                    870 ;src/include/inventory.h:174: get_map_from_buf(__temp_game_item->x, __temp_game_item->y, item_width, item_height, __temp_bkg_tiles, room_buf, room_width, room_height);
                                    871 ;src/include/inventory.h:161: if ((__temp_game_item->room_row == row) && (__temp_game_item->room_col == col)) {
      000276 21rCAr02               872 	ld	hl, #___temp_game_item
      000279 2A                     873 	ld	a, (hl+)
      00027A 4F                     874 	ld	c, a
      00027B 46                     875 	ld	b, (hl)
                                    876 ;src/include/inventory.h:174: get_map_from_buf(__temp_game_item->x, __temp_game_item->y, item_width, item_height, __temp_bkg_tiles, room_buf, room_width, room_height);
      00027C 21 04 00               877 	ld	hl, #0x0004
      00027F 09                     878 	add	hl, bc
      000280 56                     879 	ld	d, (hl)
      000281 03                     880 	inc	bc
      000282 03                     881 	inc	bc
      000283 03                     882 	inc	bc
      000284 0A                     883 	ld	a, (bc)
      000285 26 11                  884 	ld	h, #0x11
                                    885 ;	spillPairReg hl
                                    886 ;	spillPairReg hl
      000287 E5                     887 	push	hl
      000288 33                     888 	inc	sp
      000289 26 1E                  889 	ld	h, #0x1e
                                    890 ;	spillPairReg hl
                                    891 ;	spillPairReg hl
      00028B E5                     892 	push	hl
      00028C 33                     893 	inc	sp
      00028D F8 08                  894 	ldhl	sp,	#8
      00028F 4E                     895 	ld	c, (hl)
      000290 23                     896 	inc	hl
      000291 46                     897 	ld	b, (hl)
      000292 C5                     898 	push	bc
      000293 01rD8r02               899 	ld	bc, #___temp_bkg_tiles
      000296 C5                     900 	push	bc
      000297 26 02                  901 	ld	h, #0x02
                                    902 ;	spillPairReg hl
                                    903 ;	spillPairReg hl
      000299 E5                     904 	push	hl
      00029A 33                     905 	inc	sp
      00029B 26 02                  906 	ld	h, #0x02
                                    907 ;	spillPairReg hl
                                    908 ;	spillPairReg hl
      00029D 6A                     909 	ld	l, d
      00029E E5                     910 	push	hl
      00029F F5                     911 	push	af
      0002A0 33                     912 	inc	sp
      0002A1 CDr61r02               913 	call	_get_map_from_buf
      0002A4 E8 0A                  914 	add	sp, #10
                                    915 ;src/include/inventory.h:178: __temp_j = current_room->room_tiles->count;
      0002A6 21r0Er00               916 	ld	hl, #_current_room
      0002A9 2A                     917 	ld	a, (hl+)
      0002AA 4F                     918 	ld	c, a
      0002AB 46                     919 	ld	b, (hl)
      0002AC 21 05 00               920 	ld	hl, #0x0005
      0002AF 09                     921 	add	hl, bc
      0002B0 2A                     922 	ld	a, (hl+)
      0002B1 4F                     923 	ld	c, a
      0002B2 46                     924 	ld	b, (hl)
      0002B3 0A                     925 	ld	a, (bc)
      0002B4 EAr0Cr02               926 	ld	(#___temp_j),a
                                    927 ;src/include/inventory.h:179: __temp_text_ptr1 = __temp_item_tiledata1;
      0002B7 21rB2r03               928 	ld	hl, #___temp_text_ptr1
      0002BA 36r1C                  929 	ld	(hl), #<(___temp_item_tiledata1)
      0002BC 23                     930 	inc	hl
      0002BD 36s03                  931 	ld	(hl), #>(___temp_item_tiledata1)
                                    932 ;src/include/inventory.h:180: for (__temp_i = 0; __temp_i < item_map_size; __temp_i++) {
      0002BF 21r0Br02               933 	ld	hl, #___temp_i
      0002C2 36 00                  934 	ld	(hl), #0x00
      0002C4                        935 00113$:
                                    936 ;src/include/inventory.h:181: __temp_k = __temp_bkg_tiles[__temp_i];
      0002C4 3ErD8                  937 	ld	a, #<(___temp_bkg_tiles)
      0002C6 21r0Br02               938 	ld	hl, #___temp_i
      0002C9 86                     939 	add	a, (hl)
      0002CA 4F                     940 	ld	c, a
      0002CB 3Es02                  941 	ld	a, #>(___temp_bkg_tiles)
      0002CD CE 00                  942 	adc	a, #0x00
      0002CF 47                     943 	ld	b, a
      0002D0 0A                     944 	ld	a, (bc)
                                    945 ;src/include/inventory.h:182: if (__temp_k >= __temp_j) __temp_k = 0; // merge with bkg tiles only, "modified tile" = empty, can't drop item on item
      0002D1 EAr0Dr02               946 	ld	(#___temp_k),a
      0002D4 21r0Cr02               947 	ld	hl, #___temp_j
      0002D7 96                     948 	sub	a, (hl)
      0002D8 38 05                  949 	jr	C, 00102$
      0002DA 21r0Dr02               950 	ld	hl, #___temp_k
      0002DD 36 00                  951 	ld	(hl), #0x00
      0002DF                        952 00102$:
                                    953 ;src/include/inventory.h:183: unshrink_tiles_to_buf(1, get_shrinked_tile_offset(__temp_k, current_room->room_tiles->data), __temp_text_ptr1);
      0002DF 21r0Er00               954 	ld	hl, #_current_room
      0002E2 2A                     955 	ld	a, (hl+)
      0002E3 4F                     956 	ld	c, a
      0002E4 46                     957 	ld	b, (hl)
      0002E5 21 05 00               958 	ld	hl, #0x0005
      0002E8 09                     959 	add	hl, bc
      0002E9 2A                     960 	ld	a, (hl+)
      0002EA 4F                     961 	ld	c, a
      0002EB 46                     962 	ld	b, (hl)
      0002EC 03                     963 	inc	bc
      0002ED C5                     964 	push	bc
      0002EE FAr0Dr02               965 	ld	a, (#___temp_k)
      0002F1 F5                     966 	push	af
      0002F2 33                     967 	inc	sp
      0002F3 CDrEBr00               968 	call	_get_shrinked_tile_offset
      0002F6 E8 03                  969 	add	sp, #3
      0002F8 21rB2r03               970 	ld	hl, #___temp_text_ptr1
      0002FB 2A                     971 	ld	a, (hl+)
      0002FC 4F                     972 	ld	c, a
      0002FD 46                     973 	ld	b, (hl)
      0002FE C5                     974 	push	bc
      0002FF D5                     975 	push	de
      000300 3E 01                  976 	ld	a, #0x01
      000302 F5                     977 	push	af
      000303 33                     978 	inc	sp
      000304 CDr91r00               979 	call	_unshrink_tiles_to_buf
      000307 E8 05                  980 	add	sp, #5
                                    981 ;src/include/inventory.h:184: __temp_text_ptr1 += 16;
      000309 21rB2r03               982 	ld	hl, #___temp_text_ptr1
      00030C 7E                     983 	ld	a, (hl)
      00030D C6 10                  984 	add	a, #0x10
      00030F 22                     985 	ld	(hl+), a
      000310 7E                     986 	ld	a, (hl)
      000311 CE 00                  987 	adc	a, #0x00
      000313 77                     988 	ld	(hl), a
                                    989 ;src/include/inventory.h:180: for (__temp_i = 0; __temp_i < item_map_size; __temp_i++) {
      000314 21r0Br02               990 	ld	hl, #___temp_i
      000317 34                     991 	inc	(hl)
      000318 7E                     992 	ld	a, (hl)
      000319 D6 04                  993 	sub	a, #0x04
      00031B 38 A7                  994 	jr	C, 00113$
                                    995 ;src/include/inventory.h:187: __temp_text_ptr0 = __temp_item_tiledata0; __temp_text_ptr1 = __temp_item_tiledata1; __temp_text_ptr2 = __temp_item_tiledata2;
      00031D 21rB0r03               996 	ld	hl, #___temp_text_ptr0
      000320 36rDC                  997 	ld	(hl), #<(___temp_item_tiledata0)
      000322 23                     998 	inc	hl
      000323 36s02                  999 	ld	(hl), #>(___temp_item_tiledata0)
      000325 21rB2r03              1000 	ld	hl, #___temp_text_ptr1
      000328 36r1C                 1001 	ld	(hl), #<(___temp_item_tiledata1)
      00032A 23                    1002 	inc	hl
      00032B 36s03                 1003 	ld	(hl), #>(___temp_item_tiledata1)
      00032D 21rB4r03              1004 	ld	hl, #___temp_text_ptr2
      000330 36r5C                 1005 	ld	(hl), #<(___temp_item_tiledata2)
      000332 23                    1006 	inc	hl
      000333 36s03                 1007 	ld	(hl), #>(___temp_item_tiledata2)
                                   1008 ;src/include/inventory.h:188: for (__temp_i = 0; __temp_i < item_tiledata_size; __temp_i++) {
      000335 21r0Br02              1009 	ld	hl, #___temp_i
      000338 36 00                 1010 	ld	(hl), #0x00
      00033A                       1011 00115$:
                                   1012 ;src/include/inventory.h:189: *__temp_text_ptr0 = *__temp_text_ptr1 & *__temp_text_ptr2 | *__temp_text_ptr0;
      00033A 21rB0r03              1013 	ld	hl, #___temp_text_ptr0
      00033D 2A                    1014 	ld	a, (hl+)
      00033E 4F                    1015 	ld	c, a
      00033F 46                    1016 	ld	b, (hl)
      000340 21rB2r03              1017 	ld	hl, #___temp_text_ptr1
      000343 6E                    1018 	ld	l, (hl)
                                   1019 ;	spillPairReg hl
                                   1020 ;	spillPairReg hl
      000344 FArB3r03              1021 	ld	a, (___temp_text_ptr1 + 1)
      000347 67                    1022 	ld	h, a
                                   1023 ;	spillPairReg hl
                                   1024 ;	spillPairReg hl
      000348 5E                    1025 	ld	e, (hl)
      000349 21rB4r03              1026 	ld	hl, #___temp_text_ptr2
      00034C 6E                    1027 	ld	l, (hl)
                                   1028 ;	spillPairReg hl
                                   1029 ;	spillPairReg hl
      00034D FArB5r03              1030 	ld	a, (___temp_text_ptr2 + 1)
      000350 67                    1031 	ld	h, a
                                   1032 ;	spillPairReg hl
                                   1033 ;	spillPairReg hl
      000351 7E                    1034 	ld	a, (hl)
      000352 A3                    1035 	and	a, e
      000353 5F                    1036 	ld	e, a
      000354 0A                    1037 	ld	a, (bc)
      000355 B3                    1038 	or	a, e
      000356 02                    1039 	ld	(bc), a
                                   1040 ;src/include/inventory.h:190: __temp_text_ptr0++; __temp_text_ptr1++; __temp_text_ptr2++;
      000357 21rB0r03              1041 	ld	hl, #___temp_text_ptr0
      00035A 34                    1042 	inc	(hl)
      00035B 20 02                 1043 	jr	NZ, 00180$
      00035D 23                    1044 	inc	hl
      00035E 34                    1045 	inc	(hl)
      00035F                       1046 00180$:
      00035F 21rB2r03              1047 	ld	hl, #___temp_text_ptr1
      000362 34                    1048 	inc	(hl)
      000363 20 02                 1049 	jr	NZ, 00181$
      000365 23                    1050 	inc	hl
      000366 34                    1051 	inc	(hl)
      000367                       1052 00181$:
      000367 21rB4r03              1053 	ld	hl, #___temp_text_ptr2
      00036A 34                    1054 	inc	(hl)
      00036B 20 02                 1055 	jr	NZ, 00182$
      00036D 23                    1056 	inc	hl
      00036E 34                    1057 	inc	(hl)
      00036F                       1058 00182$:
                                   1059 ;src/include/inventory.h:188: for (__temp_i = 0; __temp_i < item_tiledata_size; __temp_i++) {
      00036F 21r0Br02              1060 	ld	hl, #___temp_i
      000372 34                    1061 	inc	(hl)
      000373 7E                    1062 	ld	a, (hl)
      000374 D6 40                 1063 	sub	a, #0x40
      000376 38 C2                 1064 	jr	C, 00115$
                                   1065 ;src/include/inventory.h:194: set_bkg_data(item_tiles_hiwater, item_map_size, __temp_item_tiledata0);
      000378 11rDCr02              1066 	ld	de, #___temp_item_tiledata0
      00037B D5                    1067 	push	de
      00037C 3E 04                 1068 	ld	a, #0x04
      00037E F5                    1069 	push	af
      00037F 33                    1070 	inc	sp
      000380 FAr46r02              1071 	ld	a, (#_item_tiles_hiwater)
      000383 F5                    1072 	push	af
      000384 33                    1073 	inc	sp
      000385 CDr00r00              1074 	call	_set_bkg_data
      000388 E8 04                 1075 	add	sp, #4
                                   1076 ;src/include/inventory.h:197: set_inc_tiles(item_tiles_hiwater, item_map_size, __temp_tiles);
      00038A 11rD4r02              1077 	ld	de, #___temp_tiles
      00038D D5                    1078 	push	de
      00038E 3E 04                 1079 	ld	a, #0x04
      000390 F5                    1080 	push	af
      000391 33                    1081 	inc	sp
      000392 FAr46r02              1082 	ld	a, (#_item_tiles_hiwater)
      000395 F5                    1083 	push	af
      000396 33                    1084 	inc	sp
      000397 CDr00r00              1085 	call	_set_inc_tiles
      00039A E8 04                 1086 	add	sp, #4
                                   1087 ;src/include/inventory.h:198: put_map_to_buf(__temp_game_item->x, __temp_game_item->y, item_width, item_height, __temp_tiles, room_buf, room_width, room_height);
                                   1088 ;src/include/inventory.h:161: if ((__temp_game_item->room_row == row) && (__temp_game_item->room_col == col)) {
      00039C 21rCAr02              1089 	ld	hl, #___temp_game_item
      00039F 2A                    1090 	ld	a, (hl+)
      0003A0 4F                    1091 	ld	c, a
      0003A1 46                    1092 	ld	b, (hl)
                                   1093 ;src/include/inventory.h:198: put_map_to_buf(__temp_game_item->x, __temp_game_item->y, item_width, item_height, __temp_tiles, room_buf, room_width, room_height);
      0003A2 21 04 00              1094 	ld	hl, #0x0004
      0003A5 09                    1095 	add	hl, bc
      0003A6 56                    1096 	ld	d, (hl)
      0003A7 03                    1097 	inc	bc
      0003A8 03                    1098 	inc	bc
      0003A9 03                    1099 	inc	bc
      0003AA 0A                    1100 	ld	a, (bc)
      0003AB 26 11                 1101 	ld	h, #0x11
                                   1102 ;	spillPairReg hl
                                   1103 ;	spillPairReg hl
      0003AD E5                    1104 	push	hl
      0003AE 33                    1105 	inc	sp
      0003AF 26 1E                 1106 	ld	h, #0x1e
                                   1107 ;	spillPairReg hl
                                   1108 ;	spillPairReg hl
      0003B1 E5                    1109 	push	hl
      0003B2 33                    1110 	inc	sp
      0003B3 F8 08                 1111 	ldhl	sp,	#8
      0003B5 4E                    1112 	ld	c, (hl)
      0003B6 23                    1113 	inc	hl
      0003B7 46                    1114 	ld	b, (hl)
      0003B8 C5                    1115 	push	bc
      0003B9 01rD4r02              1116 	ld	bc, #___temp_tiles
      0003BC C5                    1117 	push	bc
      0003BD 26 02                 1118 	ld	h, #0x02
                                   1119 ;	spillPairReg hl
                                   1120 ;	spillPairReg hl
      0003BF E5                    1121 	push	hl
      0003C0 33                    1122 	inc	sp
      0003C1 26 02                 1123 	ld	h, #0x02
                                   1124 ;	spillPairReg hl
                                   1125 ;	spillPairReg hl
      0003C3 6A                    1126 	ld	l, d
      0003C4 E5                    1127 	push	hl
      0003C5 F5                    1128 	push	af
      0003C6 33                    1129 	inc	sp
      0003C7 CDrE1r01              1130 	call	_put_map_to_buf
      0003CA E8 0A                 1131 	add	sp, #10
      0003CC                       1132 00108$:
                                   1133 ;src/include/inventory.h:201: __temp_game_item = __temp_game_item->next;
      0003CC 21rCAr02              1134 	ld	hl, #___temp_game_item
      0003CF 2A                    1135 	ld	a, (hl+)
      0003D0 4F                    1136 	ld	c, a
      0003D1 46                    1137 	ld	b, (hl)
      0003D2 21 07 00              1138 	ld	hl, #0x0007
      0003D5 09                    1139 	add	hl, bc
      0003D6 5D                    1140 	ld	e, l
      0003D7 54                    1141 	ld	d, h
      0003D8 1A                    1142 	ld	a, (de)
      0003D9 21rCAr02              1143 	ld	hl, #___temp_game_item
      0003DC 22                    1144 	ld	(hl+), a
      0003DD 13                    1145 	inc	de
      0003DE 1A                    1146 	ld	a, (de)
      0003DF 77                    1147 	ld	(hl), a
      0003E0 C3rD1r01              1148 	jp	00110$
      0003E3                       1149 00117$:
                                   1150 ;src/include/inventory.h:203: }
      0003E3 33                    1151 	inc	sp
      0003E4 33                    1152 	inc	sp
      0003E5 C9                    1153 	ret
                                   1154 	.area _HOME
                                   1155 ;--------------------------------------------------------
                                   1156 ; code
                                   1157 ;--------------------------------------------------------
                                   1158 	.area _CODE
                                   1159 ;src/include/rle_utils.h:2: void set_inc_tiles(UBYTE from, UBYTE count, unsigned char * buf) __naked
                                   1160 ;	---------------------------------
                                   1161 ; Function set_inc_tiles
                                   1162 ; ---------------------------------
      000000                       1163 _set_inc_tiles::
                                   1164 ;src/include/rle_utils.h:22: __endasm;           
      000000 F8 02                 1165 	lda	HL, 2(SP) ; Skip return address and registers
      000002 5E                    1166 	ld	E, (HL) ; E = from
      000003 23                    1167 	inc	HL
      000004 56                    1168 	ld	D, (HL) ; D = count
      000005 23                    1169 	inc	HL
      000006 2A                    1170 	ld	A, (HL+)
      000007 66                    1171 	ld	H, (HL)
      000008 6F                    1172 	ld	L, A ; HL = buf
      000009 7B                    1173 	ld	A, E
      00000A                       1174 	$tileset01:
      00000A 22                    1175 	ld (HL+), A
      00000B 3C                    1176 	inc	A
      00000C 15                    1177 	dec	D
      00000D 20 FB                 1178 	jr	NZ, $tileset01
      00000F C9                    1179 	ret
                                   1180 ;src/include/rle_utils.h:23: }
                                   1181 ;src/include/rle_utils.h:26: void unshrink_tiles(UBYTE from, UBYTE count, unsigned char * shrinked_tiles) __naked
                                   1182 ;	---------------------------------
                                   1183 ; Function unshrink_tiles
                                   1184 ; ---------------------------------
      000010                       1185 _unshrink_tiles::
                                   1186 ;src/include/rle_utils.h:142: __endasm;           
                                   1187 ;	TODO: switching to copy_vram
                                   1188 ;	ldh A,(.LCDC)
                                   1189 ;	bit 4,A
                                   1190 ;	jp NZ,_set_sprite_data
      000010 C5                    1191 	push	BC
      000011 F8 07                 1192 	lda	HL,7(SP) ; Skip return address and registers
      000013 46                    1193 	ld	B,(HL) ; BC = data
      000014 2B                    1194 	dec	HL
      000015 4E                    1195 	ld	C,(HL)
      000016 2B                    1196 	dec	HL
      000017 5E                    1197 	ld	E,(HL) ; E = nb_tiles
      000018 2B                    1198 	dec	HL
      000019 6E                    1199 	ld	L,(HL) ; L = first_tile
      00001A 7D                    1200 	ld	A,L
      00001B 07                    1201 	rlca	; Sign extend (patterns have signed numbers)
      00001C 9F                    1202 	sbc	A
      00001D 67                    1203 	ld	H,A
      00001E 29                    1204 	add	HL,HL ; HL *= 16
      00001F 29                    1205 	add	HL,HL
      000020 29                    1206 	add	HL,HL
      000021 29                    1207 	add	HL,HL
      000022 C5                    1208 	push	BC
      000023 01 00 90              1209 	ld	BC,#0x9000
      000026 09                    1210 	add	HL,BC
      000027 C1                    1211 	pop	BC
      000028                       1212 	$unshr02:
      000028 D5                    1213 	push DE
      000029 0A                    1214 	ld	A, (BC)
      00002A 03                    1215 	inc	BC
      00002B 5F                    1216 	ld	E, A ; E = shrink_type
      00002C 16 08                 1217 	ld	D, #8
      00002E                       1218 	$unshr03:
                                   1219 ; Special version of '.copy_vram'
      00002E CB 5C                 1220 	bit	3, H ; Bigger than 0x9800
      000030 28 06                 1221 	jr	Z, $unshr04
      000032 CB 64                 1222 	bit	4, H
      000034 28 02                 1223 	jr	Z, $unshr04
      000036 CB A4                 1224 	res	4, H ; Switch to 0x8800
      000038                       1225 	$unshr04:
      000038 7B                    1226 	ld A, E
      000039 FE 01                 1227 	cp	#1
      00003B 28 17                 1228 	jr	Z, $unshr20
      00003D FE 02                 1229 	cp	#2
      00003F 28 20                 1230 	jr	Z, $unshr30
      000041 FE 03                 1231 	cp	#3
      000043 28 29                 1232 	jr	Z, $unshr40
      000045 FE 04                 1233 	cp	#4
      000047 28 31                 1234 	jr	Z, $unshr50
      000049                       1235 	$unshr10:
      000049 F0r00                 1236 	ldh A,(#_STAT_REG)
      00004B E6 02                 1237 	and	#0x02
      00004D 20 FA                 1238 	jr	NZ, $unshr10
      00004F AF                    1239 	xor	A
      000050 22                    1240 	ld	(HL+), A
      000051 22                    1241 	ld	(HL+), A
      000052 18 34                 1242 	jr	$unshr0A
      000054                       1243 	$unshr20:
      000054 F0r00                 1244 	ldh A,(#_STAT_REG)
      000056 E6 02                 1245 	and	#0x02
      000058 20 FA                 1246 	jr	NZ, $unshr20
      00005A 0A                    1247 	ld	A, (BC)
      00005B 22                    1248 	ld	(HL+), A
      00005C AF                    1249 	xor	A
      00005D 22                    1250 	ld	(HL+), A
      00005E 03                    1251 	inc	BC
      00005F 18 27                 1252 	jr	$unshr0A
      000061                       1253 	$unshr30:
      000061 F0r00                 1254 	ldh A,(#_STAT_REG)
      000063 E6 02                 1255 	and	#0x02
      000065 20 FA                 1256 	jr	NZ, $unshr30
      000067 AF                    1257 	xor	A
      000068 22                    1258 	ld	(HL+), A
      000069 0A                    1259 	ld	A, (BC)
      00006A 22                    1260 	ld	(HL+), A
      00006B 03                    1261 	inc	BC
      00006C 18 1A                 1262 	jr	$unshr0A
      00006E                       1263 	$unshr40:
      00006E F0r00                 1264 	ldh A,(#_STAT_REG)
      000070 E6 02                 1265 	and	#0x02
      000072 20 FA                 1266 	jr	NZ, $unshr40
      000074 0A                    1267 	ld	A, (BC)
      000075 22                    1268 	ld	(HL+), A
      000076 22                    1269 	ld	(HL+), A
      000077 03                    1270 	inc	BC
      000078 18 0E                 1271 	jr	$unshr0A
      00007A                       1272 	$unshr50:
      00007A F0r00                 1273 	ldh A,(#_STAT_REG)
      00007C E6 02                 1274 	and	#0x02
      00007E 20 FA                 1275 	jr	NZ, $unshr50
      000080 0A                    1276 	ld	A, (BC)
      000081 03                    1277 	inc	BC
      000082 22                    1278 	ld	(HL+), A
      000083 0A                    1279 	ld	A, (BC)
      000084 22                    1280 	ld	(HL+), A
      000085 03                    1281 	inc	BC
      000086 18 00                 1282 	jr	$unshr0A
      000088                       1283 	$unshr0A:
      000088 15                    1284 	dec D
      000089 20 A3                 1285 	jr	NZ, $unshr03
      00008B D1                    1286 	pop	DE
      00008C 1D                    1287 	dec	E
      00008D 20 99                 1288 	jr	NZ, $unshr02
      00008F C1                    1289 	pop	BC
      000090 C9                    1290 	ret
                                   1291 ;src/include/rle_utils.h:143: }
                                   1292 ;src/include/rle_utils.h:146: void unshrink_tiles_to_buf(UBYTE count, const unsigned char * shrinked_tiles, unsigned char * dest) __naked
                                   1293 ;	---------------------------------
                                   1294 ; Function unshrink_tiles_to_buf
                                   1295 ; ---------------------------------
      000091                       1296 _unshrink_tiles_to_buf::
                                   1297 ;src/include/rle_utils.h:227: __endasm;           
      000091 C5                    1298 	push	BC
      000092 F8 04                 1299 	lda	HL, 4(SP)
      000094 5E                    1300 	ld	E, (HL) ; E = count
      000095 23                    1301 	inc	HL
      000096 4E                    1302 	ld	C, (HL)
      000097 23                    1303 	inc	HL
      000098 46                    1304 	ld	B, (HL) ; BC = source
      000099 23                    1305 	inc	HL
      00009A 2A                    1306 	ld	A, (HL+)
      00009B 66                    1307 	ld	H, (HL)
      00009C 6F                    1308 	ld	L, A ; HL = dest
      00009D                       1309 	$unshb02:
      00009D 16 08                 1310 	ld D, #8
      00009F 0A                    1311 	ld	A, (BC)
      0000A0 03                    1312 	inc	BC
      0000A1 B7                    1313 	or	A
      0000A2 28 17                 1314 	jr	Z, $unshb10
      0000A4 FE 01                 1315 	cp	#1
      0000A6 28 1B                 1316 	jr	Z, $unshb20
      0000A8 FE 02                 1317 	cp	#2
      0000AA 28 21                 1318 	jr	Z, $unshb30
      0000AC FE 03                 1319 	cp	#3
      0000AE 28 27                 1320 	jr	Z, $unshb40
      0000B0 FE 04                 1321 	cp	#4
      0000B2 28 2C                 1322 	jr	Z, $unshb50
      0000B4 18 03                 1323 	jr	$unshb04
      0000B6                       1324 	$unshb03:
      0000B6 1D                    1325 	dec E
      0000B7 20 E4                 1326 	jr	NZ, $unshb02
      0000B9                       1327 	$unshb04:
      0000B9 C1                    1328 	pop BC
      0000BA C9                    1329 	ret
      0000BB                       1330 	$unshb10:
      0000BB AF                    1331 	xor A
      0000BC                       1332 	$unshb11:
      0000BC 22                    1333 	ld (HL+), A
      0000BD 22                    1334 	ld	(HL+), A
      0000BE 15                    1335 	dec	D
      0000BF 20 FB                 1336 	jr	NZ, $unshb11
      0000C1 18 F3                 1337 	jr	$unshb03
      0000C3                       1338 	$unshb20:
      0000C3 0A                    1339 	ld A, (BC)
      0000C4 22                    1340 	ld	(HL+), A
      0000C5 AF                    1341 	xor	A
      0000C6 22                    1342 	ld	(HL+), A
      0000C7 03                    1343 	inc	BC
      0000C8 15                    1344 	dec	D
      0000C9 20 F8                 1345 	jr	NZ, $unshb20
      0000CB 18 E9                 1346 	jr	$unshb03
      0000CD                       1347 	$unshb30:
      0000CD AF                    1348 	xor A
      0000CE 22                    1349 	ld	(HL+), A
      0000CF 0A                    1350 	ld	A, (BC)
      0000D0 22                    1351 	ld	(HL+), A
      0000D1 03                    1352 	inc	BC
      0000D2 15                    1353 	dec	D
      0000D3 20 F8                 1354 	jr	NZ, $unshb30
      0000D5 18 DF                 1355 	jr	$unshb03
      0000D7                       1356 	$unshb40:
      0000D7 0A                    1357 	ld A, (BC)
      0000D8 22                    1358 	ld	(HL+), A
      0000D9 22                    1359 	ld	(HL+), A
      0000DA 03                    1360 	inc	BC
      0000DB 15                    1361 	dec	D
      0000DC 20 F9                 1362 	jr	NZ, $unshb40
      0000DE 18 D6                 1363 	jr	$unshb03
      0000E0                       1364 	$unshb50:
      0000E0 0A                    1365 	ld A, (BC)
      0000E1 03                    1366 	inc	BC
      0000E2 22                    1367 	ld	(HL+), A
      0000E3 0A                    1368 	ld	A, (BC)
      0000E4 22                    1369 	ld	(HL+), A
      0000E5 03                    1370 	inc	BC
      0000E6 15                    1371 	dec	D
      0000E7 20 F7                 1372 	jr	NZ, $unshb50
      0000E9 18 CB                 1373 	jr	$unshb03
                                   1374 ;src/include/rle_utils.h:228: }
                                   1375 ;src/include/rle_utils.h:231: unsigned char * get_shrinked_tile_offset(UBYTE tilenum, const unsigned char * shrinked_tiles) __naked
                                   1376 ;	---------------------------------
                                   1377 ; Function get_shrinked_tile_offset
                                   1378 ; ---------------------------------
      0000EB                       1379 _get_shrinked_tile_offset::
                                   1380 ;src/include/rle_utils.h:270: __endasm;           
      0000EB F8 04                 1381 	lda	HL, 4(SP)
      0000ED 56                    1382 	ld	D, (HL)
      0000EE 2B                    1383 	dec	HL
      0000EF 5E                    1384 	ld	E, (HL) ; DE = shrinked_tiles
      0000F0 2B                    1385 	dec	HL
      0000F1 7E                    1386 	ld	A, (HL)
      0000F2 B7                    1387 	or	A
      0000F3 C8                    1388 	ret	Z
      0000F4 6F                    1389 	ld	L, A ; L = tilenum
      0000F5                       1390 	$unshc02:
      0000F5 1A                    1391 	ld A, (DE)
      0000F6 13                    1392 	inc	DE
      0000F7 FE 05                 1393 	cp	#5
      0000F9 D0                    1394 	ret	NC
      0000FA B7                    1395 	or	A
      0000FB 28 0E                 1396 	jr	Z, $unshc03
      0000FD FE 04                 1397 	cp	#4
      0000FF 3E 10                 1398 	ld	A, #16
      000101 28 02                 1399 	jr	Z, $unshc04
      000103 3E 08                 1400 	ld	A, #8
      000105                       1401 	$unshc04:
      000105 83                    1402 	add E
      000106 5F                    1403 	ld	E, A
      000107 7A                    1404 	ld	A, D
      000108 CE 00                 1405 	adc	#0
      00010A 57                    1406 	ld	D, A
      00010B                       1407 	$unshc03:
      00010B 2D                    1408 	dec L
      00010C 20 E7                 1409 	jr	NZ, $unshc02
      00010E C9                    1410 	ret
                                   1411 ;src/include/rle_utils.h:271: }
                                   1412 ;src/include/rle_utils.h:275: void rle_decompress_tilemap(UBYTE bkg, UBYTE x, UBYTE y, UBYTE w, UBYTE h, const unsigned char * tiles) __naked
                                   1413 ;	---------------------------------
                                   1414 ; Function rle_decompress_tilemap
                                   1415 ; ---------------------------------
      00010F                       1416 _rle_decompress_tilemap::
                                   1417 ;src/include/rle_utils.h:396: __endasm;
      00010F C5                    1418 	push	BC
      000110 01 00 00              1419 	ld	BC, #0x0000 ; local variables: count, ch
      000113 C5                    1420 	push	BC
      000114 F8 07                 1421 	lda	HL, 7(SP)
      000116 56                    1422 	ld	D, (HL) ; D = x
      000117 23                    1423 	inc	HL
      000118 5E                    1424 	ld	E, (HL) ; E = y
      000119 F8 0C                 1425 	lda	HL, 12(SP)
      00011B 46                    1426 	ld	B, (HL) ; BC = tiles
      00011C 2B                    1427 	dec	HL
      00011D 4E                    1428 	ld	C, (HL)
      00011E 2B                    1429 	dec	HL
      00011F 3A                    1430 	ld	A, (HL-) ; A = h
      000120 66                    1431 	ld	H, (HL) ; H = w
      000121 6F                    1432 	ld	L,A ; L = h
      000122 E5                    1433 	push	HL ; Store WH
      000123 F8 08                 1434 	lda	HL, 8(SP)
      000125 7E                    1435 	ld	A, (HL) ; A = bkg/win destination
      000126 B7                    1436 	or	A
      000127 20 10                 1437 	jr	NZ, $decomp0B
      000129 F0r00                 1438 	ldh	A, (#_LCDC_REG)
      00012B CB 5F                 1439 	bit	3, A
      00012D 20 05                 1440 	jr	NZ, $decomp01
      00012F 21 00 98              1441 	ld	HL, #0x9800 ; HL = origin
      000132 18 0E                 1442 	jr	$decomp02
      000134                       1443 	$decomp01:
      000134 21 00 9C              1444 	ld HL, #0x9C00 ; HL = origin
      000137 18 09                 1445 	jr	$decomp02
      000139                       1446 	$decomp0B:
      000139 F0r00                 1447 	ldh A, (#_LCDC_REG)
      00013B CB 77                 1448 	bit	6, A
      00013D 20 F5                 1449 	jr	NZ, $decomp01
      00013F 21 00 98              1450 	ld	HL, #0x9800 ; HL = origin
      000142                       1451 	$decomp02:
      000142 C5                    1452 	push BC ; Store source
      000143 AF                    1453 	xor	A
      000144 B3                    1454 	or	E
      000145 28 07                 1455 	jr	Z, $decomp03
      000147 01 20 00              1456 	ld	BC, #0x20 ; One line is 20h tiles
      00014A                       1457 	$decomp04:
      00014A 09                    1458 	add HL, BC ; Y coordinate
      00014B 1D                    1459 	dec	E
      00014C 20 FC                 1460 	jr	NZ, $decomp04
      00014E                       1461 	$decomp03:
      00014E 06 00                 1462 	ld B, #0x00 ; X coordinate
      000150 4A                    1463 	ld	C, D
      000151 09                    1464 	add	HL, BC
      000152 C1                    1465 	pop	BC ; BC = source
      000153 D1                    1466 	pop	DE ; DE = WH
      000154 E5                    1467 	push	HL ; Store origin
      000155 D5                    1468 	push	DE ; Store WH
      000156                       1469 	$decomp05:
      000156 E5                    1470 	push HL
      000157 F8 06                 1471 	lda	HL, 6(SP)
      000159 2A                    1472 	ld	A, (HL+)
      00015A B7                    1473 	or	A
      00015B 28 04                 1474 	jr	Z, $decomp07
      00015D 3A                    1475 	ld	A, (HL-)
      00015E 35                    1476 	dec	(HL)
      00015F 18 19                 1477 	jr	$decomp08
      000161                       1478 	$decomp07:
      000161 2B                    1479 	dec HL
      000162 0A                    1480 	ld	A, (BC) ; Copy tile
      000163 FE C0                 1481 	cp	#0xc0
      000165 28 11                 1482 	jr	Z, $decomp09
      000167 E6 C0                 1483 	and	#0xc0
      000169 FE C0                 1484 	cp	#0xc0
      00016B 20 0B                 1485 	jr	NZ, $decomp09
      00016D 0A                    1486 	ld	A, (BC)
      00016E E6 3F                 1487 	and	#0x3f
      000170 3D                    1488 	dec	A
      000171 22                    1489 	ld	(HL+), A
      000172 03                    1490 	inc	BC
      000173 0A                    1491 	ld	A, (BC)
      000174 77                    1492 	ld	(HL), A
      000175 03                    1493 	inc	BC
      000176 18 02                 1494 	jr	$decomp08
      000178                       1495 	$decomp09:
      000178 0A                    1496 	ld A, (BC) ; just single tile
      000179 03                    1497 	inc	BC
      00017A                       1498 	$decomp08:
      00017A E1                    1499 	pop HL
      00017B D5                    1500 	push	DE
      00017C 57                    1501 	ld	D, A
      00017D                       1502 	$decomp0A:
      00017D F0r00                 1503 	ldh A, (#_STAT_REG)
      00017F E6 02                 1504 	and	#0x02
      000181 20 FA                 1505 	jr	NZ, $decomp0A
      000183 72                    1506 	ld	(HL), D
      000184 23                    1507 	inc	HL
      000185 D1                    1508 	pop	DE
      000186 15                    1509 	dec	D
      000187 20 CD                 1510 	jr	NZ,$decomp05
      000189 E1                    1511 	pop	HL ; HL = WH
      00018A 54                    1512 	ld	D,H ; Restore D = W
      00018B E1                    1513 	pop	HL ; HL = origin
      00018C 1D                    1514 	dec	E
      00018D 28 0A                 1515 	jr	Z,$decomp06
      00018F C5                    1516 	push	BC ; Next line
      000190 01 20 00              1517 	ld	BC, #0x20 ; One line is 20h tiles
      000193 09                    1518 	add	HL,BC
      000194 C1                    1519 	pop	BC
      000195 E5                    1520 	push	HL ; Store current origin
      000196 D5                    1521 	push	DE ; Store WH
      000197 18 BD                 1522 	jr	$decomp05
      000199                       1523 	$decomp06:
      000199 C1                    1524 	pop BC ; local variables
      00019A C1                    1525 	pop	BC
      00019B C9                    1526 	ret
                                   1527 ;src/include/rle_utils.h:397: }
                                   1528 ;src/include/rle_utils.h:400: void rle_decompress_data(const unsigned char * data, UWORD size, unsigned char * dest) __naked
                                   1529 ;	---------------------------------
                                   1530 ; Function rle_decompress_data
                                   1531 ; ---------------------------------
      00019C                       1532 _rle_decompress_data::
                                   1533 ;src/include/rle_utils.h:476: __endasm;
      00019C C5                    1534 	push	BC ; 0 bc, 2 ret, 4 data, 6 size, 8 dest, 10 -
      00019D F8 04                 1535 	lda	HL, 4(SP)
      00019F 5E                    1536 	ld	E, (HL)
      0001A0 23                    1537 	inc	HL
      0001A1 56                    1538 	ld	D, (HL)
      0001A2 23                    1539 	inc	HL
      0001A3 4E                    1540 	ld	C, (HL)
      0001A4 23                    1541 	inc	HL
      0001A5 46                    1542 	ld	B, (HL)
      0001A6 23                    1543 	inc	HL
      0001A7 2A                    1544 	ld	A, (HL+)
      0001A8 66                    1545 	ld	H, (HL)
      0001A9 6F                    1546 	ld	L, A
      0001AA                       1547 	$rle03:
      0001AA 1A                    1548 	ld A, (DE)
      0001AB E6 C0                 1549 	and	#0xc0
      0001AD FE C0                 1550 	cp	#0xc0
      0001AF 28 0A                 1551 	jr	Z, $rle04
      0001B1 1A                    1552 	ld	A, (DE)
      0001B2 22                    1553 	ld	(HL+), A
      0001B3 13                    1554 	inc	DE
      0001B4 0B                    1555 	dec	BC
      0001B5 79                    1556 	ld	A, C
      0001B6 B0                    1557 	or	B
      0001B7 20 F1                 1558 	jr	NZ, $rle03
      0001B9 C1                    1559 	pop	BC
      0001BA C9                    1560 	ret
      0001BB                       1561 	$rle04:
      0001BB C5                    1562 	push BC
      0001BC 1A                    1563 	ld	A, (DE)
      0001BD E6 3F                 1564 	and	#0x3f
      0001BF 28 15                 1565 	jr	Z, $rle06
      0001C1 4F                    1566 	ld	C, A
      0001C2 13                    1567 	inc	DE
      0001C3 1A                    1568 	ld	A, (DE)
      0001C4                       1569 	$rle07:
      0001C4 22                    1570 	ld (HL+), A
      0001C5 0D                    1571 	dec	C
      0001C6 20 FC                 1572 	jr	NZ, $rle07
      0001C8 13                    1573 	inc	DE
      0001C9 C1                    1574 	pop	BC
      0001CA 0B                    1575 	dec	BC
      0001CB 79                    1576 	ld	A, C
      0001CC B0                    1577 	or	B
      0001CD 28 05                 1578 	jr	Z, $rle08
      0001CF 0B                    1579 	dec	BC
      0001D0 79                    1580 	ld	A, C
      0001D1 B0                    1581 	or	B
      0001D2 20 D6                 1582 	jr	NZ, $rle03
      0001D4                       1583 	$rle08:
      0001D4 C1                    1584 	pop BC
      0001D5 C9                    1585 	ret
      0001D6                       1586 	$rle06:
      0001D6 C1                    1587 	pop BC
      0001D7 1A                    1588 	ld	A, (DE)
      0001D8 22                    1589 	ld	(HL+), A
      0001D9 13                    1590 	inc	DE
      0001DA 0B                    1591 	dec	BC
      0001DB 79                    1592 	ld	A, C
      0001DC B0                    1593 	or	B
      0001DD 20 CB                 1594 	jr	NZ, $rle03
      0001DF C1                    1595 	pop	BC
      0001E0 C9                    1596 	ret
                                   1597 ;src/include/rle_utils.h:477: }
                                   1598 ;src/include/rle_utils.h:480: void put_map_to_buf(UBYTE x, UBYTE y, UBYTE w, UBYTE h, const unsigned char * source, unsigned char * buf, UBYTE buf_w, UBYTE buf_h) __naked
                                   1599 ;	---------------------------------
                                   1600 ; Function put_map_to_buf
                                   1601 ; ---------------------------------
      0001E1                       1602 _put_map_to_buf::
                                   1603 ;src/include/rle_utils.h:611: __endasm;
      0001E1 C5                    1604 	push	BC ; ret, bc, x, y, w, h, source, buf, buf_w, buf_h
      0001E2 F8 04                 1605 	lda	HL, 4(SP)
      0001E4 56                    1606 	ld	D, (HL) ; D = x
      0001E5 23                    1607 	inc	HL
      0001E6 5E                    1608 	ld	E, (HL) ; E = y
      0001E7 F8 09                 1609 	lda	HL, 9(SP)
      0001E9 46                    1610 	ld	B, (HL) ; BC = source
      0001EA 2B                    1611 	dec	HL
      0001EB 4E                    1612 	ld	C, (HL)
      0001EC 2B                    1613 	dec	HL
      0001ED 3A                    1614 	ld	A, (HL-) ; A = h
      0001EE 66                    1615 	ld	H, (HL) ; H = w
      0001EF 6F                    1616 	ld	L, A ; L = h
      0001F0 7C                    1617 	ld	A, H ; check x bound
      0001F1 82                    1618 	add	D
      0001F2 E5                    1619 	push	HL
      0001F3 F8 0E                 1620 	lda	HL, 14(SP) ; &buf_w
      0001F5 BE                    1621 	cp	(HL) ; buf_w
      0001F6 38 0B                 1622 	jr	C, $putitm08
      0001F8 7A                    1623 	ld	A, D
      0001F9 BE                    1624 	cp	(HL) ; buf_w
      0001FA D2r5Er02              1625 	jp	NC, $putitm09
      0001FD 7E                    1626 	ld	A, (HL) ; buf_w
      0001FE 92                    1627 	sub	D
      0001FF E1                    1628 	pop	HL
      000200 67                    1629 	ld	H, A
      000201 18 01                 1630 	jr	$putitm01
      000203                       1631 	$putitm08:
      000203 E1                    1632 	pop HL
      000204                       1633 	$putitm01:
      000204 7D                    1634 	ld A, L ; check y bound
      000205 83                    1635 	add	E
      000206 E5                    1636 	push	HL
      000207 F8 0F                 1637 	lda	HL, 15(SP) ; &buf_h
      000209 BE                    1638 	cp	(HL) ; buf_h
      00020A 38 0B                 1639 	jr	C, $putitm0A
      00020C 7B                    1640 	ld	A, E
      00020D BE                    1641 	cp	(HL) ; buf_h
      00020E D2r5Er02              1642 	jp	NC, $putitm09
      000211 7E                    1643 	ld	A, (HL) ; buf_h
      000212 93                    1644 	sub	E
      000213 E1                    1645 	pop	HL
      000214 6F                    1646 	ld	L, A
      000215 18 01                 1647 	jr	$putitm07
      000217                       1648 	$putitm0A:
      000217 E1                    1649 	pop HL
      000218                       1650 	$putitm07:
      000218 E5                    1651 	push HL ; Store WH
      000219 F8 0C                 1652 	lda	HL, 12(SP) ; HL = origin
      00021B 2A                    1653 	ld	A, (HL+)
      00021C 66                    1654 	ld	H, (HL)
      00021D 6F                    1655 	ld	L, A
      00021E                       1656 	$putitm02:
      00021E C5                    1657 	push BC ; Store source
      00021F AF                    1658 	xor	A
      000220 B3                    1659 	or	E
      000221 28 0B                 1660 	jr	Z, $putitm03
      000223 E5                    1661 	push	HL
      000224 F8 12                 1662 	lda	HL, 18(SP) ; &buf_w
      000226 06 00                 1663 	ld	B, #0
      000228 4E                    1664 	ld	C, (HL) ; buf_w
      000229 E1                    1665 	pop	HL
      00022A                       1666 	$putitm04:
      00022A 09                    1667 	add HL, BC ; Y coordinate
      00022B 1D                    1668 	dec	E
      00022C 20 FC                 1669 	jr	NZ, $putitm04
      00022E                       1670 	$putitm03:
      00022E 06 00                 1671 	ld B, #0x00 ; X coordinate
      000230 4A                    1672 	ld	C, D
      000231 09                    1673 	add	HL, BC
      000232 C1                    1674 	pop	BC ; BC = source
      000233 D1                    1675 	pop	DE ; DE = WH
      000234 E5                    1676 	push	HL ; Store origin
      000235 D5                    1677 	push	DE ; Store WH
      000236 C5                    1678 	push	BC
      000237                       1679 	$putitm05:
      000237 0A                    1680 	ld A, (BC) ; just single tile
      000238 22                    1681 	ld	(HL+), A
      000239 03                    1682 	inc	BC
      00023A 15                    1683 	dec	D
      00023B 20 FA                 1684 	jr	NZ,$putitm05
      00023D C1                    1685 	pop	BC
      00023E E1                    1686 	pop	HL ; HL = WH
      00023F 54                    1687 	ld	D,H ; Restore D = W
      000240 E1                    1688 	pop	HL ; HL = origin
      000241 1D                    1689 	dec	E
      000242 28 1B                 1690 	jr	Z,$putitm06
      000244 E5                    1691 	push	HL ; Next line
      000245 F8 0E                 1692 	lda	HL, 14(SP)
      000247 7E                    1693 	ld	A, (HL) ; buf_w
      000248 E1                    1694 	pop	HL
      000249 85                    1695 	add	L
      00024A 6F                    1696 	ld	L, A
      00024B 7C                    1697 	ld	A, H
      00024C CE 00                 1698 	adc	#0
      00024E 67                    1699 	ld	H, A
      00024F E5                    1700 	push	HL
      000250 F8 08                 1701 	lda	HL, 8(SP)
      000252 6E                    1702 	ld	L, (HL)
      000253 26 00                 1703 	ld	H, #0
      000255 09                    1704 	add	HL, BC
      000256 44                    1705 	ld	B, H
      000257 4D                    1706 	ld	C, L
      000258 E1                    1707 	pop	HL
      000259 E5                    1708 	push	HL ; Store current origin
      00025A D5                    1709 	push	DE ; Store WH
      00025B C5                    1710 	push	BC
      00025C 18 D9                 1711 	jr	$putitm05
      00025E                       1712 	$putitm09:
      00025E E1                    1713 	pop HL
      00025F                       1714 	$putitm06:
      00025F C1                    1715 	pop BC
      000260 C9                    1716 	ret
                                   1717 ;src/include/rle_utils.h:612: }
                                   1718 ;src/include/rle_utils.h:615: void get_map_from_buf(UBYTE x, UBYTE y, UBYTE w, UBYTE h, unsigned char * dest, unsigned char * buf, UBYTE buf_w, UBYTE buf_h) __naked
                                   1719 ;	---------------------------------
                                   1720 ; Function get_map_from_buf
                                   1721 ; ---------------------------------
      000261                       1722 _get_map_from_buf::
                                   1723 ;src/include/rle_utils.h:746: __endasm;
      000261 C5                    1724 	push	BC ; ret, bc, x, y, w, h, dest, buf, buf_w, buf_h
      000262 F8 04                 1725 	lda	HL, 4(SP)
      000264 56                    1726 	ld	D, (HL) ; D = x
      000265 23                    1727 	inc	HL
      000266 5E                    1728 	ld	E, (HL) ; E = y
      000267 F8 09                 1729 	lda	HL, 9(SP)
      000269 46                    1730 	ld	B, (HL) ; BC = dest
      00026A 2B                    1731 	dec	HL
      00026B 4E                    1732 	ld	C, (HL)
      00026C 2B                    1733 	dec	HL
      00026D 3A                    1734 	ld	A, (HL-) ; A = h
      00026E 66                    1735 	ld	H, (HL) ; H = w
      00026F 6F                    1736 	ld	L, A ; L = h
      000270 7C                    1737 	ld	A, H ; check x bound
      000271 82                    1738 	add	D
      000272 E5                    1739 	push	HL
      000273 F8 0E                 1740 	lda	HL, 14(SP) ; &buf_w
      000275 BE                    1741 	cp	(HL) ; buf_w
      000276 38 0B                 1742 	jr	C, $getitm08
      000278 7A                    1743 	ld	A, D
      000279 BE                    1744 	cp	(HL) ; buf_w
      00027A D2rDEr02              1745 	jp	NC, $getitm09
      00027D 7E                    1746 	ld	A, (HL) ; buf_w
      00027E 92                    1747 	sub	D
      00027F E1                    1748 	pop	HL
      000280 67                    1749 	ld	H, A
      000281 18 01                 1750 	jr	$getitm01
      000283                       1751 	$getitm08:
      000283 E1                    1752 	pop HL
      000284                       1753 	$getitm01:
      000284 7D                    1754 	ld A, L ; check y bound
      000285 83                    1755 	add	E
      000286 E5                    1756 	push	HL
      000287 F8 0F                 1757 	lda	HL, 15(SP) ; &buf_h
      000289 BE                    1758 	cp	(HL) ; buf_h
      00028A 38 0B                 1759 	jr	C, $getitm0A
      00028C 7B                    1760 	ld	A, E
      00028D BE                    1761 	cp	(HL) ; buf_h
      00028E D2rDEr02              1762 	jp	NC, $getitm09
      000291 7E                    1763 	ld	A, (HL) ; buf_h
      000292 93                    1764 	sub	E
      000293 E1                    1765 	pop	HL
      000294 6F                    1766 	ld	L, A
      000295 18 01                 1767 	jr	$getitm07
      000297                       1768 	$getitm0A:
      000297 E1                    1769 	pop HL
      000298                       1770 	$getitm07:
      000298 E5                    1771 	push HL ; Store WH
      000299 F8 0C                 1772 	lda	HL, 12(SP) ; HL = origin
      00029B 2A                    1773 	ld	A, (HL+)
      00029C 66                    1774 	ld	H, (HL)
      00029D 6F                    1775 	ld	L, A
      00029E                       1776 	$getitm02:
      00029E C5                    1777 	push BC ; Store dest
      00029F AF                    1778 	xor	A
      0002A0 B3                    1779 	or	E
      0002A1 28 0B                 1780 	jr	Z, $getitm03
      0002A3 E5                    1781 	push	HL
      0002A4 F8 12                 1782 	lda	HL, 18(SP) ; &buf_w
      0002A6 06 00                 1783 	ld	B, #0
      0002A8 4E                    1784 	ld	C, (HL) ; buf_w
      0002A9 E1                    1785 	pop	HL
      0002AA                       1786 	$getitm04:
      0002AA 09                    1787 	add HL, BC ; Y coordinate
      0002AB 1D                    1788 	dec	E
      0002AC 20 FC                 1789 	jr	NZ, $getitm04
      0002AE                       1790 	$getitm03:
      0002AE 06 00                 1791 	ld B, #0x00 ; X coordinate
      0002B0 4A                    1792 	ld	C, D
      0002B1 09                    1793 	add	HL, BC
      0002B2 C1                    1794 	pop	BC ; BC = dest
      0002B3 D1                    1795 	pop	DE ; DE = WH
      0002B4 E5                    1796 	push	HL ; Store origin
      0002B5 D5                    1797 	push	DE ; Store WH
      0002B6 C5                    1798 	push	BC
      0002B7                       1799 	$getitm05:
      0002B7 2A                    1800 	ld A, (HL+)
      0002B8 02                    1801 	ld	(BC), A ; just single tile
      0002B9 03                    1802 	inc	BC
      0002BA 15                    1803 	dec	D
      0002BB 20 FA                 1804 	jr	NZ,$getitm05
      0002BD C1                    1805 	pop	BC
      0002BE E1                    1806 	pop	HL ; HL = WH
      0002BF 54                    1807 	ld	D,H ; Restore D = W
      0002C0 E1                    1808 	pop	HL ; HL = origin
      0002C1 1D                    1809 	dec	E
      0002C2 28 1B                 1810 	jr	Z,$getitm06
      0002C4 E5                    1811 	push	HL ; Next line
      0002C5 F8 0E                 1812 	lda	HL, 14(SP)
      0002C7 7E                    1813 	ld	A, (HL) ; buf_w
      0002C8 E1                    1814 	pop	HL
      0002C9 85                    1815 	add	L
      0002CA 6F                    1816 	ld	L, A
      0002CB 7C                    1817 	ld	A, H
      0002CC CE 00                 1818 	adc	#0
      0002CE 67                    1819 	ld	H, A
      0002CF E5                    1820 	push	HL
      0002D0 F8 08                 1821 	lda	HL, 8(SP)
      0002D2 6E                    1822 	ld	L, (HL)
      0002D3 26 00                 1823 	ld	H, #0
      0002D5 09                    1824 	add	HL, BC
      0002D6 44                    1825 	ld	B, H
      0002D7 4D                    1826 	ld	C, L
      0002D8 E1                    1827 	pop	HL
      0002D9 E5                    1828 	push	HL ; Store current origin
      0002DA D5                    1829 	push	DE ; Store WH
      0002DB C5                    1830 	push	BC
      0002DC 18 D9                 1831 	jr	$getitm05
      0002DE                       1832 	$getitm09:
      0002DE E1                    1833 	pop HL
      0002DF                       1834 	$getitm06:
      0002DF C1                    1835 	pop BC
      0002E0 C9                    1836 	ret
                                   1837 ;src/include/rle_utils.h:747: }
                                   1838 ;src/include/sprite_utils.h:1: void multiple_clear_sprite_tiledata(UBYTE start, UBYTE count) __naked
                                   1839 ;	---------------------------------
                                   1840 ; Function multiple_clear_sprite_tiledata
                                   1841 ; ---------------------------------
      0002E1                       1842 _multiple_clear_sprite_tiledata::
                                   1843 ;src/include/sprite_utils.h:45: __endasm;
      0002E1 F8 02                 1844 	lda	HL, 2(SP)
      0002E3 5E                    1845 	ld	E, (HL) ; E = start
      0002E4 23                    1846 	inc	HL
      0002E5 56                    1847 	ld	D, (HL) ; D = count
      0002E6 26 00                 1848 	ld	H, #0x00 ; HL = nb_tiles
      0002E8 6B                    1849 	ld	L, E
      0002E9 29                    1850 	add	HL, HL ; HL *= 16
      0002EA 29                    1851 	add	HL, HL
      0002EB 29                    1852 	add	HL, HL
      0002EC 29                    1853 	add	HL, HL
      0002ED C5                    1854 	push	BC
      0002EE 01 00 80              1855 	ld	BC, #0x8000
      0002F1 09                    1856 	add	HL, BC
      0002F2 C1                    1857 	pop	BC
      0002F3 E5                    1858 	push	HL
      0002F4 6A                    1859 	ld	L, D
      0002F5 26 00                 1860 	ld	H, #0
      0002F7 29                    1861 	add	HL, HL ; HL *= 16
      0002F8 29                    1862 	add	HL, HL
      0002F9 29                    1863 	add	HL, HL
      0002FA 29                    1864 	add	HL, HL
      0002FB 54                    1865 	ld	D, H
      0002FC 5D                    1866 	ld	E, L ; DE = D * 16
      0002FD E1                    1867 	pop	HL
      0002FE                       1868 	$clrspt01:
      0002FE F0r00                 1869 	ldh A, (#_STAT_REG)
      000300 E6 02                 1870 	and	#0x02
      000302 20 FA                 1871 	jr	NZ, $clrspt01
      000304 AF                    1872 	xor	A
      000305 22                    1873 	ld	(HL+), A
      000306 1B                    1874 	dec	DE
      000307 7A                    1875 	ld	A, D
      000308 B3                    1876 	or	E
      000309 20 F3                 1877 	jr	NZ, $clrspt01
      00030B C9                    1878 	ret
                                   1879 ;src/include/sprite_utils.h:46: }
                                   1880 ;src/include/sprite_utils.h:48: void multiple_set_sprite_prop(UBYTE start, UBYTE count, UBYTE prop) __naked
                                   1881 ;	---------------------------------
                                   1882 ; Function multiple_set_sprite_prop
                                   1883 ; ---------------------------------
      00030C                       1884 _multiple_set_sprite_prop::
                                   1885 ;src/include/sprite_utils.h:77: __endasm;
      00030C C5                    1886 	push	BC
      00030D F8 04                 1887 	lda	HL, 4(SP)
      00030F 4E                    1888 	ld	C, (HL) ; C = start
      000310 23                    1889 	inc	HL
      000311 5E                    1890 	ld	E, (HL) ; E = count
      000312 23                    1891 	inc	HL
      000313 56                    1892 	ld	D, (HL) ; D = prop
      000314 06 00                 1893 	ld	B, #0x00
      000316 CB 21                 1894 	sla	C ; Multiply C by 4
      000318 CB 21                 1895 	sla	C
      00031A 21 03 C0              1896 	ld	HL, #0xC000 + 3
      00031D 09                    1897 	add	HL, BC
      00031E 0E 04                 1898 	ld	C, #0x04
      000320 7A                    1899 	ld	A, D ; Set sprite properties
      000321                       1900 	$setspp01:
      000321 77                    1901 	ld (HL), A
      000322 09                    1902 	add	HL, BC
      000323 1D                    1903 	dec	E
      000324 20 FB                 1904 	jr	NZ, $setspp01
      000326 C1                    1905 	pop	BC
      000327 C9                    1906 	ret
                                   1907 ;src/include/sprite_utils.h:78: }
                                   1908 ;src/include/sprite_utils.h:80: void multiple_set_sprite_tiles(UBYTE start, UBYTE count, const unsigned char * tiles) __naked
                                   1909 ;	---------------------------------
                                   1910 ; Function multiple_set_sprite_tiles
                                   1911 ; ---------------------------------
      000328                       1912 _multiple_set_sprite_tiles::
                                   1913 ;src/include/sprite_utils.h:119: __endasm;
      000328 C5                    1914 	push	BC
      000329 F8 04                 1915 	lda	HL, 4(SP)
      00032B 4E                    1916 	ld	C, (HL) ; C = start
      00032C 23                    1917 	inc	HL
      00032D 5E                    1918 	ld	E, (HL) ; E = count
      00032E 23                    1919 	inc	HL
      00032F 2A                    1920 	ld	A, (HL+)
      000330 66                    1921 	ld	H, (HL)
      000331 6F                    1922 	ld	L, A
      000332 E5                    1923 	push	HL ; HL = tiles
      000333 06 00                 1924 	ld	B, #0x00
      000335 CB 21                 1925 	sla	C ; Multiply C by 4
      000337 CB 21                 1926 	sla	C
      000339 21 02 C0              1927 	ld	HL, #0xC000 + 2
      00033C 09                    1928 	add	HL, BC
      00033D 0E 04                 1929 	ld	C, #0x04
      00033F 7B                    1930 	ld	A, E ; E --> A = count
      000340 D1                    1931 	pop	DE ; HL --> DE = tiles
      000341                       1932 	$setspt01:
      000341 F5                    1933 	push AF
      000342 1A                    1934 	ld	A, (DE)
      000343 13                    1935 	inc	DE
      000344 77                    1936 	ld	(HL), A
      000345 09                    1937 	add	HL, BC
      000346 F1                    1938 	pop	AF
      000347 3D                    1939 	dec	A
      000348 20 F7                 1940 	jr	NZ, $setspt01
      00034A C1                    1941 	pop	BC
      00034B C9                    1942 	ret
                                   1943 ;src/include/sprite_utils.h:120: }
                                   1944 ;src/include/sprite_utils.h:122: void multiple_move_sprites(UBYTE start, UBYTE count, UBYTE x, UBYTE y, const unsigned char * offsets) __naked
                                   1945 ;	---------------------------------
                                   1946 ; Function multiple_move_sprites
                                   1947 ; ---------------------------------
      00034C                       1948 _multiple_move_sprites::
                                   1949 ;src/include/sprite_utils.h:176: __endasm;
      00034C C5                    1950 	push	BC
      00034D F8 04                 1951 	lda	HL, 4(SP)
      00034F 4E                    1952 	ld	C, (HL) ; C = start
      000350 23                    1953 	inc	HL
      000351 7E                    1954 	ld	A, (HL) ; A = count
      000352 06 00                 1955 	ld	B, #0x00
      000354 CB 21                 1956 	sla	C ; Multiply C by 4
      000356 CB 21                 1957 	sla	C
      000358 21 00 C0              1958 	ld	HL, #0xC000
      00035B 09                    1959 	add	HL, BC
      00035C E5                    1960 	push	HL
      00035D F8 0B                 1961 	lda	HL, 11(SP)
      00035F 46                    1962 	ld	B, (HL)
      000360 2B                    1963 	dec	HL
      000361 4E                    1964 	ld	C, (HL) ; BC = offsets
      000362 2B                    1965 	dec	HL
      000363 56                    1966 	ld	D, (HL) ; D = y
      000364 2B                    1967 	dec	HL
      000365 5E                    1968 	ld	E, (HL) ; E = x
      000366 E1                    1969 	pop	HL
      000367                       1970 	$mmspr02:
      000367 F5                    1971 	push AF
      000368 0A                    1972 	ld	A, (BC)
      000369 03                    1973 	inc	BC
      00036A 82                    1974 	add	D
      00036B 77                    1975 	ld	(HL), A
      00036C 0A                    1976 	ld	A, (BC)
      00036D 03                    1977 	inc	BC
      00036E C5                    1978 	push	BC
      00036F 01 01 00              1979 	ld	BC, #1
      000372 09                    1980 	add	HL, BC ; use add instruction to avoid oam bug
      000373 83                    1981 	add	E
      000374 77                    1982 	ld	(HL), A
      000375 0E 03                 1983 	ld	C, #3
      000377 09                    1984 	add	HL, BC ; use add instruction to avoid oam bug
      000378 C1                    1985 	pop	BC
      000379 F1                    1986 	pop	AF
      00037A 3D                    1987 	dec	A
      00037B 20 EA                 1988 	jr	NZ, $mmspr02
      00037D C1                    1989 	pop	BC
      00037E C9                    1990 	ret
                                   1991 ;src/include/sprite_utils.h:177: }
                                   1992 ;src/include/sprite_utils.h:179: void multiple_move_sprites_limits(UBYTE start, UBYTE count, UBYTE x, UBYTE y, const unsigned char * offsets, UBYTE dx, UBYTE dy) __naked
                                   1993 ;	---------------------------------
                                   1994 ; Function multiple_move_sprites_limits
                                   1995 ; ---------------------------------
      00037F                       1996 _multiple_move_sprites_limits::
                                   1997 ;src/include/sprite_utils.h:281: __endasm;
      00037F C5                    1998 	push	BC
      000380 F8 04                 1999 	lda	HL, 4(SP)
      000382 4E                    2000 	ld	C, (HL) ; C = start
      000383 23                    2001 	inc	HL
      000384 7E                    2002 	ld	A, (HL) ; A = count
      000385 06 00                 2003 	ld	B, #0x00
      000387 CB 21                 2004 	sla	C ; Multiply C by 4
      000389 CB 21                 2005 	sla	C
      00038B 21 00 C0              2006 	ld	HL, #0xC000
      00038E 09                    2007 	add	HL, BC
      00038F E5                    2008 	push	HL
      000390 F8 0B                 2009 	lda	HL, 11(SP)
      000392 46                    2010 	ld	B, (HL)
      000393 2B                    2011 	dec	HL
      000394 4E                    2012 	ld	C, (HL) ; BC = offsets
      000395 2B                    2013 	dec	HL
      000396 56                    2014 	ld	D, (HL) ; D = y
      000397 2B                    2015 	dec	HL
      000398 5E                    2016 	ld	E, (HL) ; E = x
      000399 E1                    2017 	pop	HL
      00039A                       2018 	$mmsprd02:
      00039A F5                    2019 	push AF
      00039B 0A                    2020 	ld	A, (BC) ; Y coordinate
      00039C 03                    2021 	inc	BC
      00039D 82                    2022 	add	D
      00039E E5                    2023 	push	HL
      00039F 60                    2024 	ld	H, B
      0003A0 69                    2025 	ld	L, C
      0003A1 BE                    2026 	cp	(HL)
      0003A2 30 03                 2027 	jr	NC, $mmsprd03
      0003A4 AF                    2028 	xor	A
      0003A5 18 07                 2029 	jr	$mmsprd04
      0003A7                       2030 	$mmsprd03:
      0003A7 23                    2031 	inc HL
      0003A8 BE                    2032 	cp	(HL)
      0003A9 38 03                 2033 	jr	C, $mmsprd04
      0003AB 28 01                 2034 	jr	Z, $mmsprd04
      0003AD AF                    2035 	xor	A
      0003AE                       2036 	$mmsprd04:
      0003AE B7                    2037 	or A
      0003AF 28 03                 2038 	jr	Z, $mmsprd07
      0003B1 F8 0F                 2039 	lda	HL, 15(SP)
      0003B3 86                    2040 	add	(HL)
      0003B4                       2041 	$mmsprd07:
      0003B4 E1                    2042 	pop HL
      0003B5 03                    2043 	inc	BC
      0003B6 03                    2044 	inc	BC
      0003B7 77                    2045 	ld	(HL), A
      0003B8 C5                    2046 	push	BC
      0003B9 01 01 00              2047 	ld	BC, #1
      0003BC 09                    2048 	add	HL, BC ; use add instruction to avoid oam bug
      0003BD C1                    2049 	pop	BC
      0003BE 0A                    2050 	ld	A, (BC) ; X coordinate
      0003BF 03                    2051 	inc	BC
      0003C0 83                    2052 	add	E
      0003C1 E5                    2053 	push	HL
      0003C2 60                    2054 	ld	H, B
      0003C3 69                    2055 	ld	L, C
      0003C4 BE                    2056 	cp	(HL)
      0003C5 30 03                 2057 	jr	NC, $mmsprd05
      0003C7 AF                    2058 	xor	A
      0003C8 18 07                 2059 	jr	$mmsprd06
      0003CA                       2060 	$mmsprd05:
      0003CA 23                    2061 	inc HL
      0003CB BE                    2062 	cp	(HL)
      0003CC 38 03                 2063 	jr	C, $mmsprd06
      0003CE 28 01                 2064 	jr	Z, $mmsprd06
      0003D0 AF                    2065 	xor	A
      0003D1                       2066 	$mmsprd06:
      0003D1 B7                    2067 	or A
      0003D2 28 03                 2068 	jr	Z, $mmsprd08
      0003D4 F8 0E                 2069 	lda	HL, 14(SP)
      0003D6 86                    2070 	add	(HL)
      0003D7                       2071 	$mmsprd08:
      0003D7 E1                    2072 	pop HL
      0003D8 03                    2073 	inc	BC
      0003D9 03                    2074 	inc	BC
      0003DA 77                    2075 	ld	(HL), A
      0003DB C5                    2076 	push	BC
      0003DC 01 03 00              2077 	ld	BC, #3
      0003DF 09                    2078 	add	HL, BC ; use add instruction to avoid oam bug
      0003E0 C1                    2079 	pop	BC
      0003E1 F1                    2080 	pop	AF
      0003E2 3D                    2081 	dec	A
      0003E3 20 B5                 2082 	jr	NZ, $mmsprd02
      0003E5 C1                    2083 	pop	BC
      0003E6 C9                    2084 	ret
                                   2085 ;src/include/sprite_utils.h:282: }
                                   2086 ;src/include/energy.h:26: void unshrink_and_mask(UBYTE npix, const unsigned char * source, unsigned char * dest) {
                                   2087 ;	---------------------------------
                                   2088 ; Function unshrink_and_mask
                                   2089 ; ---------------------------------
      0003E7                       2090 _unshrink_and_mask::
      0003E7 3B                    2091 	dec	sp
      0003E8 3B                    2092 	dec	sp
                                   2093 ;src/include/energy.h:27: UBYTE mask = (0xFF << (8 - npix));
      0003E9 F8 04                 2094 	ldhl	sp,	#4
      0003EB 4E                    2095 	ld	c, (hl)
      0003EC 3E 08                 2096 	ld	a, #0x08
      0003EE 91                    2097 	sub	a, c
      0003EF 4F                    2098 	ld	c, a
      0003F0 F8 00                 2099 	ldhl	sp,	#0
      0003F2 36 FF                 2100 	ld	(hl), #0xff
      0003F4 0C                    2101 	inc	c
      0003F5 18 04                 2102 	jr	00119$
      0003F7                       2103 00118$:
      0003F7 F8 00                 2104 	ldhl	sp,	#0
      0003F9 CB 26                 2105 	sla	(hl)
      0003FB                       2106 00119$:
      0003FB 0D                    2107 	dec	c
      0003FC 20 F9                 2108 	jr	NZ,00118$
                                   2109 ;src/include/energy.h:28: source++;
      0003FE F8 05                 2110 	ldhl	sp,	#5
      000400 34                    2111 	inc	(hl)
      000401 20 02                 2112 	jr	NZ, 00120$
      000403 23                    2113 	inc	hl
      000404 34                    2114 	inc	(hl)
      000405                       2115 00120$:
                                   2116 ;src/include/energy.h:29: for (UBYTE i = 0; i < 8; i++) {
      000405 F8 05                 2117 	ldhl	sp,	#5
      000407 2A                    2118 	ld	a, (hl+)
      000408 4F                    2119 	ld	c, a
      000409 46                    2120 	ld	b, (hl)
      00040A F8 01                 2121 	ldhl	sp,	#1
      00040C 36 00                 2122 	ld	(hl), #0x00
      00040E                       2123 00103$:
      00040E F8 01                 2124 	ldhl	sp,	#1
      000410 7E                    2125 	ld	a, (hl)
      000411 D6 08                 2126 	sub	a, #0x08
      000413 30 21                 2127 	jr	NC, 00105$
                                   2128 ;src/include/energy.h:30: *dest = ((*source) & mask); dest++;
      000415 F8 07                 2129 	ldhl	sp,	#7
      000417 2A                    2130 	ld	a, (hl+)
      000418 5F                    2131 	ld	e, a
      000419 56                    2132 	ld	d, (hl)
      00041A 0A                    2133 	ld	a, (bc)
      00041B F8 00                 2134 	ldhl	sp,	#0
      00041D A6                    2135 	and	a, (hl)
      00041E 12                    2136 	ld	(de), a
      00041F 13                    2137 	inc	de
      000420 F8 07                 2138 	ldhl	sp,	#7
      000422 7B                    2139 	ld	a, e
      000423 22                    2140 	ld	(hl+), a
                                   2141 ;src/include/energy.h:31: *dest = 0x00; dest++;
      000424 7A                    2142 	ld	a, d
      000425 32                    2143 	ld	(hl-), a
      000426 2A                    2144 	ld	a, (hl+)
      000427 5F                    2145 	ld	e, a
      000428 3A                    2146 	ld	a, (hl-)
      000429 57                    2147 	ld	d, a
      00042A AF                    2148 	xor	a, a
      00042B 12                    2149 	ld	(de), a
      00042C 13                    2150 	inc	de
      00042D 7B                    2151 	ld	a, e
      00042E 22                    2152 	ld	(hl+), a
      00042F 72                    2153 	ld	(hl), d
                                   2154 ;src/include/energy.h:32: source++;  
      000430 03                    2155 	inc	bc
                                   2156 ;src/include/energy.h:29: for (UBYTE i = 0; i < 8; i++) {
      000431 F8 01                 2157 	ldhl	sp,	#1
      000433 34                    2158 	inc	(hl)
      000434 18 D8                 2159 	jr	00103$
      000436                       2160 00105$:
                                   2161 ;src/include/energy.h:34: }
      000436 33                    2162 	inc	sp
      000437 33                    2163 	inc	sp
      000438 C9                    2164 	ret
      000439                       2165 _dizzy_offsets:
      000439 26                    2166 	.db #0x26	; 38
      00043A 04                    2167 	.db #0x04	; 4
      00043B 2E                    2168 	.db #0x2e	; 46
      00043C 04                    2169 	.db #0x04	; 4
      00043D 26                    2170 	.db #0x26	; 38
      00043E 0C                    2171 	.db #0x0c	; 12
      00043F 2E                    2172 	.db #0x2e	; 46
      000440 0C                    2173 	.db #0x0c	; 12
      000441 26                    2174 	.db #0x26	; 38
      000442 14                    2175 	.db #0x14	; 20
      000443 2E                    2176 	.db #0x2e	; 46
      000444 14                    2177 	.db #0x14	; 20
      000445 36                    2178 	.db #0x36	; 54	'6'
      000446 04                    2179 	.db #0x04	; 4
      000447 36                    2180 	.db #0x36	; 54	'6'
      000448 0C                    2181 	.db #0x0c	; 12
      000449 36                    2182 	.db #0x36	; 54	'6'
      00044A 14                    2183 	.db #0x14	; 20
      00044B                       2184 _stand_ani:
      00044B 02                    2185 	.db #0x02	; 2
      00044C 00                    2186 	.db #0x00	; 0
      00044D FF                    2187 	.db #0xff	; 255
      00044E 00                    2188 	.db #0x00	; 0
      00044F 00                    2189 	.db #0x00	; 0
      000450r00r00                 2190 	.dw _m_stand_0
      000452r00r00                 2191 	.dw _m_stand_1
      000454                       2192 _up_ani:
      000454 10                    2193 	.db #0x10	; 16
      000455 00                    2194 	.db #0x00	; 0
      000456 00                    2195 	.db #0x00	; 0
      000457 00                    2196 	.db #0x00	; 0
      000458 01                    2197 	.db #0x01	; 1
      000459r00r00                 2198 	.dw _m_stand_0
      00045Br00r00                 2199 	.dw _m_up_0
      00045Dr00r00                 2200 	.dw _m_up_1
      00045Fr00r00                 2201 	.dw _m_up_2
      000461r00r00                 2202 	.dw _m_up_3
      000463r00r00                 2203 	.dw _m_up_4
      000465r00r00                 2204 	.dw _m_up_5
      000467r00r00                 2205 	.dw _m_up_6
      000469r00r00                 2206 	.dw _m_stand_0
      00046Br00r00                 2207 	.dw _m_up_0
      00046Dr00r00                 2208 	.dw _m_up_1
      00046Fr00r00                 2209 	.dw _m_up_2
      000471r00r00                 2210 	.dw _m_up_3
      000473r00r00                 2211 	.dw _m_up_4
      000475r00r00                 2212 	.dw _m_up_5
      000477r00r00                 2213 	.dw _m_up_6
      000479                       2214 _walk_r_ani:
      000479 08                    2215 	.db #0x08	; 8
      00047A 00                    2216 	.db #0x00	; 0
      00047B FF                    2217 	.db #0xff	; 255
      00047C 00                    2218 	.db #0x00	; 0
      00047D 04                    2219 	.db #0x04	; 4
      00047Er00r00                 2220 	.dw _m_walk_r_0
      000480r00r00                 2221 	.dw _m_walk_r_1
      000482r00r00                 2222 	.dw _m_walk_r_2
      000484r00r00                 2223 	.dw _m_walk_r_1
      000486r00r00                 2224 	.dw _m_walk_r_0
      000488r00r00                 2225 	.dw _m_walk_r_3
      00048Ar00r00                 2226 	.dw _m_walk_r_2
      00048Cr00r00                 2227 	.dw _m_walk_r_3
      00048E                       2228 _walk_l_ani:
      00048E 08                    2229 	.db #0x08	; 8
      00048F 00                    2230 	.db #0x00	; 0
      000490 FF                    2231 	.db #0xff	; 255
      000491 00                    2232 	.db #0x00	; 0
      000492 05                    2233 	.db #0x05	; 5
      000493r00r00                 2234 	.dw _m_walk_l_0
      000495r00r00                 2235 	.dw _m_walk_l_1
      000497r00r00                 2236 	.dw _m_walk_l_2
      000499r00r00                 2237 	.dw _m_walk_l_1
      00049Br00r00                 2238 	.dw _m_walk_l_0
      00049Dr00r00                 2239 	.dw _m_walk_l_3
      00049Fr00r00                 2240 	.dw _m_walk_l_2
      0004A1r00r00                 2241 	.dw _m_walk_l_3
      0004A3                       2242 _roll_r_ani:
      0004A3 08                    2243 	.db #0x08	; 8
      0004A4 00                    2244 	.db #0x00	; 0
      0004A5 FE                    2245 	.db #0xfe	; 254
      0004A6 02                    2246 	.db #0x02	; 2
      0004A7 04                    2247 	.db #0x04	; 4
      0004A8r00r00                 2248 	.dw _m_walk_r_0
      0004AAr00r00                 2249 	.dw _m_roll_r_0
      0004ACr00r00                 2250 	.dw _m_roll_r_1
      0004AEr00r00                 2251 	.dw _m_roll_r_2
      0004B0r00r00                 2252 	.dw _m_roll_r_3
      0004B2r00r00                 2253 	.dw _m_roll_r_4
      0004B4r00r00                 2254 	.dw _m_roll_r_5
      0004B6r00r00                 2255 	.dw _m_roll_r_6
      0004B8                       2256 _roll_l_ani:
      0004B8 08                    2257 	.db #0x08	; 8
      0004B9 00                    2258 	.db #0x00	; 0
      0004BA FE                    2259 	.db #0xfe	; 254
      0004BB 03                    2260 	.db #0x03	; 3
      0004BC 05                    2261 	.db #0x05	; 5
      0004BDr00r00                 2262 	.dw _m_walk_l_0
      0004BFr00r00                 2263 	.dw _m_roll_l_0
      0004C1r00r00                 2264 	.dw _m_roll_l_1
      0004C3r00r00                 2265 	.dw _m_roll_l_2
      0004C5r00r00                 2266 	.dw _m_roll_l_3
      0004C7r00r00                 2267 	.dw _m_roll_l_4
      0004C9r00r00                 2268 	.dw _m_roll_l_5
      0004CBr00r00                 2269 	.dw _m_roll_l_6
      0004CD                       2270 _jump_r_ani:
      0004CD 10                    2271 	.db #0x10	; 16
      0004CE 00                    2272 	.db #0x00	; 0
      0004CF 00                    2273 	.db #0x00	; 0
      0004D0 02                    2274 	.db #0x02	; 2
      0004D1 04                    2275 	.db #0x04	; 4
      0004D2r00r00                 2276 	.dw _m_walk_r_0
      0004D4r00r00                 2277 	.dw _m_roll_r_0
      0004D6r00r00                 2278 	.dw _m_roll_r_1
      0004D8r00r00                 2279 	.dw _m_roll_r_2
      0004DAr00r00                 2280 	.dw _m_roll_r_3
      0004DCr00r00                 2281 	.dw _m_roll_r_4
      0004DEr00r00                 2282 	.dw _m_roll_r_5
      0004E0r00r00                 2283 	.dw _m_roll_r_6
      0004E2r00r00                 2284 	.dw _m_walk_r_0
      0004E4r00r00                 2285 	.dw _m_roll_r_0
      0004E6r00r00                 2286 	.dw _m_roll_r_1
      0004E8r00r00                 2287 	.dw _m_roll_r_2
      0004EAr00r00                 2288 	.dw _m_roll_r_3
      0004ECr00r00                 2289 	.dw _m_roll_r_4
      0004EEr00r00                 2290 	.dw _m_roll_r_5
      0004F0r00r00                 2291 	.dw _m_roll_r_6
      0004F2                       2292 _jump_l_ani:
      0004F2 10                    2293 	.db #0x10	; 16
      0004F3 00                    2294 	.db #0x00	; 0
      0004F4 00                    2295 	.db #0x00	; 0
      0004F5 03                    2296 	.db #0x03	; 3
      0004F6 05                    2297 	.db #0x05	; 5
      0004F7r00r00                 2298 	.dw _m_walk_l_0
      0004F9r00r00                 2299 	.dw _m_roll_l_0
      0004FBr00r00                 2300 	.dw _m_roll_l_1
      0004FDr00r00                 2301 	.dw _m_roll_l_2
      0004FFr00r00                 2302 	.dw _m_roll_l_3
      000501r00r00                 2303 	.dw _m_roll_l_4
      000503r00r00                 2304 	.dw _m_roll_l_5
      000505r00r00                 2305 	.dw _m_roll_l_6
      000507r00r00                 2306 	.dw _m_walk_l_0
      000509r00r00                 2307 	.dw _m_roll_l_0
      00050Br00r00                 2308 	.dw _m_roll_l_1
      00050Dr00r00                 2309 	.dw _m_roll_l_2
      00050Fr00r00                 2310 	.dw _m_roll_l_3
      000511r00r00                 2311 	.dw _m_roll_l_4
      000513r00r00                 2312 	.dw _m_roll_l_5
      000515r00r00                 2313 	.dw _m_roll_l_6
      000517                       2314 _stun_ani:
      000517 08                    2315 	.db #0x08	; 8
      000518 00                    2316 	.db #0x00	; 0
      000519 FE                    2317 	.db #0xfe	; 254
      00051A 00                    2318 	.db #0x00	; 0
      00051B 00                    2319 	.db #0x00	; 0
      00051Cr00r00                 2320 	.dw _m_stun_0
      00051Er00r00                 2321 	.dw _m_stun_1
      000520r00r00                 2322 	.dw _m_stun_0
      000522r00r00                 2323 	.dw _m_stun_2
      000524r00r00                 2324 	.dw _m_stun_3
      000526r00r00                 2325 	.dw _m_stun_2
      000528r00r00                 2326 	.dw _m_stun_3
      00052Ar00r00                 2327 	.dw _m_stun_4
      00052C                       2328 _dead_ani:
      00052C 04                    2329 	.db #0x04	; 4
      00052D 03                    2330 	.db #0x03	; 3
      00052E FE                    2331 	.db #0xfe	; 254
      00052F 07                    2332 	.db #0x07	; 7
      000530 07                    2333 	.db #0x07	; 7
      000531r00r00                 2334 	.dw _m_dead_0
      000533r00r00                 2335 	.dw _m_dead_1
      000535r00r00                 2336 	.dw _m_dead_2
      000537r00r00                 2337 	.dw _m_dead_1
      000539                       2338 _animation:
      000539r4Br04                 2339 	.dw _stand_ani
      00053Br54r04                 2340 	.dw _up_ani
      00053Dr79r04                 2341 	.dw _walk_r_ani
      00053Fr8Er04                 2342 	.dw _walk_l_ani
      000541rA3r04                 2343 	.dw _roll_r_ani
      000543rB8r04                 2344 	.dw _roll_l_ani
      000545r17r05                 2345 	.dw _stun_ani
      000547r2Cr05                 2346 	.dw _dead_ani
      000549rCDr04                 2347 	.dw _jump_r_ani
      00054BrF2r04                 2348 	.dw _jump_l_ani
      00054D                       2349 _move_y_dynamics:
      00054D 20                    2350 	.db #0x20	; 32
      00054E FC FF                 2351 	.dw #0xfffc
      000550 FC FF                 2352 	.dw #0xfffc
      000552 FD FF                 2353 	.dw #0xfffd
      000554 FE FF                 2354 	.dw #0xfffe
      000556 FE FF                 2355 	.dw #0xfffe
      000558 FF FF                 2356 	.dw #0xffff
      00055A FE FF                 2357 	.dw #0xfffe
      00055C FF FF                 2358 	.dw #0xffff
      00055E FF FF                 2359 	.dw #0xffff
      000560 FF FF                 2360 	.dw #0xffff
      000562 FF FF                 2361 	.dw #0xffff
      000564 FF FF                 2362 	.dw #0xffff
      000566 00 00                 2363 	.dw #0x0000
      000568 FF FF                 2364 	.dw #0xffff
      00056A 00 00                 2365 	.dw #0x0000
      00056C 00 00                 2366 	.dw #0x0000
      00056E 00 00                 2367 	.dw #0x0000
      000570 00 00                 2368 	.dw #0x0000
      000572 01 00                 2369 	.dw #0x0001
      000574 00 00                 2370 	.dw #0x0000
      000576 01 00                 2371 	.dw #0x0001
      000578 01 00                 2372 	.dw #0x0001
      00057A 01 00                 2373 	.dw #0x0001
      00057C 01 00                 2374 	.dw #0x0001
      00057E 01 00                 2375 	.dw #0x0001
      000580 02 00                 2376 	.dw #0x0002
      000582 01 00                 2377 	.dw #0x0001
      000584 02 00                 2378 	.dw #0x0002
      000586 02 00                 2379 	.dw #0x0002
      000588 03 00                 2380 	.dw #0x0003
      00058A 04 00                 2381 	.dw #0x0004
      00058C 04 00                 2382 	.dw #0x0004
      00058E                       2383 _double_y_dynamics:
      00058E 20                    2384 	.db #0x20	; 32
      00058F F8 FF                 2385 	.dw #0xfff8
      000591 F8 FF                 2386 	.dw #0xfff8
      000593 FA FF                 2387 	.dw #0xfffa
      000595 FC FF                 2388 	.dw #0xfffc
      000597 FC FF                 2389 	.dw #0xfffc
      000599 FC FF                 2390 	.dw #0xfffc
      00059B FD FF                 2391 	.dw #0xfffd
      00059D FD FF                 2392 	.dw #0xfffd
      00059F FD FF                 2393 	.dw #0xfffd
      0005A1 FE FF                 2394 	.dw #0xfffe
      0005A3 FE FF                 2395 	.dw #0xfffe
      0005A5 FF FF                 2396 	.dw #0xffff
      0005A7 FF FF                 2397 	.dw #0xffff
      0005A9 FF FF                 2398 	.dw #0xffff
      0005AB 00 00                 2399 	.dw #0x0000
      0005AD 00 00                 2400 	.dw #0x0000
      0005AF 00 00                 2401 	.dw #0x0000
      0005B1 00 00                 2402 	.dw #0x0000
      0005B3 01 00                 2403 	.dw #0x0001
      0005B5 01 00                 2404 	.dw #0x0001
      0005B7 01 00                 2405 	.dw #0x0001
      0005B9 02 00                 2406 	.dw #0x0002
      0005BB 02 00                 2407 	.dw #0x0002
      0005BD 03 00                 2408 	.dw #0x0003
      0005BF 03 00                 2409 	.dw #0x0003
      0005C1 03 00                 2410 	.dw #0x0003
      0005C3 04 00                 2411 	.dw #0x0004
      0005C5 04 00                 2412 	.dw #0x0004
      0005C7 04 00                 2413 	.dw #0x0004
      0005C9 06 00                 2414 	.dw #0x0006
      0005CB 08 00                 2415 	.dw #0x0008
      0005CD 08 00                 2416 	.dw #0x0008
      0005CF                       2417 _move_y_data:
      0005CF 00 00                 2418 	.dw #0x0000
      0005D1r4Dr05                 2419 	.dw _move_y_dynamics
      0005D3 00 00                 2420 	.dw #0x0000
      0005D5 00 00                 2421 	.dw #0x0000
      0005D7 00 00                 2422 	.dw #0x0000
      0005D9 00 00                 2423 	.dw #0x0000
      0005DB 00 00                 2424 	.dw #0x0000
      0005DD 00 00                 2425 	.dw #0x0000
      0005DFr4Dr05                 2426 	.dw _move_y_dynamics
      0005E1r4Dr05                 2427 	.dw _move_y_dynamics
      0005E3                       2428 _double_y_data:
      0005E3 00 00                 2429 	.dw #0x0000
      0005E5r8Er05                 2430 	.dw _double_y_dynamics
      0005E7 00 00                 2431 	.dw #0x0000
      0005E9 00 00                 2432 	.dw #0x0000
      0005EB 00 00                 2433 	.dw #0x0000
      0005ED 00 00                 2434 	.dw #0x0000
      0005EF 00 00                 2435 	.dw #0x0000
      0005F1 00 00                 2436 	.dw #0x0000
      0005F3r8Er05                 2437 	.dw _double_y_dynamics
      0005F5r8Er05                 2438 	.dw _double_y_dynamics
      0005F7                       2439 _move_x_data:
      0005F7 00 00                 2440 	.dw #0x0000
      0005F9 00 00                 2441 	.dw #0x0000
      0005FB 01 00                 2442 	.dw #0x0001
      0005FD FF FF                 2443 	.dw #0xffff
      0005FF 01 00                 2444 	.dw #0x0001
      000601 FF FF                 2445 	.dw #0xffff
      000603 00 00                 2446 	.dw #0x0000
      000605 00 00                 2447 	.dw #0x0000
      000607 01 00                 2448 	.dw #0x0001
      000609 FF FF                 2449 	.dw #0xffff
      00060B                       2450 _fly_offsets:
      00060B 28                    2451 	.db #0x28	; 40
      00060C 08                    2452 	.db #0x08	; 8
      00060D                       2453 _fly_delta:
      00060D FC FF                 2454 	.dw #0xfffc
      00060F FD FF                 2455 	.dw #0xfffd
      000611 FE FF                 2456 	.dw #0xfffe
      000613 00 00                 2457 	.dw #0x0000
      000615 00 00                 2458 	.dw #0x0000
      000617 02 00                 2459 	.dw #0x0002
      000619 03 00                 2460 	.dw #0x0003
      00061B 04 00                 2461 	.dw #0x0004
      00061D                       2462 _dizzy_world:
      00061Dr21r06                 2463 	.dw _world_row_0
      00061Fr2Er06                 2464 	.dw _world_row_1
      000621                       2465 _world_row_0:
      000621 00                    2466 	.db #0x00	; 0
      000622r3Br06                 2467 	.dw _room_0_0
      000624r56r06                 2468 	.dw _room_1_0
      000626r71r06                 2469 	.dw _room_2_0
      000628r8Cr06                 2470 	.dw _room_3_0
      00062ArA7r06                 2471 	.dw _room_4_0
      00062CrC2r06                 2472 	.dw _room_5_0
      00062E                       2473 _world_row_1:
      00062E 01                    2474 	.db #0x01	; 1
      00062FrDDr06                 2475 	.dw _room_0_1
      000631rF8r06                 2476 	.dw _room_1_1
      000633r13r07                 2477 	.dw _room_2_1
      000635r2Er07                 2478 	.dw _room_3_1
      000637r49r07                 2479 	.dw _room_4_1
      000639r64r07                 2480 	.dw _room_5_1
      00063B                       2481 _room_0_0:
      00063B 03                    2482 	.db #0x03	; 3
      00063Cr00r00                 2483 	.dw _room_0_0_map
      00063Er00r00                 2484 	.dw _room_0_0_coll
      000640r00r00                 2485 	.dw _room_0_0_tiles
      000642 00 00                 2486 	.dw #0x0000
      000644 00 00                 2487 	.dw #0x0000
      000646 00 00                 2488 	.dw #0x0000
      000648 00 00                 2489 	.dw #0x0000
      00064A 00 00                 2490 	.dw #0x0000
      00064C 00 00                 2491 	.dw #0x0000
      00064E 00 00                 2492 	.dw #0x0000
      000650 00 00                 2493 	.dw #0x0000
      000652 00 00                 2494 	.dw #0x0000
      000654 00 00                 2495 	.dw #0x0000
      000656                       2496 _room_1_0:
      000656 03                    2497 	.db #0x03	; 3
      000657r00r00                 2498 	.dw _room_1_0_map
      000659r00r00                 2499 	.dw _room_1_0_coll
      00065Br00r00                 2500 	.dw _room_1_0_tiles
      00065D 00 00                 2501 	.dw #0x0000
      00065F 00 00                 2502 	.dw #0x0000
      000661 00 00                 2503 	.dw #0x0000
      000663 00 00                 2504 	.dw #0x0000
      000665 00 00                 2505 	.dw #0x0000
      000667 00 00                 2506 	.dw #0x0000
      000669 00 00                 2507 	.dw #0x0000
      00066B 00 00                 2508 	.dw #0x0000
      00066D 00 00                 2509 	.dw #0x0000
      00066F 00 00                 2510 	.dw #0x0000
      000671                       2511 _room_2_0:
      000671 03                    2512 	.db #0x03	; 3
      000672r00r00                 2513 	.dw _room_2_0_map
      000674r00r00                 2514 	.dw _room_2_0_coll
      000676r00r00                 2515 	.dw _room_2_0_tiles
      000678r00r00                 2516 	.dw _enemies_2_0_tiles
      00067Ar00r00                 2517 	.dw _init_room2_0
      00067Cr00r00                 2518 	.dw _move_spider
      00067Er00r00                 2519 	.dw _draw_spider
      000680 00 00                 2520 	.dw #0x0000
      000682 00 00                 2521 	.dw #0x0000
      000684r00r00                 2522 	.dw _coll_spider
      000686 00 00                 2523 	.dw #0x0000
      000688 00 00                 2524 	.dw #0x0000
      00068A 00 00                 2525 	.dw #0x0000
      00068C                       2526 _room_3_0:
      00068C 03                    2527 	.db #0x03	; 3
      00068Dr00r00                 2528 	.dw _room_3_0_map
      00068Fr00r00                 2529 	.dw _room_3_0_coll
      000691r00r00                 2530 	.dw _room_3_0_tiles
      000693 00 00                 2531 	.dw #0x0000
      000695 00 00                 2532 	.dw #0x0000
      000697 00 00                 2533 	.dw #0x0000
      000699 00 00                 2534 	.dw #0x0000
      00069B 00 00                 2535 	.dw #0x0000
      00069D 00 00                 2536 	.dw #0x0000
      00069F 00 00                 2537 	.dw #0x0000
      0006A1 00 00                 2538 	.dw #0x0000
      0006A3 00 00                 2539 	.dw #0x0000
      0006A5 00 00                 2540 	.dw #0x0000
      0006A7                       2541 _room_4_0:
      0006A7 03                    2542 	.db #0x03	; 3
      0006A8r00r00                 2543 	.dw _room_4_0_map
      0006AAr00r00                 2544 	.dw _room_4_0_coll
      0006ACr00r00                 2545 	.dw _room_4_0_tiles
      0006AEr00r00                 2546 	.dw _enemies_4_0_tiles
      0006B0r00r00                 2547 	.dw _init_room4_0
      0006B2r00r00                 2548 	.dw _move_flies4_0
      0006B4r00r00                 2549 	.dw _draw_flies4_0
      0006B6 00 00                 2550 	.dw #0x0000
      0006B8 00 00                 2551 	.dw #0x0000
      0006BA 00 00                 2552 	.dw #0x0000
      0006BCr00r00                 2553 	.dw _dizzy_catches_firefly
      0006BE 00 00                 2554 	.dw #0x0000
      0006C0 00 00                 2555 	.dw #0x0000
      0006C2                       2556 _room_5_0:
      0006C2 03                    2557 	.db #0x03	; 3
      0006C3r00r00                 2558 	.dw _room_5_0_map
      0006C5r00r00                 2559 	.dw _room_5_0_coll
      0006C7r00r00                 2560 	.dw _room_5_0_tiles
      0006C9 00 00                 2561 	.dw #0x0000
      0006CB 00 00                 2562 	.dw #0x0000
      0006CD 00 00                 2563 	.dw #0x0000
      0006CF 00 00                 2564 	.dw #0x0000
      0006D1 00 00                 2565 	.dw #0x0000
      0006D3 00 00                 2566 	.dw #0x0000
      0006D5 00 00                 2567 	.dw #0x0000
      0006D7r00r00                 2568 	.dw _grand_gets_pie
      0006D9 00 00                 2569 	.dw #0x0000
      0006DB 00 00                 2570 	.dw #0x0000
      0006DD                       2571 _room_0_1:
      0006DD 04                    2572 	.db #0x04	; 4
      0006DEr00r00                 2573 	.dw _room_0_1_map
      0006E0r00r00                 2574 	.dw _room_0_1_coll
      0006E2r00r00                 2575 	.dw _room_0_1_tiles
      0006E4r00r00                 2576 	.dw _enemies_0_1_tiles
      0006E6r00r00                 2577 	.dw _init_room0_1
      0006E8r00r00                 2578 	.dw _move_bats0
      0006EAr00r00                 2579 	.dw _draw_bats0
      0006ECr00r00                 2580 	.dw _hcoll_darkness
      0006EE 00 00                 2581 	.dw #0x0000
      0006F0r00r00                 2582 	.dw _coll_bats
      0006F2r00r00                 2583 	.dw _dizzy_drops_firefly
      0006F4r00r00                 2584 	.dw _reset_room0_1
      0006F6r00r00                 2585 	.dw _draw_room0_1
      0006F8                       2586 _room_1_1:
      0006F8 04                    2587 	.db #0x04	; 4
      0006F9r00r00                 2588 	.dw _room_1_1_map
      0006FBr00r00                 2589 	.dw _room_1_1_coll
      0006FDr00r00                 2590 	.dw _room_1_1_tiles
      0006FFr00r00                 2591 	.dw _enemies_1_1_tiles
      000701r00r00                 2592 	.dw _init_room1_1
      000703 00 00                 2593 	.dw #0x0000
      000705r00r00                 2594 	.dw _draw_flames1_1
      000707r00r00                 2595 	.dw _hcoll_blockage
      000709r00r00                 2596 	.dw _vcoll_blockage
      00070B 00 00                 2597 	.dw #0x0000
      00070Dr00r00                 2598 	.dw _cleaning_path
      00070Fr00r00                 2599 	.dw _reset_room1
      000711 00 00                 2600 	.dw #0x0000
      000713                       2601 _room_2_1:
      000713 04                    2602 	.db #0x04	; 4
      000714r00r00                 2603 	.dw _room_2_1_map
      000716r00r00                 2604 	.dw _room_2_1_coll
      000718r00r00                 2605 	.dw _room_2_1_tiles
      00071Ar00r00                 2606 	.dw _enemies_2_1_tiles
      00071Cr00r00                 2607 	.dw _init_room2
      00071Er00r00                 2608 	.dw _move_elevator
      000720r00r00                 2609 	.dw _draw_elevator
      000722r00r00                 2610 	.dw _hcoll_elevator
      000724r00r00                 2611 	.dw _vcoll_dylan
      000726 00 00                 2612 	.dw #0x0000
      000728r00r00                 2613 	.dw _dylan_gets_key
      00072Ar00r00                 2614 	.dw _reset_room2
      00072C 00 00                 2615 	.dw #0x0000
      00072E                       2616 _room_3_1:
      00072E 05                    2617 	.db #0x05	; 5
      00072Fr00r00                 2618 	.dw _room_3_1_map
      000731r00r00                 2619 	.dw _room_3_1_coll
      000733r00r00                 2620 	.dw _room_3_1_tiles
      000735r00r00                 2621 	.dw _enemies_34_1_tiles
      000737r00r00                 2622 	.dw _init_room34
      000739r00r00                 2623 	.dw _move_float
      00073Br00r00                 2624 	.dw _draw_float3
      00073Dr00r00                 2625 	.dw _hcoll_float3
      00073F 00 00                 2626 	.dw #0x0000
      000741 00 00                 2627 	.dw #0x0000
      000743 00 00                 2628 	.dw #0x0000
      000745 00 00                 2629 	.dw #0x0000
      000747 00 00                 2630 	.dw #0x0000
      000749                       2631 _room_4_1:
      000749 05                    2632 	.db #0x05	; 5
      00074Ar00r00                 2633 	.dw _room_4_1_map
      00074Cr00r00                 2634 	.dw _room_4_1_coll
      00074Er00r00                 2635 	.dw _room_4_1_tiles
      000750r00r00                 2636 	.dw _enemies_34_1_tiles
      000752r00r00                 2637 	.dw _init_room34
      000754r00r00                 2638 	.dw _move_float
      000756r00r00                 2639 	.dw _draw_float4
      000758r00r00                 2640 	.dw _hcoll_float4
      00075Ar00r00                 2641 	.dw _vcoll_troll
      00075C 00 00                 2642 	.dw #0x0000
      00075E 00 00                 2643 	.dw #0x0000
      000760r00r00                 2644 	.dw _reset_room4
      000762 00 00                 2645 	.dw #0x0000
      000764                       2646 _room_5_1:
      000764 05                    2647 	.db #0x05	; 5
      000765r00r00                 2648 	.dw _room_5_1_map
      000767r00r00                 2649 	.dw _room_5_1_coll
      000769r00r00                 2650 	.dw _room_5_1_tiles
      00076B 00 00                 2651 	.dw #0x0000
      00076D 00 00                 2652 	.dw #0x0000
      00076F 00 00                 2653 	.dw #0x0000
      000771 00 00                 2654 	.dw #0x0000
      000773r00r00                 2655 	.dw _hcoll_mushroom
      000775r00r00                 2656 	.dw _vcoll_daisy
      000777 00 00                 2657 	.dw #0x0000
      000779r00r00                 2658 	.dw _daisy_gets_mushrooms
      00077Br00r00                 2659 	.dw _reset_room5_1
      00077D 00 00                 2660 	.dw #0x0000
      00077F                       2661 _ptr_div_reg:
      00077F 04 FF                 2662 	.dw #0xff04
      000781                       2663 _empty_compressed_map:
      000781 FF                    2664 	.db #0xff	; 255
      000782 00                    2665 	.db #0x00	; 0
      000783 FF                    2666 	.db #0xff	; 255
      000784 00                    2667 	.db #0x00	; 0
      000785 FF                    2668 	.db #0xff	; 255
      000786 00                    2669 	.db #0x00	; 0
      000787 FF                    2670 	.db #0xff	; 255
      000788 00                    2671 	.db #0x00	; 0
      000789 FF                    2672 	.db #0xff	; 255
      00078A 00                    2673 	.db #0x00	; 0
      00078B FF                    2674 	.db #0xff	; 255
      00078C 00                    2675 	.db #0x00	; 0
      00078D FF                    2676 	.db #0xff	; 255
      00078E 00                    2677 	.db #0x00	; 0
      00078F FF                    2678 	.db #0xff	; 255
      000790 00                    2679 	.db #0x00	; 0
      000791                       2680 _evil_hide:
      000791 00                    2681 	.db #0x00	; 0
      000792 00                    2682 	.db #0x00	; 0
      000793 00                    2683 	.db #0x00	; 0
      000794 00                    2684 	.db #0x00	; 0
      000795 00                    2685 	.db #0x00	; 0
      000796 00                    2686 	.db #0x00	; 0
      000797 00                    2687 	.db #0x00	; 0
      000798 00                    2688 	.db #0x00	; 0
      000799 00                    2689 	.db #0x00	; 0
      00079A 00                    2690 	.db #0x00	; 0
      00079B 00                    2691 	.db #0x00	; 0
      00079C 00                    2692 	.db #0x00	; 0
      00079D 00                    2693 	.db #0x00	; 0
      00079E 00                    2694 	.db #0x00	; 0
      00079F 00                    2695 	.db #0x00	; 0
      0007A0 00                    2696 	.db #0x00	; 0
      0007A1 00                    2697 	.db #0x00	; 0
      0007A2 00                    2698 	.db #0x00	; 0
      0007A3 00                    2699 	.db #0x00	; 0
      0007A4 00                    2700 	.db #0x00	; 0
      0007A5 00                    2701 	.db #0x00	; 0
      0007A6 00                    2702 	.db #0x00	; 0
      0007A7 00                    2703 	.db #0x00	; 0
      0007A8 00                    2704 	.db #0x00	; 0
      0007A9 00                    2705 	.db #0x00	; 0
      0007AA 00                    2706 	.db #0x00	; 0
      0007AB 00                    2707 	.db #0x00	; 0
      0007AC 00                    2708 	.db #0x00	; 0
      0007AD 00                    2709 	.db #0x00	; 0
      0007AE 00                    2710 	.db #0x00	; 0
      0007AF 00                    2711 	.db #0x00	; 0
      0007B0 00                    2712 	.db #0x00	; 0
      0007B1                       2713 _current_coll_idx:
      0007B1r00r00                 2714 	.dw (_coll_buf + 0)
      0007B3r1Er00                 2715 	.dw (_coll_buf + 30)
      0007B5r3Cr00                 2716 	.dw (_coll_buf + 60)
      0007B7r5Ar00                 2717 	.dw (_coll_buf + 90)
      0007B9r78r00                 2718 	.dw (_coll_buf + 120)
      0007BBr96r00                 2719 	.dw (_coll_buf + 150)
      0007BDrB4r00                 2720 	.dw (_coll_buf + 180)
      0007BFrD2r00                 2721 	.dw (_coll_buf + 210)
      0007C1rF0r00                 2722 	.dw (_coll_buf + 240)
      0007C3r0Er01                 2723 	.dw (_coll_buf + 270)
      0007C5r2Cr01                 2724 	.dw (_coll_buf + 300)
      0007C7r4Ar01                 2725 	.dw (_coll_buf + 330)
      0007C9r68r01                 2726 	.dw (_coll_buf + 360)
      0007CBr86r01                 2727 	.dw (_coll_buf + 390)
      0007CDrA4r01                 2728 	.dw (_coll_buf + 420)
      0007CFrC2r01                 2729 	.dw (_coll_buf + 450)
      0007D1rE0r01                 2730 	.dw (_coll_buf + 480)
      0007D3                       2731 _ethalon_indicator:
      0007D3 00                    2732 	.db #0x00	; 0
      0007D4 01                    2733 	.db #0x01	; 1
      0007D5 01                    2734 	.db #0x01	; 1
      0007D6 01                    2735 	.db #0x01	; 1
      0007D7 01                    2736 	.db #0x01	; 1
      0007D8 01                    2737 	.db #0x01	; 1
      0007D9 01                    2738 	.db #0x01	; 1
      0007DA 02                    2739 	.db #0x02	; 2
      0007DB                       2740 _ethalon_tiles_offsets:
      0007DB 00                    2741 	.db #0x00	; 0
      0007DC 09                    2742 	.db #0x09	; 9
      0007DD 12                    2743 	.db #0x12	; 18
                                   2744 ;src/include/energy.h:36: void init_dizzy_coins() { coins = 0; }
                                   2745 ;	---------------------------------
                                   2746 ; Function init_dizzy_coins
                                   2747 ; ---------------------------------
      0007DE                       2748 _init_dizzy_coins::
      0007DE 21r2Fr02              2749 	ld	hl, #_coins
      0007E1 36 00                 2750 	ld	(hl), #0x00
      0007E3 C9                    2751 	ret
                                   2752 ;src/include/energy.h:37: void init_dizzy_lives() { dizzy_lives = 3; }
                                   2753 ;	---------------------------------
                                   2754 ; Function init_dizzy_lives
                                   2755 ; ---------------------------------
      0007E4                       2756 _init_dizzy_lives::
      0007E4 21r13r02              2757 	ld	hl, #_dizzy_lives
      0007E7 36 03                 2758 	ld	(hl), #0x03
      0007E9 C9                    2759 	ret
                                   2760 ;src/include/energy.h:38: void init_dizzy_energy() { dizzy_energy = 16; inc_energy = 48; dec_energy = 0; }
                                   2761 ;	---------------------------------
                                   2762 ; Function init_dizzy_energy
                                   2763 ; ---------------------------------
      0007EA                       2764 _init_dizzy_energy::
      0007EA 21r32r02              2765 	ld	hl, #_dizzy_energy
      0007ED 36 10                 2766 	ld	(hl), #0x10
      0007EF 21r34r02              2767 	ld	hl, #_inc_energy
      0007F2 36 30                 2768 	ld	(hl), #0x30
      0007F4 21r35r02              2769 	ld	hl, #_dec_energy
      0007F7 36 00                 2770 	ld	(hl), #0x00
      0007F9 C9                    2771 	ret
                                   2772 ;src/include/energy.h:40: void on_dizzy_die() {
                                   2773 ;	---------------------------------
                                   2774 ; Function on_dizzy_die
                                   2775 ; ---------------------------------
      0007FA                       2776 _on_dizzy_die::
                                   2777 ;src/include/energy.h:41: ani_type = ANI_DEAD;
      0007FA 21r02r00              2778 	ld	hl, #_ani_type
      0007FD 36 07                 2779 	ld	(hl), #0x07
                                   2780 ;src/include/energy.h:42: ani_phase = 0; 
      0007FF 21r03r00              2781 	ld	hl, #_ani_phase
      000802 36 00                 2782 	ld	(hl), #0x00
                                   2783 ;src/include/energy.h:43: current_dyn = 0; current_dyn_phase = 0;
      000804 AF                    2784 	xor	a, a
      000805 21r04r00              2785 	ld	hl, #_current_dyn
      000808 22                    2786 	ld	(hl+), a
      000809 77                    2787 	ld	(hl), a
      00080A 21r07r00              2788 	ld	hl, #_current_dyn_phase
      00080D 36 00                 2789 	ld	(hl), #0x00
                                   2790 ;src/include/energy.h:44: death_pause = 32;
      00080F 21r1Fr00              2791 	ld	hl, #_death_pause
      000812 36 20                 2792 	ld	(hl), #0x20
                                   2793 ;src/include/energy.h:45: }
      000814 C9                    2794 	ret
                                   2795 ;src/include/energy.h:46: void show_lives() {
                                   2796 ;	---------------------------------
                                   2797 ; Function show_lives
                                   2798 ; ---------------------------------
      000815                       2799 _show_lives::
                                   2800 ;src/include/energy.h:47: for (__temp_i = 0; __temp_i < 3; __temp_i++) {
      000815 21r0Br02              2801 	ld	hl, #___temp_i
      000818 36 00                 2802 	ld	(hl), #0x00
      00081A                       2803 00105$:
                                   2804 ;src/include/energy.h:48: if (__temp_i < dizzy_lives) dizzy_lives_indicator[__temp_i] = dizzy_live_symbol; else dizzy_lives_indicator[__temp_i] = 0x00;
      00081A 3Er14                 2805 	ld	a, #<(_dizzy_lives_indicator)
      00081C 21r0Br02              2806 	ld	hl, #___temp_i
      00081F 86                    2807 	add	a, (hl)
      000820 4F                    2808 	ld	c, a
      000821 3Es02                 2809 	ld	a, #>(_dizzy_lives_indicator)
      000823 CE 00                 2810 	adc	a, #0x00
      000825 47                    2811 	ld	b, a
      000826 7E                    2812 	ld	a, (hl)
      000827 21r13r02              2813 	ld	hl, #_dizzy_lives
      00082A 96                    2814 	sub	a, (hl)
      00082B 30 06                 2815 	jr	NC, 00102$
      00082D FAr10r02              2816 	ld	a, (#_dizzy_live_symbol)
      000830 02                    2817 	ld	(bc), a
      000831 18 02                 2818 	jr	00106$
      000833                       2819 00102$:
      000833 AF                    2820 	xor	a, a
      000834 02                    2821 	ld	(bc), a
      000835                       2822 00106$:
                                   2823 ;src/include/energy.h:47: for (__temp_i = 0; __temp_i < 3; __temp_i++) {
      000835 21r0Br02              2824 	ld	hl, #___temp_i
      000838 34                    2825 	inc	(hl)
      000839 7E                    2826 	ld	a, (hl)
      00083A D6 03                 2827 	sub	a, #0x03
      00083C 38 DC                 2828 	jr	C, 00105$
                                   2829 ;src/include/energy.h:50: set_win_tiles(15, 1, sizeof(dizzy_lives_indicator), 1, dizzy_lives_indicator);    
      00083E 11r14r02              2830 	ld	de, #_dizzy_lives_indicator
      000841 D5                    2831 	push	de
      000842 21 03 01              2832 	ld	hl, #0x103
      000845 E5                    2833 	push	hl
      000846 21 0F 01              2834 	ld	hl, #0x10f
      000849 E5                    2835 	push	hl
      00084A CDr00r00              2836 	call	_set_win_tiles
      00084D E8 06                 2837 	add	sp, #6
                                   2838 ;src/include/energy.h:51: }
      00084F C9                    2839 	ret
                                   2840 ;src/include/energy.h:53: void add_coins(UBYTE n) __naked 
                                   2841 ;	---------------------------------
                                   2842 ; Function add_coins
                                   2843 ; ---------------------------------
      000850                       2844 _add_coins::
                                   2845 ;src/include/energy.h:63: __endasm;
      000850 FAr2Fr02              2846 	ld	A, (#_coins)
      000853 F8 02                 2847 	lda	HL, 2(SP)
      000855 86                    2848 	add	(HL)
      000856 27                    2849 	daa
      000857 EAr2Fr02              2850 	ld	(#_coins), A
      00085A C9                    2851 	ret
                                   2852 ;src/include/energy.h:64: }
                                   2853 ;src/include/energy.h:65: void sub_coins(UBYTE n) __naked 
                                   2854 ;	---------------------------------
                                   2855 ; Function sub_coins
                                   2856 ; ---------------------------------
      00085B                       2857 _sub_coins::
                                   2858 ;src/include/energy.h:75: __endasm;
      00085B FAr2Fr02              2859 	ld	A, (#_coins)
      00085E F8 02                 2860 	lda	HL, 2(SP)
      000860 96                    2861 	sub	(HL)
      000861 27                    2862 	daa
      000862 EAr2Fr02              2863 	ld	(#_coins), A
      000865 C9                    2864 	ret
                                   2865 ;src/include/energy.h:76: }
                                   2866 ;src/include/energy.h:77: void show_coins() {
                                   2867 ;	---------------------------------
                                   2868 ; Function show_coins
                                   2869 ; ---------------------------------
      000866                       2870 _show_coins::
                                   2871 ;src/include/energy.h:78: coins_indicator[0] = (coins >> 4) + digits_start;
      000866 01r30r02              2872 	ld	bc, #_coins_indicator+0
      000869 FAr2Fr02              2873 	ld	a, (#_coins)
      00086C CB 37                 2874 	swap	a
      00086E E6 0F                 2875 	and	a, #0x0f
      000870 21r12r02              2876 	ld	hl, #_digits_start
      000873 86                    2877 	add	a, (hl)
      000874 02                    2878 	ld	(bc), a
                                   2879 ;src/include/energy.h:79: coins_indicator[1] = (coins & 0x0F) + digits_start;
      000875 59                    2880 	ld	e, c
      000876 50                    2881 	ld	d, b
      000877 13                    2882 	inc	de
      000878 FAr2Fr02              2883 	ld	a, (#_coins)
      00087B E6 0F                 2884 	and	a, #0x0f
      00087D 21r12r02              2885 	ld	hl, #_digits_start
      000880 6E                    2886 	ld	l, (hl)
                                   2887 ;	spillPairReg hl
                                   2888 ;	spillPairReg hl
      000881 85                    2889 	add	a, l
      000882 12                    2890 	ld	(de), a
                                   2891 ;src/include/energy.h:80: set_win_tiles(2, 1, sizeof(coins_indicator), 1, coins_indicator);
      000883 C5                    2892 	push	bc
      000884 21 02 01              2893 	ld	hl, #0x102
      000887 E5                    2894 	push	hl
      000888 E5                    2895 	push	hl
      000889 CDr00r00              2896 	call	_set_win_tiles
      00088C E8 06                 2897 	add	sp, #6
                                   2898 ;src/include/energy.h:81: }
      00088E C9                    2899 	ret
                                   2900 ;src/include/energy.h:83: void show_energy() {
                                   2901 ;	---------------------------------
                                   2902 ; Function show_energy
                                   2903 ; ---------------------------------
      00088F                       2904 _show_energy::
                                   2905 ;src/include/energy.h:84: push_bank(1);
      00088F 3E 01                 2906 	ld	a, #0x01
      000891 F5                    2907 	push	af
      000892 33                    2908 	inc	sp
      000893 CDr00r00              2909 	call	_push_bank
      000896 33                    2910 	inc	sp
                                   2911 ;src/include/energy.h:85: __temp_k = dizzy_energy;
      000897 FAr32r02              2912 	ld	a, (#_dizzy_energy)
      00089A EAr0Dr02              2913 	ld	(#___temp_k),a
                                   2914 ;src/include/energy.h:86: for (__temp_i = 0; __temp_i < 8; __temp_i++) {
      00089D 21r0Br02              2915 	ld	hl, #___temp_i
      0008A0 36 00                 2916 	ld	(hl), #0x00
      0008A2                       2917 00108$:
                                   2918 ;src/include/energy.h:89: dizzy_energy_indicator[__temp_i] = (dizzy_energy_start + ethalon_indicator[__temp_i]);
      0008A2 3Er17                 2919 	ld	a, #<(_dizzy_energy_indicator)
      0008A4 21r0Br02              2920 	ld	hl, #___temp_i
      0008A7 86                    2921 	add	a, (hl)
      0008A8 4F                    2922 	ld	c, a
      0008A9 3Es02                 2923 	ld	a, #>(_dizzy_energy_indicator)
      0008AB CE 00                 2924 	adc	a, #0x00
      0008AD 47                    2925 	ld	b, a
                                   2926 ;src/include/energy.h:87: if (__temp_k) {
      0008AE FAr0Dr02              2927 	ld	a, (#___temp_k)
      0008B1 B7                    2928 	or	a, a
      0008B2 28 6F                 2929 	jr	Z, 00105$
                                   2930 ;src/include/energy.h:89: dizzy_energy_indicator[__temp_i] = (dizzy_energy_start + ethalon_indicator[__temp_i]);
      0008B4 3ErD3                 2931 	ld	a, #<(_ethalon_indicator)
      0008B6 21r0Br02              2932 	ld	hl, #___temp_i
      0008B9 86                    2933 	add	a, (hl)
      0008BA 5F                    2934 	ld	e, a
      0008BB 3Es07                 2935 	ld	a, #>(_ethalon_indicator)
      0008BD CE 00                 2936 	adc	a, #0x00
      0008BF 57                    2937 	ld	d, a
      0008C0 1A                    2938 	ld	a, (de)
      0008C1 5F                    2939 	ld	e, a
                                   2940 ;src/include/energy.h:88: if (__temp_k >= 8) {
      0008C2 FAr0Dr02              2941 	ld	a, (#___temp_k)
      0008C5 D6 08                 2942 	sub	a, #0x08
      0008C7 38 0F                 2943 	jr	C, 00102$
                                   2944 ;src/include/energy.h:89: dizzy_energy_indicator[__temp_i] = (dizzy_energy_start + ethalon_indicator[__temp_i]);
      0008C9 7B                    2945 	ld	a, e
      0008CA 21r11r02              2946 	ld	hl, #_dizzy_energy_start
      0008CD 86                    2947 	add	a, (hl)
      0008CE 02                    2948 	ld	(bc), a
                                   2949 ;src/include/energy.h:90: __temp_k -= 8;
      0008CF 21r0Dr02              2950 	ld	hl, #___temp_k
      0008D2 7E                    2951 	ld	a, (hl)
      0008D3 C6 F8                 2952 	add	a, #0xf8
      0008D5 77                    2953 	ld	(hl), a
      0008D6 18 4D                 2954 	jr	00109$
      0008D8                       2955 00102$:
                                   2956 ;src/include/energy.h:92: unshrink_and_mask(__temp_k, ((unsigned char *)energy_tiles) + 1 + ethalon_tiles_offsets[ethalon_indicator[__temp_i]], temp_tile_buffer);
      0008D8 01r00r00              2957 	ld	bc, #_energy_tiles
      0008DB 03                    2958 	inc	bc
      0008DC 21rDBr07              2959 	ld	hl, #_ethalon_tiles_offsets
      0008DF 16 00                 2960 	ld	d, #0x00
      0008E1 19                    2961 	add	hl, de
      0008E2 6E                    2962 	ld	l, (hl)
                                   2963 ;	spillPairReg hl
      0008E3 26 00                 2964 	ld	h, #0x00
      0008E5 09                    2965 	add	hl, bc
      0008E6 11r1Fr02              2966 	ld	de, #_temp_tile_buffer
      0008E9 D5                    2967 	push	de
      0008EA E5                    2968 	push	hl
      0008EB FAr0Dr02              2969 	ld	a, (#___temp_k)
      0008EE F5                    2970 	push	af
      0008EF 33                    2971 	inc	sp
      0008F0 CDrE7r03              2972 	call	_unshrink_and_mask
      0008F3 E8 05                 2973 	add	sp, #5
                                   2974 ;src/include/energy.h:93: set_win_data(dizzy_energy_start + 3, 1, temp_tile_buffer);
      0008F5 21r11r02              2975 	ld	hl, #_dizzy_energy_start
      0008F8 7E                    2976 	ld	a, (hl)
      0008F9 C6 03                 2977 	add	a, #0x03
      0008FB 11r1Fr02              2978 	ld	de, #_temp_tile_buffer
      0008FE D5                    2979 	push	de
      0008FF 26 01                 2980 	ld	h, #0x01
                                   2981 ;	spillPairReg hl
                                   2982 ;	spillPairReg hl
      000901 E5                    2983 	push	hl
      000902 33                    2984 	inc	sp
      000903 F5                    2985 	push	af
      000904 33                    2986 	inc	sp
      000905 CDr00r00              2987 	call	_set_win_data
      000908 E8 04                 2988 	add	sp, #4
                                   2989 ;src/include/energy.h:94: dizzy_energy_indicator[__temp_i] = dizzy_energy_start + 3;
      00090A 3Er17                 2990 	ld	a, #<(_dizzy_energy_indicator)
      00090C 21r0Br02              2991 	ld	hl, #___temp_i
      00090F 86                    2992 	add	a, (hl)
      000910 4F                    2993 	ld	c, a
      000911 3Es02                 2994 	ld	a, #>(_dizzy_energy_indicator)
      000913 CE 00                 2995 	adc	a, #0x00
      000915 47                    2996 	ld	b, a
      000916 FAr11r02              2997 	ld	a, (#_dizzy_energy_start)
      000919 C6 03                 2998 	add	a, #0x03
      00091B 02                    2999 	ld	(bc), a
                                   3000 ;src/include/energy.h:95: __temp_k = 0;
      00091C 21r0Dr02              3001 	ld	hl, #___temp_k
      00091F 36 00                 3002 	ld	(hl), #0x00
      000921 18 02                 3003 	jr	00109$
      000923                       3004 00105$:
                                   3005 ;src/include/energy.h:98: dizzy_energy_indicator[__temp_i] = 0x00;
      000923 AF                    3006 	xor	a, a
      000924 02                    3007 	ld	(bc), a
      000925                       3008 00109$:
                                   3009 ;src/include/energy.h:86: for (__temp_i = 0; __temp_i < 8; __temp_i++) {
      000925 21r0Br02              3010 	ld	hl, #___temp_i
      000928 34                    3011 	inc	(hl)
      000929 7E                    3012 	ld	a, (hl)
      00092A D6 08                 3013 	sub	a, #0x08
      00092C DArA2r08              3014 	jp	C, 00108$
                                   3015 ;src/include/energy.h:101: set_win_tiles(6, 1, sizeof(dizzy_energy_indicator), 1, dizzy_energy_indicator);
      00092F 11r17r02              3016 	ld	de, #_dizzy_energy_indicator
      000932 D5                    3017 	push	de
      000933 21 08 01              3018 	ld	hl, #0x108
      000936 E5                    3019 	push	hl
      000937 3E 01                 3020 	ld	a, #0x01
      000939 F5                    3021 	push	af
      00093A 33                    3022 	inc	sp
      00093B 3E 06                 3023 	ld	a, #0x06
      00093D F5                    3024 	push	af
      00093E 33                    3025 	inc	sp
      00093F CDr00r00              3026 	call	_set_win_tiles
      000942 E8 06                 3027 	add	sp, #6
                                   3028 ;src/include/energy.h:102: pop_bank();
                                   3029 ;src/include/energy.h:103: }
      000944 C3r00r00              3030 	jp	_pop_bank
                                   3031 ;src/include/energy.h:104: void update_energy() {
                                   3032 ;	---------------------------------
                                   3033 ; Function update_energy
                                   3034 ; ---------------------------------
      000947                       3035 _update_energy::
                                   3036 ;src/include/energy.h:105: dizzy_energy_old = dizzy_energy;
      000947 FAr32r02              3037 	ld	a, (#_dizzy_energy)
      00094A EAr33r02              3038 	ld	(#_dizzy_energy_old),a
                                   3039 ;src/include/energy.h:106: if (dec_energy) {
      00094D 21r35r02              3040 	ld	hl, #_dec_energy
      000950 7E                    3041 	ld	a, (hl)
      000951 B7                    3042 	or	a, a
      000952 28 31                 3043 	jr	Z, 00111$
                                   3044 ;src/include/energy.h:107: dec_energy--;
      000954 35                    3045 	dec	(hl)
                                   3046 ;src/include/energy.h:108: if (dizzy_energy) {
      000955 21r32r02              3047 	ld	hl, #_dizzy_energy
      000958 7E                    3048 	ld	a, (hl)
      000959 B7                    3049 	or	a, a
      00095A 28 1C                 3050 	jr	Z, 00102$
                                   3051 ;src/include/energy.h:109: dizzy_energy--;
      00095C 35                    3052 	dec	(hl)
                                   3053 ;src/include/energy.h:110: SND_HIT;
      00095D 11 86 00              3054 	ld	de, #0x0086
      000960 D5                    3055 	push	de
      000961 11 10 00              3056 	ld	de, #0x0010
      000964 D5                    3057 	push	de
      000965 11 41 00              3058 	ld	de, #0x0041
      000968 D5                    3059 	push	de
      000969 AF                    3060 	xor	a, a
      00096A F5                    3061 	push	af
      00096B 11 00 00              3062 	ld	de, #0x0000
      00096E D5                    3063 	push	de
      00096F 21 00 04              3064 	ld	hl, #0x400
      000972 E5                    3065 	push	hl
      000973 CDr00r00              3066 	call	_PlayFx
      000976 E8 0C                 3067 	add	sp, #12
      000978                       3068 00102$:
                                   3069 ;src/include/energy.h:112: if (!dizzy_energy) dec_energy = 0;
      000978 FAr32r02              3070 	ld	a, (#_dizzy_energy)
      00097B B7                    3071 	or	a, a
      00097C 20 23                 3072 	jr	NZ, 00112$
      00097E 21r35r02              3073 	ld	hl, #_dec_energy
      000981 36 00                 3074 	ld	(hl), #0x00
      000983 18 1C                 3075 	jr	00112$
      000985                       3076 00111$:
                                   3077 ;src/include/energy.h:113: } else if (inc_energy) {
      000985 FAr34r02              3078 	ld	a, (#_inc_energy)
      000988 B7                    3079 	or	a, a
      000989 28 16                 3080 	jr	Z, 00112$
                                   3081 ;src/include/energy.h:114: dizzy_energy++; 
      00098B 21r32r02              3082 	ld	hl, #_dizzy_energy
      00098E 34                    3083 	inc	(hl)
                                   3084 ;src/include/energy.h:115: if (dizzy_energy > 64) { 
      00098F 3E 40                 3085 	ld	a, #0x40
      000991 96                    3086 	sub	a, (hl)
      000992 30 09                 3087 	jr	NC, 00106$
                                   3088 ;src/include/energy.h:116: dizzy_energy = 64;
      000994 36 40                 3089 	ld	(hl), #0x40
                                   3090 ;src/include/energy.h:117: inc_energy = 0;
      000996 21r34r02              3091 	ld	hl, #_inc_energy
      000999 36 00                 3092 	ld	(hl), #0x00
      00099B 18 04                 3093 	jr	00112$
      00099D                       3094 00106$:
                                   3095 ;src/include/energy.h:118: } else inc_energy--;
      00099D 21r34r02              3096 	ld	hl, #_inc_energy
      0009A0 35                    3097 	dec	(hl)
      0009A1                       3098 00112$:
                                   3099 ;src/include/energy.h:120: if (dizzy_energy != dizzy_energy_old) {
      0009A1 FAr32r02              3100 	ld	a, (#_dizzy_energy)
      0009A4 21r33r02              3101 	ld	hl, #_dizzy_energy_old
      0009A7 96                    3102 	sub	a, (hl)
      0009A8 C8                    3103 	ret	Z
                                   3104 ;src/include/energy.h:121: if (!dizzy_energy) { 
      0009A9 21r32r02              3105 	ld	hl, #_dizzy_energy
      0009AC 7E                    3106 	ld	a, (hl)
      0009AD B7                    3107 	or	a, a
      0009AE C2r8Fr08              3108 	jp	NZ,_show_energy
                                   3109 ;src/include/energy.h:122: if (!death_pause) {
      0009B1 21r1Fr00              3110 	ld	hl, #_death_pause
      0009B4 7E                    3111 	ld	a, (hl)
      0009B5 B7                    3112 	or	a, a
      0009B6 C2r8Fr08              3113 	jp	NZ,_show_energy
                                   3114 ;src/include/energy.h:123: if (dizzy_lives) dizzy_lives--;
      0009B9 21r13r02              3115 	ld	hl, #_dizzy_lives
      0009BC 7E                    3116 	ld	a, (hl)
      0009BD B7                    3117 	or	a, a
      0009BE 28 01                 3118 	jr	Z, 00114$
      0009C0 35                    3119 	dec	(hl)
      0009C1                       3120 00114$:
                                   3121 ;src/include/energy.h:124: show_lives();
      0009C1 CDr15r08              3122 	call	_show_lives
                                   3123 ;src/include/energy.h:125: on_dizzy_die();
      0009C4 CDrFAr07              3124 	call	_on_dizzy_die
                                   3125 ;src/include/energy.h:126: if (!dizzy_lives) game_over = 1;
      0009C7 21r13r02              3126 	ld	hl, #_dizzy_lives
      0009CA 7E                    3127 	ld	a, (hl)
      0009CB B7                    3128 	or	a, a
      0009CC C2r8Fr08              3129 	jp	NZ,_show_energy
      0009CF 21r1Er00              3130 	ld	hl, #_game_over
      0009D2 36 01                 3131 	ld	(hl), #0x01
                                   3132 ;src/include/energy.h:129: show_energy();
                                   3133 ;src/include/energy.h:131: }
      0009D4 C3r8Fr08              3134 	jp	_show_energy
                                   3135 ;src/mushroompie.c:82: WORD get_x_scroll_value(WORD x) {
                                   3136 ;	---------------------------------
                                   3137 ; Function get_x_scroll_value
                                   3138 ; ---------------------------------
      0009D7                       3139 _get_x_scroll_value::
                                   3140 ;src/mushroompie.c:83: __temp_scroll_value = x - 68;
      0009D7 F8 02                 3141 	ldhl	sp,#2
      0009D9 2A                    3142 	ld	a, (hl+)
      0009DA 5F                    3143 	ld	e, a
      0009DB 56                    3144 	ld	d, (hl)
      0009DC 21 44 00              3145 	ld	hl, #0x0044
      0009DF 7B                    3146 	ld	a, e
      0009E0 95                    3147 	sub	a, l
      0009E1 5F                    3148 	ld	e, a
      0009E2 7A                    3149 	ld	a, d
      0009E3 9C                    3150 	sbc	a, h
      0009E4 21r39r02              3151 	ld	hl, #___temp_scroll_value + 1
      0009E7 32                    3152 	ld	(hl-), a
                                   3153 ;src/mushroompie.c:84: if (__temp_scroll_value < 0) return 0; else if (__temp_scroll_value > 80) return 80; 
      0009E8 7B                    3154 	ld	a, e
      0009E9 22                    3155 	ld	(hl+), a
      0009EA CB 7E                 3156 	bit	7, (hl)
      0009EC 28 04                 3157 	jr	Z, 00104$
      0009EE 11 00 00              3158 	ld	de, #0x0000
      0009F1 C9                    3159 	ret
      0009F2                       3160 00104$:
      0009F2 21r38r02              3161 	ld	hl, #___temp_scroll_value
      0009F5 3E 50                 3162 	ld	a, #0x50
      0009F7 96                    3163 	sub	a, (hl)
      0009F8 23                    3164 	inc	hl
      0009F9 3E 00                 3165 	ld	a, #0x00
      0009FB 9E                    3166 	sbc	a, (hl)
      0009FC 3E 00                 3167 	ld	a, #0x00
      0009FE 57                    3168 	ld	d, a
      0009FF CB 7E                 3169 	bit	7, (hl)
      000A01 28 07                 3170 	jr	Z, 00118$
      000A03 CB 7A                 3171 	bit	7, d
      000A05 20 08                 3172 	jr	NZ, 00119$
      000A07 BF                    3173 	cp	a, a
      000A08 18 05                 3174 	jr	00119$
      000A0A                       3175 00118$:
      000A0A CB 7A                 3176 	bit	7, d
      000A0C 28 01                 3177 	jr	Z, 00119$
      000A0E 37                    3178 	scf
      000A0F                       3179 00119$:
      000A0F 30 04                 3180 	jr	NC, 00105$
      000A11 11 50 00              3181 	ld	de, #0x0050
      000A14 C9                    3182 	ret
      000A15                       3183 00105$:
                                   3184 ;src/mushroompie.c:85: return __temp_scroll_value;
      000A15 21r38r02              3185 	ld	hl, #___temp_scroll_value
      000A18 2A                    3186 	ld	a, (hl+)
      000A19 5F                    3187 	ld	e, a
      000A1A 56                    3188 	ld	d, (hl)
                                   3189 ;src/mushroompie.c:86: }
      000A1B C9                    3190 	ret
                                   3191 ;src/mushroompie.c:87: WORD get_y_scroll_value(WORD y) {
                                   3192 ;	---------------------------------
                                   3193 ; Function get_y_scroll_value
                                   3194 ; ---------------------------------
      000A1C                       3195 _get_y_scroll_value::
                                   3196 ;src/mushroompie.c:88: __temp_scroll_value = y - 56;
      000A1C F8 02                 3197 	ldhl	sp,#2
      000A1E 2A                    3198 	ld	a, (hl+)
      000A1F 5F                    3199 	ld	e, a
      000A20 56                    3200 	ld	d, (hl)
      000A21 21 38 00              3201 	ld	hl, #0x0038
      000A24 7B                    3202 	ld	a, e
      000A25 95                    3203 	sub	a, l
      000A26 5F                    3204 	ld	e, a
      000A27 7A                    3205 	ld	a, d
      000A28 9C                    3206 	sbc	a, h
      000A29 21r39r02              3207 	ld	hl, #___temp_scroll_value + 1
      000A2C 32                    3208 	ld	(hl-), a
                                   3209 ;src/mushroompie.c:89: if (__temp_scroll_value < 0) return 0; else if (__temp_scroll_value > 16) return 16;
      000A2D 7B                    3210 	ld	a, e
      000A2E 22                    3211 	ld	(hl+), a
      000A2F CB 7E                 3212 	bit	7, (hl)
      000A31 28 04                 3213 	jr	Z, 00104$
      000A33 11 00 00              3214 	ld	de, #0x0000
      000A36 C9                    3215 	ret
      000A37                       3216 00104$:
      000A37 21r38r02              3217 	ld	hl, #___temp_scroll_value
      000A3A 3E 10                 3218 	ld	a, #0x10
      000A3C 96                    3219 	sub	a, (hl)
      000A3D 23                    3220 	inc	hl
      000A3E 3E 00                 3221 	ld	a, #0x00
      000A40 9E                    3222 	sbc	a, (hl)
      000A41 3E 00                 3223 	ld	a, #0x00
      000A43 57                    3224 	ld	d, a
      000A44 CB 7E                 3225 	bit	7, (hl)
      000A46 28 07                 3226 	jr	Z, 00118$
      000A48 CB 7A                 3227 	bit	7, d
      000A4A 20 08                 3228 	jr	NZ, 00119$
      000A4C BF                    3229 	cp	a, a
      000A4D 18 05                 3230 	jr	00119$
      000A4F                       3231 00118$:
      000A4F CB 7A                 3232 	bit	7, d
      000A51 28 01                 3233 	jr	Z, 00119$
      000A53 37                    3234 	scf
      000A54                       3235 00119$:
      000A54 30 04                 3236 	jr	NC, 00105$
      000A56 11 10 00              3237 	ld	de, #0x0010
      000A59 C9                    3238 	ret
      000A5A                       3239 00105$:
                                   3240 ;src/mushroompie.c:90: return __temp_scroll_value;
      000A5A 21r38r02              3241 	ld	hl, #___temp_scroll_value
      000A5D 2A                    3242 	ld	a, (hl+)
      000A5E 5F                    3243 	ld	e, a
      000A5F 56                    3244 	ld	d, (hl)
                                   3245 ;src/mushroompie.c:91: }
      000A60 C9                    3246 	ret
                                   3247 ;src/mushroompie.c:97: void get_h_coll(WORD x, WORD y) {
                                   3248 ;	---------------------------------
                                   3249 ; Function get_h_coll
                                   3250 ; ---------------------------------
      000A61                       3251 _get_h_coll::
                                   3252 ;src/mushroompie.c:98: tile_pos_x = x >> 3; tile_pos_ox = x & 7;
      000A61 F8 02                 3253 	ldhl	sp,#2
      000A63 2A                    3254 	ld	a, (hl+)
      000A64 4F                    3255 	ld	c, a
      000A65 46                    3256 	ld	b, (hl)
      000A66 CB 28                 3257 	sra	b
      000A68 CB 19                 3258 	rr	c
      000A6A CB 28                 3259 	sra	b
      000A6C CB 19                 3260 	rr	c
      000A6E CB 28                 3261 	sra	b
      000A70 CB 19                 3262 	rr	c
      000A72 21r3Ar02              3263 	ld	hl, #_tile_pos_x
      000A75 71                    3264 	ld	(hl), c
      000A76 F8 02                 3265 	ldhl	sp,	#2
      000A78 7E                    3266 	ld	a, (hl)
      000A79 E6 07                 3267 	and	a, #0x07
      000A7B EAr3Cr02              3268 	ld	(#_tile_pos_ox),a
                                   3269 ;src/mushroompie.c:99: tile_pos_y = y >> 3; tile_pos_oy = y & 7;
      000A7E F8 04                 3270 	ldhl	sp,#4
      000A80 2A                    3271 	ld	a, (hl+)
      000A81 4F                    3272 	ld	c, a
      000A82 46                    3273 	ld	b, (hl)
      000A83 CB 28                 3274 	sra	b
      000A85 CB 19                 3275 	rr	c
      000A87 CB 28                 3276 	sra	b
      000A89 CB 19                 3277 	rr	c
      000A8B CB 28                 3278 	sra	b
      000A8D CB 19                 3279 	rr	c
      000A8F 21r3Br02              3280 	ld	hl, #_tile_pos_y
      000A92 71                    3281 	ld	(hl), c
      000A93 F8 04                 3282 	ldhl	sp,	#4
      000A95 7E                    3283 	ld	a, (hl)
      000A96 E6 07                 3284 	and	a, #0x07
      000A98 EAr3Dr02              3285 	ld	(#_tile_pos_oy),a
                                   3286 ;src/mushroompie.c:100: if (tile_pos_y < room_height) {
      000A9B 21r3Br02              3287 	ld	hl, #_tile_pos_y
      000A9E 7E                    3288 	ld	a, (hl)
      000A9F D6 11                 3289 	sub	a, #0x11
      000AA1 30 5F                 3290 	jr	NC, 00106$
                                   3291 ;src/mushroompie.c:101: __temp_coll_row = current_coll_idx[tile_pos_y];
      000AA3 01rB1r07              3292 	ld	bc, #_current_coll_idx+0
      000AA6 6E                    3293 	ld	l, (hl)
                                   3294 ;	spillPairReg hl
                                   3295 ;	spillPairReg hl
      000AA7 26 00                 3296 	ld	h, #0x00
                                   3297 ;	spillPairReg hl
                                   3298 ;	spillPairReg hl
      000AA9 29                    3299 	add	hl, hl
      000AAA 09                    3300 	add	hl, bc
      000AAB 5D                    3301 	ld	e, l
      000AAC 54                    3302 	ld	d, h
      000AAD 1A                    3303 	ld	a, (de)
      000AAE 21r41r02              3304 	ld	hl, #___temp_coll_row
      000AB1 22                    3305 	ld	(hl+), a
      000AB2 13                    3306 	inc	de
      000AB3 1A                    3307 	ld	a, (de)
      000AB4 77                    3308 	ld	(hl), a
                                   3309 ;src/mushroompie.c:102: collision_buf[0] = __temp_coll_row[tile_pos_x]; collision_buf[1] = __temp_coll_row[tile_pos_x + 1];
      000AB5 01r3Er02              3310 	ld	bc, #_collision_buf+0
      000AB8 FAr41r02              3311 	ld	a, (#___temp_coll_row)
      000ABB 21r3Ar02              3312 	ld	hl, #_tile_pos_x
      000ABE 86                    3313 	add	a, (hl)
      000ABF 5F                    3314 	ld	e, a
      000AC0 FAr42r02              3315 	ld	a, (#___temp_coll_row + 1)
      000AC3 CE 00                 3316 	adc	a, #0x00
      000AC5 57                    3317 	ld	d, a
      000AC6 1A                    3318 	ld	a, (de)
      000AC7 02                    3319 	ld	(bc), a
      000AC8 21r3Ar02              3320 	ld	hl, #_tile_pos_x
      000ACB 5E                    3321 	ld	e, (hl)
      000ACC 16 00                 3322 	ld	d, #0x00
      000ACE 13                    3323 	inc	de
      000ACF 7B                    3324 	ld	a, e
      000AD0 21r41r02              3325 	ld	hl, #___temp_coll_row
      000AD3 86                    3326 	add	a, (hl)
      000AD4 23                    3327 	inc	hl
      000AD5 5F                    3328 	ld	e, a
      000AD6 7A                    3329 	ld	a, d
      000AD7 8E                    3330 	adc	a, (hl)
      000AD8 57                    3331 	ld	d, a
      000AD9 1A                    3332 	ld	a, (de)
      000ADA EAr3Fr02              3333 	ld	(#(_collision_buf + 1)),a
                                   3334 ;src/mushroompie.c:103: if ((tile_pos_ox) && (tile_pos_x < room_width - 2)) collision_buf[2] = __temp_coll_row[tile_pos_x + 2]; else collision_buf[2] = 0x00;
      000ADD 03                    3335 	inc	bc
      000ADE 03                    3336 	inc	bc
      000ADF FAr3Cr02              3337 	ld	a, (#_tile_pos_ox)
      000AE2 B7                    3338 	or	a, a
      000AE3 28 1A                 3339 	jr	Z, 00102$
      000AE5 21r3Ar02              3340 	ld	hl, #_tile_pos_x
      000AE8 7E                    3341 	ld	a, (hl)
      000AE9 D6 1C                 3342 	sub	a, #0x1c
      000AEB 30 12                 3343 	jr	NC, 00102$
      000AED 5E                    3344 	ld	e, (hl)
      000AEE 16 00                 3345 	ld	d, #0x00
      000AF0 13                    3346 	inc	de
      000AF1 13                    3347 	inc	de
      000AF2 7B                    3348 	ld	a, e
      000AF3 21r41r02              3349 	ld	hl, #___temp_coll_row
      000AF6 86                    3350 	add	a, (hl)
      000AF7 23                    3351 	inc	hl
      000AF8 5F                    3352 	ld	e, a
      000AF9 7A                    3353 	ld	a, d
      000AFA 8E                    3354 	adc	a, (hl)
      000AFB 57                    3355 	ld	d, a
      000AFC 1A                    3356 	ld	a, (de)
      000AFD 02                    3357 	ld	(bc), a
      000AFE C9                    3358 	ret
      000AFF                       3359 00102$:
      000AFF AF                    3360 	xor	a, a
      000B00 02                    3361 	ld	(bc), a
      000B01 C9                    3362 	ret
      000B02                       3363 00106$:
                                   3364 ;src/mushroompie.c:104: } else { collision_buf[0] = 0x00; collision_buf[1] = 0x00; collision_buf[2] = 0x00; }
      000B02 01r3Er02              3365 	ld	bc, #_collision_buf+0
      000B05 AF                    3366 	xor	a, a
      000B06 02                    3367 	ld	(bc), a
      000B07 21r3Fr02              3368 	ld	hl, #(_collision_buf + 1)
      000B0A 36 00                 3369 	ld	(hl), #0x00
      000B0C 03                    3370 	inc	bc
      000B0D 03                    3371 	inc	bc
      000B0E AF                    3372 	xor	a, a
      000B0F 02                    3373 	ld	(bc), a
                                   3374 ;src/mushroompie.c:105: }
      000B10 C9                    3375 	ret
                                   3376 ;src/mushroompie.c:106: void get_v_coll(WORD x, WORD y) {
                                   3377 ;	---------------------------------
                                   3378 ; Function get_v_coll
                                   3379 ; ---------------------------------
      000B11                       3380 _get_v_coll::
                                   3381 ;src/mushroompie.c:107: tile_pos_x = x >> 3; 
      000B11 F8 02                 3382 	ldhl	sp,#2
      000B13 2A                    3383 	ld	a, (hl+)
      000B14 4F                    3384 	ld	c, a
      000B15 46                    3385 	ld	b, (hl)
      000B16 CB 28                 3386 	sra	b
      000B18 CB 19                 3387 	rr	c
      000B1A CB 28                 3388 	sra	b
      000B1C CB 19                 3389 	rr	c
      000B1E CB 28                 3390 	sra	b
      000B20 CB 19                 3391 	rr	c
      000B22 21r3Ar02              3392 	ld	hl, #_tile_pos_x
      000B25 71                    3393 	ld	(hl), c
                                   3394 ;src/mushroompie.c:108: if (tile_pos_x < room_width) {
      000B26 7E                    3395 	ld	a, (hl)
      000B27 D6 1E                 3396 	sub	a, #0x1e
      000B29 30 66                 3397 	jr	NC, 00108$
                                   3398 ;src/mushroompie.c:109: tile_pos_y = y >> 3;
      000B2B F8 04                 3399 	ldhl	sp,#4
      000B2D 2A                    3400 	ld	a, (hl+)
      000B2E 4F                    3401 	ld	c, a
      000B2F 46                    3402 	ld	b, (hl)
      000B30 CB 28                 3403 	sra	b
      000B32 CB 19                 3404 	rr	c
      000B34 CB 28                 3405 	sra	b
      000B36 CB 19                 3406 	rr	c
      000B38 CB 28                 3407 	sra	b
      000B3A CB 19                 3408 	rr	c
      000B3C 21r3Br02              3409 	ld	hl, #_tile_pos_y
      000B3F 71                    3410 	ld	(hl), c
                                   3411 ;src/mushroompie.c:110: if (tile_pos_y < room_height) { 
      000B40 7E                    3412 	ld	a, (hl)
      000B41 D6 11                 3413 	sub	a, #0x11
      000B43 30 1A                 3414 	jr	NC, 00102$
                                   3415 ;src/mushroompie.c:111: collision_buf[0] = current_coll_idx[tile_pos_y][tile_pos_x]; 
      000B45 6E                    3416 	ld	l, (hl)
                                   3417 ;	spillPairReg hl
                                   3418 ;	spillPairReg hl
      000B46 26 00                 3419 	ld	h, #0x00
                                   3420 ;	spillPairReg hl
                                   3421 ;	spillPairReg hl
      000B48 29                    3422 	add	hl, hl
      000B49 11rB1r07              3423 	ld	de, #_current_coll_idx
      000B4C 19                    3424 	add	hl, de
      000B4D 2A                    3425 	ld	a, (hl+)
      000B4E 4F                    3426 	ld	c, a
      000B4F 46                    3427 	ld	b, (hl)
      000B50 79                    3428 	ld	a, c
      000B51 21r3Ar02              3429 	ld	hl, #_tile_pos_x
      000B54 86                    3430 	add	a, (hl)
      000B55 4F                    3431 	ld	c, a
      000B56 30 01                 3432 	jr	NC, 00127$
      000B58 04                    3433 	inc	b
      000B59                       3434 00127$:
      000B59 0A                    3435 	ld	a, (bc)
      000B5A EAr3Er02              3436 	ld	(#_collision_buf),a
      000B5D 18 0A                 3437 	jr	00103$
      000B5F                       3438 00102$:
                                   3439 ;src/mushroompie.c:113: collision_buf[0] = 0x00; 
      000B5F 21r3Er02              3440 	ld	hl, #_collision_buf
      000B62 36 00                 3441 	ld	(hl), #0x00
                                   3442 ;src/mushroompie.c:114: tile_pos_y = 0; 
      000B64 21r3Br02              3443 	ld	hl, #_tile_pos_y
      000B67 36 00                 3444 	ld	(hl), #0x00
      000B69                       3445 00103$:
                                   3446 ;src/mushroompie.c:116: if (tile_pos_y < room_height - 1) collision_buf[1] = current_coll_idx[tile_pos_y + 1][tile_pos_x]; else collision_buf[1] = 0x00;
      000B69 FAr3Br02              3447 	ld	a, (#_tile_pos_y)
      000B6C FE 10                 3448 	cp	a,#0x10
      000B6E 30 1B                 3449 	jr	NC, 00105$
      000B70 3C                    3450 	inc	a
      000B71 6F                    3451 	ld	l, a
                                   3452 ;	spillPairReg hl
                                   3453 ;	spillPairReg hl
      000B72 07                    3454 	rlca
      000B73 9F                    3455 	sbc	a, a
      000B74 67                    3456 	ld	h, a
      000B75 29                    3457 	add	hl, hl
      000B76 11rB1r07              3458 	ld	de, #_current_coll_idx
      000B79 19                    3459 	add	hl, de
      000B7A 2A                    3460 	ld	a, (hl+)
      000B7B 4F                    3461 	ld	c, a
      000B7C 46                    3462 	ld	b, (hl)
      000B7D 79                    3463 	ld	a, c
      000B7E 21r3Ar02              3464 	ld	hl, #_tile_pos_x
      000B81 86                    3465 	add	a, (hl)
      000B82 4F                    3466 	ld	c, a
      000B83 30 01                 3467 	jr	NC, 00128$
      000B85 04                    3468 	inc	b
      000B86                       3469 00128$:
      000B86 0A                    3470 	ld	a, (bc)
      000B87 EAr3Fr02              3471 	ld	(#(_collision_buf + 1)),a
      000B8A C9                    3472 	ret
      000B8B                       3473 00105$:
      000B8B 21r3Fr02              3474 	ld	hl, #(_collision_buf + 1)
      000B8E 36 00                 3475 	ld	(hl), #0x00
      000B90 C9                    3476 	ret
      000B91                       3477 00108$:
                                   3478 ;src/mushroompie.c:117: } else { collision_buf[0] = 0x00; collision_buf[1] = 0x00;}
      000B91 01r3Er02              3479 	ld	bc, #_collision_buf+0
      000B94 AF                    3480 	xor	a, a
      000B95 02                    3481 	ld	(bc), a
      000B96 03                    3482 	inc	bc
      000B97 AF                    3483 	xor	a, a
      000B98 02                    3484 	ld	(bc), a
                                   3485 ;src/mushroompie.c:118: }
      000B99 C9                    3486 	ret
                                   3487 ;src/mushroompie.c:119: void get_coll(WORD x, WORD y) {
                                   3488 ;	---------------------------------
                                   3489 ; Function get_coll
                                   3490 ; ---------------------------------
      000B9A                       3491 _get_coll::
                                   3492 ;src/mushroompie.c:120: __temp_i = ((x > 0)?(x >> 3):0);
      000B9A F8 02                 3493 	ldhl	sp,	#2
      000B9C AF                    3494 	xor	a, a
      000B9D 96                    3495 	sub	a, (hl)
      000B9E 23                    3496 	inc	hl
      000B9F 3E 00                 3497 	ld	a, #0x00
      000BA1 9E                    3498 	sbc	a, (hl)
      000BA2 3E 00                 3499 	ld	a, #0x00
      000BA4 57                    3500 	ld	d, a
      000BA5 CB 7E                 3501 	bit	7, (hl)
      000BA7 28 07                 3502 	jr	Z, 00178$
      000BA9 CB 7A                 3503 	bit	7, d
      000BAB 20 08                 3504 	jr	NZ, 00179$
      000BAD BF                    3505 	cp	a, a
      000BAE 18 05                 3506 	jr	00179$
      000BB0                       3507 00178$:
      000BB0 CB 7A                 3508 	bit	7, d
      000BB2 28 01                 3509 	jr	Z, 00179$
      000BB4 37                    3510 	scf
      000BB5                       3511 00179$:
      000BB5 30 13                 3512 	jr	NC, 00119$
      000BB7 F8 02                 3513 	ldhl	sp,#2
      000BB9 2A                    3514 	ld	a, (hl+)
      000BBA 4F                    3515 	ld	c, a
      000BBB 46                    3516 	ld	b, (hl)
      000BBC CB 28                 3517 	sra	b
      000BBE CB 19                 3518 	rr	c
      000BC0 CB 28                 3519 	sra	b
      000BC2 CB 19                 3520 	rr	c
      000BC4 CB 28                 3521 	sra	b
      000BC6 CB 19                 3522 	rr	c
      000BC8 18 03                 3523 	jr	00120$
      000BCA                       3524 00119$:
      000BCA 01 00 00              3525 	ld	bc, #0x0000
      000BCD                       3526 00120$:
      000BCD 21r0Br02              3527 	ld	hl, #___temp_i
      000BD0 71                    3528 	ld	(hl), c
                                   3529 ;src/mushroompie.c:121: __temp_j = (x + 16) >> 3; if (__temp_j >= room_width) __temp_j = room_width - 1;
      000BD1 F8 02                 3530 	ldhl	sp,#2
      000BD3 2A                    3531 	ld	a, (hl+)
      000BD4 5F                    3532 	ld	e, a
      000BD5 56                    3533 	ld	d, (hl)
      000BD6 21 10 00              3534 	ld	hl, #0x0010
      000BD9 19                    3535 	add	hl, de
      000BDA 4D                    3536 	ld	c, l
      000BDB 44                    3537 	ld	b, h
      000BDC CB 28                 3538 	sra	b
      000BDE CB 19                 3539 	rr	c
      000BE0 CB 28                 3540 	sra	b
      000BE2 CB 19                 3541 	rr	c
      000BE4 CB 28                 3542 	sra	b
      000BE6 CB 19                 3543 	rr	c
      000BE8 21r0Cr02              3544 	ld	hl, #___temp_j
      000BEB 71                    3545 	ld	(hl), c
      000BEC 7E                    3546 	ld	a, (hl)
      000BED D6 1E                 3547 	sub	a, #0x1e
      000BEF 38 02                 3548 	jr	C, 00102$
      000BF1 36 1D                 3549 	ld	(hl), #0x1d
      000BF3                       3550 00102$:
                                   3551 ;src/mushroompie.c:122: __temp_k = ((y > 0)?(y >> 3):0);
      000BF3 F8 04                 3552 	ldhl	sp,	#4
      000BF5 AF                    3553 	xor	a, a
      000BF6 96                    3554 	sub	a, (hl)
      000BF7 23                    3555 	inc	hl
      000BF8 3E 00                 3556 	ld	a, #0x00
      000BFA 9E                    3557 	sbc	a, (hl)
      000BFB 3E 00                 3558 	ld	a, #0x00
      000BFD 57                    3559 	ld	d, a
      000BFE CB 7E                 3560 	bit	7, (hl)
      000C00 28 07                 3561 	jr	Z, 00180$
      000C02 CB 7A                 3562 	bit	7, d
      000C04 20 08                 3563 	jr	NZ, 00181$
      000C06 BF                    3564 	cp	a, a
      000C07 18 05                 3565 	jr	00181$
      000C09                       3566 00180$:
      000C09 CB 7A                 3567 	bit	7, d
      000C0B 28 01                 3568 	jr	Z, 00181$
      000C0D 37                    3569 	scf
      000C0E                       3570 00181$:
      000C0E 30 13                 3571 	jr	NC, 00121$
      000C10 F8 04                 3572 	ldhl	sp,#4
      000C12 2A                    3573 	ld	a, (hl+)
      000C13 4F                    3574 	ld	c, a
      000C14 46                    3575 	ld	b, (hl)
      000C15 CB 28                 3576 	sra	b
      000C17 CB 19                 3577 	rr	c
      000C19 CB 28                 3578 	sra	b
      000C1B CB 19                 3579 	rr	c
      000C1D CB 28                 3580 	sra	b
      000C1F CB 19                 3581 	rr	c
      000C21 18 03                 3582 	jr	00122$
      000C23                       3583 00121$:
      000C23 01 00 00              3584 	ld	bc, #0x0000
      000C26                       3585 00122$:
      000C26 21r0Dr02              3586 	ld	hl, #___temp_k
      000C29 71                    3587 	ld	(hl), c
                                   3588 ;src/mushroompie.c:123: __temp_l = (y + 16) >> 3; if (__temp_l >= room_height) __temp_l = room_height - 1;
      000C2A F8 04                 3589 	ldhl	sp,#4
      000C2C 2A                    3590 	ld	a, (hl+)
      000C2D 5F                    3591 	ld	e, a
      000C2E 56                    3592 	ld	d, (hl)
      000C2F 21 10 00              3593 	ld	hl, #0x0010
      000C32 19                    3594 	add	hl, de
      000C33 4D                    3595 	ld	c, l
      000C34 44                    3596 	ld	b, h
      000C35 CB 28                 3597 	sra	b
      000C37 CB 19                 3598 	rr	c
      000C39 CB 28                 3599 	sra	b
      000C3B CB 19                 3600 	rr	c
      000C3D CB 28                 3601 	sra	b
      000C3F CB 19                 3602 	rr	c
      000C41 21r0Er02              3603 	ld	hl, #___temp_l
      000C44 71                    3604 	ld	(hl), c
      000C45 7E                    3605 	ld	a, (hl)
      000C46 D6 11                 3606 	sub	a, #0x11
      000C48 38 02                 3607 	jr	C, 00104$
      000C4A 36 10                 3608 	ld	(hl), #0x10
      000C4C                       3609 00104$:
                                   3610 ;src/mushroompie.c:125: collision_buf[0] = 0; collision_buf[1] = 0;
      000C4C 01r3Er02              3611 	ld	bc, #_collision_buf+0
      000C4F AF                    3612 	xor	a, a
      000C50 02                    3613 	ld	(bc), a
      000C51 21r3Fr02              3614 	ld	hl, #(_collision_buf + 1)
      000C54 36 00                 3615 	ld	(hl), #0x00
                                   3616 ;src/mushroompie.c:126: for (__temp_k = __temp_k; __temp_k <= __temp_l; __temp_k++) {
      000C56                       3617 00115$:
      000C56 FAr0Er02              3618 	ld	a, (#___temp_l)
      000C59 21r0Dr02              3619 	ld	hl, #___temp_k
      000C5C 96                    3620 	sub	a, (hl)
      000C5D D8                    3621 	ret	C
                                   3622 ;src/mushroompie.c:127: __temp_coll_row = current_coll_idx[__temp_k];
      000C5E 6E                    3623 	ld	l, (hl)
                                   3624 ;	spillPairReg hl
                                   3625 ;	spillPairReg hl
      000C5F 26 00                 3626 	ld	h, #0x00
                                   3627 ;	spillPairReg hl
                                   3628 ;	spillPairReg hl
      000C61 29                    3629 	add	hl, hl
      000C62 11rB1r07              3630 	ld	de, #_current_coll_idx
      000C65 19                    3631 	add	hl, de
      000C66 5D                    3632 	ld	e, l
      000C67 54                    3633 	ld	d, h
      000C68 1A                    3634 	ld	a, (de)
      000C69 21r41r02              3635 	ld	hl, #___temp_coll_row
      000C6C 22                    3636 	ld	(hl+), a
      000C6D 13                    3637 	inc	de
      000C6E 1A                    3638 	ld	a, (de)
      000C6F 77                    3639 	ld	(hl), a
                                   3640 ;src/mushroompie.c:128: for (__temp_m = __temp_i; __temp_m <= __temp_j; __temp_m++) {
      000C70 FAr0Br02              3641 	ld	a, (#___temp_i)
      000C73 EAr0Fr02              3642 	ld	(#___temp_m),a
      000C76                       3643 00112$:
      000C76 FAr0Cr02              3644 	ld	a, (#___temp_j)
      000C79 21r0Fr02              3645 	ld	hl, #___temp_m
      000C7C 96                    3646 	sub	a, (hl)
      000C7D 38 33                 3647 	jr	C, 00116$
                                   3648 ;src/mushroompie.c:129: switch (__temp_coll_row[__temp_m]) {
      000C7F FAr41r02              3649 	ld	a, (#___temp_coll_row)
      000C82 21r0Fr02              3650 	ld	hl, #___temp_m
      000C85 86                    3651 	add	a, (hl)
      000C86 5F                    3652 	ld	e, a
      000C87 FAr42r02              3653 	ld	a, (#___temp_coll_row + 1)
      000C8A CE 00                 3654 	adc	a, #0x00
      000C8C 57                    3655 	ld	d, a
      000C8D 1A                    3656 	ld	a, (de)
      000C8E FE 04                 3657 	cp	a, #0x04
      000C90 28 0A                 3658 	jr	Z, 00105$
      000C92 FE 06                 3659 	cp	a, #0x06
      000C94 28 0D                 3660 	jr	Z, 00106$
      000C96 D6 07                 3661 	sub	a, #0x07
      000C98 28 0E                 3662 	jr	Z, 00107$
      000C9A 18 10                 3663 	jr	00113$
                                   3664 ;src/mushroompie.c:130: case 4 : collision_buf[1] = 4; break;
      000C9C                       3665 00105$:
      000C9C 21r3Fr02              3666 	ld	hl, #(_collision_buf + 1)
      000C9F 36 04                 3667 	ld	(hl), #0x04
      000CA1 18 09                 3668 	jr	00113$
                                   3669 ;src/mushroompie.c:131: case 6 : collision_buf[0] = 6; break;
      000CA3                       3670 00106$:
      000CA3 3E 06                 3671 	ld	a, #0x06
      000CA5 02                    3672 	ld	(bc), a
      000CA6 18 04                 3673 	jr	00113$
                                   3674 ;src/mushroompie.c:132: case 7 : collision_buf[0] = 7; return;
      000CA8                       3675 00107$:
      000CA8 3E 07                 3676 	ld	a, #0x07
      000CAA 02                    3677 	ld	(bc), a
      000CAB C9                    3678 	ret
                                   3679 ;src/mushroompie.c:133: }
      000CAC                       3680 00113$:
                                   3681 ;src/mushroompie.c:128: for (__temp_m = __temp_i; __temp_m <= __temp_j; __temp_m++) {
      000CAC 21r0Fr02              3682 	ld	hl, #___temp_m
      000CAF 34                    3683 	inc	(hl)
      000CB0 18 C4                 3684 	jr	00112$
      000CB2                       3685 00116$:
                                   3686 ;src/mushroompie.c:126: for (__temp_k = __temp_k; __temp_k <= __temp_l; __temp_k++) {
      000CB2 21r0Dr02              3687 	ld	hl, #___temp_k
      000CB5 34                    3688 	inc	(hl)
                                   3689 ;src/mushroompie.c:136: }
      000CB6 18 9E                 3690 	jr	00115$
                                   3691 ;src/mushroompie.c:138: void set_enemies_position() {
                                   3692 ;	---------------------------------
                                   3693 ; Function set_enemies_position
                                   3694 ; ---------------------------------
      000CB8                       3695 _set_enemies_position::
                                   3696 ;src/mushroompie.c:139: if (current_room) {
      000CB8 21r0Fr00              3697 	ld	hl, #_current_room + 1
      000CBB 3A                    3698 	ld	a, (hl-)
      000CBC B6                    3699 	or	a, (hl)
      000CBD C8                    3700 	ret	Z
                                   3701 ;src/mushroompie.c:140: if (current_room->room_actions) current_room->room_actions();
      000CBE 2A                    3702 	ld	a, (hl+)
      000CBF 4F                    3703 	ld	c, a
      000CC0 46                    3704 	ld	b, (hl)
      000CC1 21 0B 00              3705 	ld	hl, #0x000b
      000CC4 09                    3706 	add	hl, bc
      000CC5 2A                    3707 	ld	a, (hl+)
      000CC6 4F                    3708 	ld	c, a
      000CC7 66                    3709 	ld	h, (hl)
                                   3710 ;	spillPairReg hl
      000CC8 7C                    3711 	ld	a, h
      000CC9 B1                    3712 	or	a, c
      000CCA 28 04                 3713 	jr	Z, 00102$
      000CCC 69                    3714 	ld	l, c
                                   3715 ;	spillPairReg hl
                                   3716 ;	spillPairReg hl
      000CCD CDr00r00              3717 	call	___sdcc_call_hl
      000CD0                       3718 00102$:
      000CD0 21r0Er00              3719 	ld	hl, #_current_room
      000CD3 2A                    3720 	ld	a, (hl+)
      000CD4 4F                    3721 	ld	c, a
      000CD5 46                    3722 	ld	b, (hl)
                                   3723 ;src/mushroompie.c:141: if (current_room->room_animations) current_room->room_animations();
      000CD6 21 0D 00              3724 	ld	hl, #0x000d
      000CD9 09                    3725 	add	hl, bc
      000CDA 2A                    3726 	ld	a, (hl+)
      000CDB 4F                    3727 	ld	c, a
      000CDC 66                    3728 	ld	h, (hl)
                                   3729 ;	spillPairReg hl
      000CDD 7C                    3730 	ld	a, h
      000CDE B1                    3731 	or	a, c
      000CDF C8                    3732 	ret	Z
      000CE0 69                    3733 	ld	l, c
                                   3734 ;	spillPairReg hl
                                   3735 ;	spillPairReg hl
                                   3736 ;src/mushroompie.c:143: }
      000CE1 E9                    3737 	jp	(hl)
                                   3738 ;src/mushroompie.c:146: void init_dizzy() {
                                   3739 ;	---------------------------------
                                   3740 ; Function init_dizzy
                                   3741 ; ---------------------------------
      000CE2                       3742 _init_dizzy::
                                   3743 ;src/mushroompie.c:147: for(__temp_i = 0; __temp_i < dizzy_sprite_count; __temp_i++)
      000CE2 21r0Br02              3744 	ld	hl, #___temp_i
      000CE5 36 00                 3745 	ld	(hl), #0x00
      000CE7                       3746 00103$:
                                   3747 ;src/mushroompie.c:148: set_sprite_tile(__temp_i, dizzy_sprites_tileoffset + __temp_i);
      000CE7 21r0Br02              3748 	ld	hl, #___temp_i
      000CEA 4E                    3749 	ld	c, (hl)
                                   3750 ;c:/gb/gbdk/include/gb/gb.h:1185: shadow_OAM[nb].tile=tile;
      000CEB 11r00r00              3751 	ld	de, #_shadow_OAM+0
      000CEE 69                    3752 	ld	l, c
                                   3753 ;	spillPairReg hl
                                   3754 ;	spillPairReg hl
      000CEF 26 00                 3755 	ld	h, #0x00
                                   3756 ;	spillPairReg hl
                                   3757 ;	spillPairReg hl
      000CF1 29                    3758 	add	hl, hl
      000CF2 29                    3759 	add	hl, hl
      000CF3 19                    3760 	add	hl, de
      000CF4 23                    3761 	inc	hl
      000CF5 23                    3762 	inc	hl
      000CF6 71                    3763 	ld	(hl), c
                                   3764 ;src/mushroompie.c:147: for(__temp_i = 0; __temp_i < dizzy_sprite_count; __temp_i++)
      000CF7 21r0Br02              3765 	ld	hl, #___temp_i
      000CFA 34                    3766 	inc	(hl)
      000CFB 7E                    3767 	ld	a, (hl)
      000CFC D6 09                 3768 	sub	a, #0x09
      000CFE 38 E7                 3769 	jr	C, 00103$
                                   3770 ;src/mushroompie.c:149: }
      000D00 C9                    3771 	ret
                                   3772 ;src/mushroompie.c:150: void set_dizzy_animdata(const s_data * sprite) {
                                   3773 ;	---------------------------------
                                   3774 ; Function set_dizzy_animdata
                                   3775 ; ---------------------------------
      000D01                       3776 _set_dizzy_animdata::
                                   3777 ;src/mushroompie.c:151: push_bank(2); 
      000D01 3E 02                 3778 	ld	a, #0x02
      000D03 F5                    3779 	push	af
      000D04 33                    3780 	inc	sp
      000D05 CDr00r00              3781 	call	_push_bank
      000D08 33                    3782 	inc	sp
                                   3783 ;src/mushroompie.c:152: set_sprite_data(dizzy_sprites_tileoffset, dizzy_sprite_count, sprite->data); 
      000D09 F8 02                 3784 	ldhl	sp,	#2
      000D0B 2A                    3785 	ld	a, (hl+)
      000D0C 4F                    3786 	ld	c, a
      000D0D 46                    3787 	ld	b, (hl)
      000D0E 03                    3788 	inc	bc
      000D0F C5                    3789 	push	bc
      000D10 3E 09                 3790 	ld	a, #0x09
      000D12 F5                    3791 	push	af
      000D13 33                    3792 	inc	sp
      000D14 AF                    3793 	xor	a, a
      000D15 F5                    3794 	push	af
      000D16 33                    3795 	inc	sp
      000D17 CDr00r00              3796 	call	_set_sprite_data
      000D1A E8 04                 3797 	add	sp, #4
                                   3798 ;src/mushroompie.c:153: pop_bank();
                                   3799 ;src/mushroompie.c:154: }
      000D1C C3r00r00              3800 	jp	_pop_bank
                                   3801 ;src/mushroompie.c:156: void set_dizzy_position() {
                                   3802 ;	---------------------------------
                                   3803 ; Function set_dizzy_position
                                   3804 ; ---------------------------------
      000D1F                       3805 _set_dizzy_position::
                                   3806 ;src/mushroompie.c:157: if ((dizzy_old_pos_x != dizzy_x) || (dizzy_old_pos_y != dizzy_y)) {
      000D1F FAr22r00              3807 	ld	a, (#_dizzy_old_pos_x)
      000D22 21r10r00              3808 	ld	hl, #_dizzy_x
      000D25 96                    3809 	sub	a, (hl)
      000D26 20 1A                 3810 	jr	NZ, 00101$
      000D28 FAr23r00              3811 	ld	a, (#_dizzy_old_pos_x + 1)
      000D2B 21r11r00              3812 	ld	hl, #_dizzy_x + 1
      000D2E 96                    3813 	sub	a, (hl)
      000D2F 20 11                 3814 	jr	NZ, 00101$
      000D31 FAr24r00              3815 	ld	a, (#_dizzy_old_pos_y)
      000D34 21r12r00              3816 	ld	hl, #_dizzy_y
      000D37 96                    3817 	sub	a, (hl)
      000D38 20 08                 3818 	jr	NZ, 00113$
      000D3A FAr25r00              3819 	ld	a, (#_dizzy_old_pos_y + 1)
      000D3D 21r13r00              3820 	ld	hl, #_dizzy_y + 1
      000D40 96                    3821 	sub	a, (hl)
      000D41 C8                    3822 	ret	Z
      000D42                       3823 00113$:
      000D42                       3824 00101$:
                                   3825 ;src/mushroompie.c:158: bkg_scroll_x_target = get_x_scroll_value(dizzy_x); 
      000D42 21r10r00              3826 	ld	hl, #_dizzy_x
      000D45 2A                    3827 	ld	a, (hl+)
      000D46 5F                    3828 	ld	e, a
      000D47 56                    3829 	ld	d, (hl)
      000D48 D5                    3830 	push	de
      000D49 CDrD7r09              3831 	call	_get_x_scroll_value
      000D4C E1                    3832 	pop	hl
      000D4D 21r36r02              3833 	ld	hl, #_bkg_scroll_x_target
      000D50 73                    3834 	ld	(hl), e
                                   3835 ;src/mushroompie.c:159: bkg_scroll_y_target = get_y_scroll_value(dizzy_y);
      000D51 21r12r00              3836 	ld	hl, #_dizzy_y
      000D54 2A                    3837 	ld	a, (hl+)
      000D55 5F                    3838 	ld	e, a
      000D56 56                    3839 	ld	d, (hl)
      000D57 D5                    3840 	push	de
      000D58 CDr1Cr0A              3841 	call	_get_y_scroll_value
      000D5B E1                    3842 	pop	hl
      000D5C 21r37r02              3843 	ld	hl, #_bkg_scroll_y_target
      000D5F 73                    3844 	ld	(hl), e
                                   3845 ;src/mushroompie.c:160: multiple_move_sprites(0, dizzy_sprite_count, dizzy_x - bkg_scroll_x_target, dizzy_y - bkg_scroll_y_target, (unsigned char *)dizzy_offsets);
      000D60 FAr12r00              3846 	ld	a, (#_dizzy_y)
      000D63 21r37r02              3847 	ld	hl, #_bkg_scroll_y_target
      000D66 4E                    3848 	ld	c, (hl)
      000D67 91                    3849 	sub	a, c
      000D68 47                    3850 	ld	b, a
      000D69 FAr10r00              3851 	ld	a, (#_dizzy_x)
      000D6C 21r36r02              3852 	ld	hl, #_bkg_scroll_x_target
      000D6F 4E                    3853 	ld	c, (hl)
      000D70 91                    3854 	sub	a, c
      000D71 11r39r04              3855 	ld	de, #_dizzy_offsets
      000D74 D5                    3856 	push	de
      000D75 C5                    3857 	push	bc
      000D76 33                    3858 	inc	sp
      000D77 67                    3859 	ld	h, a
      000D78 2E 09                 3860 	ld	l, #0x09
      000D7A E5                    3861 	push	hl
      000D7B AF                    3862 	xor	a, a
      000D7C F5                    3863 	push	af
      000D7D 33                    3864 	inc	sp
      000D7E CDr4Cr03              3865 	call	_multiple_move_sprites
      000D81 E8 06                 3866 	add	sp, #6
                                   3867 ;src/mushroompie.c:161: dizzy_old_pos_x = dizzy_x; dizzy_old_pos_y = dizzy_y;
      000D83 FAr10r00              3868 	ld	a, (#_dizzy_x)
      000D86 EAr22r00              3869 	ld	(#_dizzy_old_pos_x),a
      000D89 FAr11r00              3870 	ld	a, (#_dizzy_x + 1)
      000D8C EAr23r00              3871 	ld	(#_dizzy_old_pos_x + 1),a
      000D8F FAr12r00              3872 	ld	a, (#_dizzy_y)
      000D92 EAr24r00              3873 	ld	(#_dizzy_old_pos_y),a
      000D95 FAr13r00              3874 	ld	a, (#_dizzy_y + 1)
      000D98 EAr25r00              3875 	ld	(#_dizzy_old_pos_y + 1),a
                                   3876 ;src/mushroompie.c:163: }    
      000D9B C9                    3877 	ret
                                   3878 ;src/mushroompie.c:165: void check_dizzy_collisions() {
                                   3879 ;	---------------------------------
                                   3880 ; Function check_dizzy_collisions
                                   3881 ; ---------------------------------
      000D9C                       3882 _check_dizzy_collisions::
      000D9C E8 FC                 3883 	add	sp, #-4
                                   3884 ;src/mushroompie.c:167: if (current_room->room_h_coll) current_room->room_h_coll(dizzy_x, dizzy_y + 21); else get_h_coll(dizzy_x, dizzy_y + 21);
      000D9E 21r0Er00              3885 	ld	hl, #_current_room
      000DA1 2A                    3886 	ld	a, (hl+)
      000DA2 4F                    3887 	ld	c, a
      000DA3 46                    3888 	ld	b, (hl)
      000DA4 21 0F 00              3889 	ld	hl, #0x000f
      000DA7 09                    3890 	add	hl, bc
      000DA8 2A                    3891 	ld	a, (hl+)
      000DA9 4F                    3892 	ld	c, a
      000DAA 46                    3893 	ld	b, (hl)
                                   3894 ;src/mushroompie.c:166: if (delta_y >= 0) {
      000DAB FAr19r00              3895 	ld	a, (#_delta_y + 1)
      000DAE CB 7F                 3896 	bit	7, a
      000DB0 C2r57r0F              3897 	jp	NZ, 00161$
                                   3898 ;src/mushroompie.c:167: if (current_room->room_h_coll) current_room->room_h_coll(dizzy_x, dizzy_y + 21); else get_h_coll(dizzy_x, dizzy_y + 21);
      000DB3 21r12r00              3899 	ld	hl, #_dizzy_y
      000DB6 2A                    3900 	ld	a, (hl+)
      000DB7 C6 15                 3901 	add	a, #0x15
      000DB9 5F                    3902 	ld	e, a
      000DBA 7E                    3903 	ld	a, (hl)
      000DBB CE 00                 3904 	adc	a, #0x00
      000DBD 57                    3905 	ld	d, a
      000DBE 78                    3906 	ld	a, b
      000DBF B1                    3907 	or	a, c
      000DC0 28 11                 3908 	jr	Z, 00102$
      000DC2 D5                    3909 	push	de
      000DC3 21r10r00              3910 	ld	hl, #_dizzy_x
      000DC6 2A                    3911 	ld	a, (hl+)
      000DC7 5F                    3912 	ld	e, a
      000DC8 56                    3913 	ld	d, (hl)
      000DC9 D5                    3914 	push	de
      000DCA 69                    3915 	ld	l, c
                                   3916 ;	spillPairReg hl
                                   3917 ;	spillPairReg hl
      000DCB 60                    3918 	ld	h, b
                                   3919 ;	spillPairReg hl
                                   3920 ;	spillPairReg hl
      000DCC CDr00r00              3921 	call	___sdcc_call_hl
      000DCF E8 04                 3922 	add	sp, #4
      000DD1 18 0D                 3923 	jr	00103$
      000DD3                       3924 00102$:
      000DD3 D5                    3925 	push	de
      000DD4 21r10r00              3926 	ld	hl, #_dizzy_x
      000DD7 2A                    3927 	ld	a, (hl+)
      000DD8 5F                    3928 	ld	e, a
      000DD9 56                    3929 	ld	d, (hl)
      000DDA D5                    3930 	push	de
      000DDB CDr61r0A              3931 	call	_get_h_coll
      000DDE E8 04                 3932 	add	sp, #4
      000DE0                       3933 00103$:
                                   3934 ;src/mushroompie.c:169: if ((collision_buf[0] == 1) || (collision_buf[1] == 1) || (collision_buf[2] == 1)) {
      000DE0 21r3Er02              3935 	ld	hl, #_collision_buf
      000DE3 4E                    3936 	ld	c, (hl)
      000DE4 79                    3937 	ld	a, c
      000DE5 3D                    3938 	dec	a
      000DE6 28 10                 3939 	jr	Z, 00118$
      000DE8 21r3Fr02              3940 	ld	hl, #(_collision_buf + 1)
      000DEB 46                    3941 	ld	b, (hl)
      000DEC 78                    3942 	ld	a, b
      000DED 3D                    3943 	dec	a
      000DEE 28 08                 3944 	jr	Z, 00118$
      000DF0 21r40r02              3945 	ld	hl, #(_collision_buf + 2)
      000DF3 6E                    3946 	ld	l, (hl)
                                   3947 ;	spillPairReg hl
      000DF4 7D                    3948 	ld	a, l
      000DF5 3D                    3949 	dec	a
      000DF6 20 11                 3950 	jr	NZ, 00119$
      000DF8                       3951 00118$:
                                   3952 ;src/mushroompie.c:170: if (tile_pos_oy < 7) delta_y = -1;
      000DF8 FAr3Dr02              3953 	ld	a, (#_tile_pos_oy)
      000DFB D6 07                 3954 	sub	a, #0x07
      000DFD 30 4B                 3955 	jr	NC, 00120$
      000DFF 21r18r00              3956 	ld	hl, #_delta_y
      000E02 3E FF                 3957 	ld	a, #0xff
      000E04 22                    3958 	ld	(hl+), a
      000E05 36 FF                 3959 	ld	(hl), #0xff
      000E07 18 41                 3960 	jr	00120$
      000E09                       3961 00119$:
                                   3962 ;src/mushroompie.c:171: } else if ((collision_buf[0] == 2) || (collision_buf[1] == 2) || (collision_buf[2] == 2)) {
      000E09 79                    3963 	ld	a, c
      000E0A D6 02                 3964 	sub	a, #0x02
      000E0C 28 0A                 3965 	jr	Z, 00113$
      000E0E 78                    3966 	ld	a, b
      000E0F D6 02                 3967 	sub	a, #0x02
      000E11 28 05                 3968 	jr	Z, 00113$
      000E13 7D                    3969 	ld	a, l
      000E14 D6 02                 3970 	sub	a, #0x02
      000E16 20 23                 3971 	jr	NZ, 00114$
      000E18                       3972 00113$:
                                   3973 ;src/mushroompie.c:172: if (tile_pos_oy > 4) delta_y = -1; else if (tile_pos_oy < 4) delta_y = 1;
      000E18 3E 04                 3974 	ld	a, #0x04
      000E1A 21r3Dr02              3975 	ld	hl, #_tile_pos_oy
      000E1D 96                    3976 	sub	a, (hl)
      000E1E 30 0A                 3977 	jr	NC, 00109$
      000E20 21r18r00              3978 	ld	hl, #_delta_y
      000E23 3E FF                 3979 	ld	a, #0xff
      000E25 22                    3980 	ld	(hl+), a
      000E26 36 FF                 3981 	ld	(hl), #0xff
      000E28 18 20                 3982 	jr	00120$
      000E2A                       3983 00109$:
      000E2A FAr3Dr02              3984 	ld	a, (#_tile_pos_oy)
      000E2D D6 04                 3985 	sub	a, #0x04
      000E2F 30 19                 3986 	jr	NC, 00120$
      000E31 21r18r00              3987 	ld	hl, #_delta_y
      000E34 3E 01                 3988 	ld	a, #0x01
      000E36 22                    3989 	ld	(hl+), a
      000E37 AF                    3990 	xor	a, a
      000E38 77                    3991 	ld	(hl), a
      000E39 18 0F                 3992 	jr	00120$
      000E3B                       3993 00114$:
                                   3994 ;src/mushroompie.c:173: } else if (!current_dyn) {
      000E3B 21r05r00              3995 	ld	hl, #_current_dyn + 1
      000E3E 3A                    3996 	ld	a, (hl-)
      000E3F B6                    3997 	or	a, (hl)
      000E40 20 08                 3998 	jr	NZ, 00120$
                                   3999 ;src/mushroompie.c:174: delta_y = 1;
      000E42 21r18r00              4000 	ld	hl, #_delta_y
      000E45 3E 01                 4001 	ld	a, #0x01
      000E47 22                    4002 	ld	(hl+), a
      000E48 AF                    4003 	xor	a, a
      000E49 77                    4004 	ld	(hl), a
      000E4A                       4005 00120$:
                                   4006 ;src/mushroompie.c:176: if (delta_y > 0) {            
      000E4A 21r18r00              4007 	ld	hl, #_delta_y
      000E4D AF                    4008 	xor	a, a
      000E4E 96                    4009 	sub	a, (hl)
      000E4F 23                    4010 	inc	hl
      000E50 3E 00                 4011 	ld	a, #0x00
      000E52 9E                    4012 	sbc	a, (hl)
      000E53 3E 00                 4013 	ld	a, #0x00
      000E55 57                    4014 	ld	d, a
      000E56 CB 7E                 4015 	bit	7, (hl)
      000E58 28 07                 4016 	jr	Z, 00362$
      000E5A CB 7A                 4017 	bit	7, d
      000E5C 20 08                 4018 	jr	NZ, 00363$
      000E5E BF                    4019 	cp	a, a
      000E5F 18 05                 4020 	jr	00363$
      000E61                       4021 00362$:
      000E61 CB 7A                 4022 	bit	7, d
      000E63 28 01                 4023 	jr	Z, 00363$
      000E65 37                    4024 	scf
      000E66                       4025 00363$:
      000E66 D2r50r0F              4026 	jp	NC, 00151$
                                   4027 ;src/mushroompie.c:177: get_h_coll(dizzy_x, dizzy_y + 21 + delta_y);
      000E69 21r12r00              4028 	ld	hl, #_dizzy_y
      000E6C 2A                    4029 	ld	a, (hl+)
      000E6D C6 15                 4030 	add	a, #0x15
      000E6F 4F                    4031 	ld	c, a
      000E70 7E                    4032 	ld	a, (hl)
      000E71 CE 00                 4033 	adc	a, #0x00
      000E73 47                    4034 	ld	b, a
      000E74 79                    4035 	ld	a, c
      000E75 21r18r00              4036 	ld	hl, #_delta_y
      000E78 86                    4037 	add	a, (hl)
      000E79 23                    4038 	inc	hl
      000E7A 4F                    4039 	ld	c, a
      000E7B 78                    4040 	ld	a, b
      000E7C 8E                    4041 	adc	a, (hl)
      000E7D 47                    4042 	ld	b, a
      000E7E C5                    4043 	push	bc
      000E7F 21r10r00              4044 	ld	hl, #_dizzy_x
      000E82 2A                    4045 	ld	a, (hl+)
      000E83 5F                    4046 	ld	e, a
      000E84 56                    4047 	ld	d, (hl)
      000E85 D5                    4048 	push	de
      000E86 CDr61r0A              4049 	call	_get_h_coll
      000E89 E8 04                 4050 	add	sp, #4
                                   4051 ;src/mushroompie.c:179: if ((collision_buf[0] == 1) || (collision_buf[1] == 1) || (collision_buf[2] == 1)) {
      000E8B 21r3Er02              4052 	ld	hl, #_collision_buf
      000E8E 46                    4053 	ld	b, (hl)
      000E8F 78                    4054 	ld	a, b
      000E90 3D                    4055 	dec	a
      000E91 28 10                 4056 	jr	Z, 00145$
      000E93 21r3Fr02              4057 	ld	hl, #(_collision_buf + 1)
      000E96 4E                    4058 	ld	c, (hl)
      000E97 79                    4059 	ld	a, c
      000E98 3D                    4060 	dec	a
      000E99 28 08                 4061 	jr	Z, 00145$
      000E9B 21r40r02              4062 	ld	hl, #(_collision_buf + 2)
      000E9E 6E                    4063 	ld	l, (hl)
                                   4064 ;	spillPairReg hl
      000E9F 7D                    4065 	ld	a, l
      000EA0 3D                    4066 	dec	a
      000EA1 20 29                 4067 	jr	NZ, 00146$
      000EA3                       4068 00145$:
                                   4069 ;src/mushroompie.c:180: delta_y = 0; 
      000EA3 AF                    4070 	xor	a, a
      000EA4 21r18r00              4071 	ld	hl, #_delta_y
      000EA7 22                    4072 	ld	(hl+), a
      000EA8 77                    4073 	ld	(hl), a
                                   4074 ;src/mushroompie.c:181: if (dizzy_falling) SND_TAP;
      000EA9 FAr20r00              4075 	ld	a, (#_dizzy_falling)
      000EAC B7                    4076 	or	a, a
      000EAD CAr9Cr0F              4077 	jp	Z, 00162$
      000EB0 AF                    4078 	xor	a, a
      000EB1 F5                    4079 	push	af
      000EB2 11 10 00              4080 	ld	de, #0x0010
      000EB5 D5                    4081 	push	de
      000EB6 11 41 00              4082 	ld	de, #0x0041
      000EB9 D5                    4083 	push	de
      000EBA AF                    4084 	xor	a, a
      000EBB F5                    4085 	push	af
      000EBC 11 00 00              4086 	ld	de, #0x0000
      000EBF D5                    4087 	push	de
      000EC0 21 00 04              4088 	ld	hl, #0x400
      000EC3 E5                    4089 	push	hl
      000EC4 CDr00r00              4090 	call	_PlayFx
      000EC7 E8 0C                 4091 	add	sp, #12
      000EC9 C3r9Cr0F              4092 	jp	00162$
      000ECC                       4093 00146$:
                                   4094 ;src/mushroompie.c:182: } else if ((collision_buf[0] == 2) || (collision_buf[1] == 2) || (collision_buf[2] == 2)) {
      000ECC 78                    4095 	ld	a, b
      000ECD D6 02                 4096 	sub	a, #0x02
      000ECF 28 0A                 4097 	jr	Z, 00140$
      000ED1 79                    4098 	ld	a, c
      000ED2 D6 02                 4099 	sub	a, #0x02
      000ED4 28 05                 4100 	jr	Z, 00140$
      000ED6 7D                    4101 	ld	a, l
      000ED7 D6 02                 4102 	sub	a, #0x02
      000ED9 20 32                 4103 	jr	NZ, 00141$
      000EDB                       4104 00140$:
                                   4105 ;src/mushroompie.c:183: if (tile_pos_oy > 4) { 
      000EDB 3E 04                 4106 	ld	a, #0x04
      000EDD 21r3Dr02              4107 	ld	hl, #_tile_pos_oy
      000EE0 96                    4108 	sub	a, (hl)
      000EE1 D2r9Cr0F              4109 	jp	NC, 00162$
                                   4110 ;src/mushroompie.c:184: delta_y = 0; 
      000EE4 AF                    4111 	xor	a, a
      000EE5 21r18r00              4112 	ld	hl, #_delta_y
      000EE8 22                    4113 	ld	(hl+), a
      000EE9 77                    4114 	ld	(hl), a
                                   4115 ;src/mushroompie.c:185: if (dizzy_falling) SND_TAP;
      000EEA FAr20r00              4116 	ld	a, (#_dizzy_falling)
      000EED B7                    4117 	or	a, a
      000EEE CAr9Cr0F              4118 	jp	Z, 00162$
      000EF1 AF                    4119 	xor	a, a
      000EF2 F5                    4120 	push	af
      000EF3 11 10 00              4121 	ld	de, #0x0010
      000EF6 D5                    4122 	push	de
      000EF7 11 41 00              4123 	ld	de, #0x0041
      000EFA D5                    4124 	push	de
      000EFB AF                    4125 	xor	a, a
      000EFC F5                    4126 	push	af
      000EFD 11 00 00              4127 	ld	de, #0x0000
      000F00 D5                    4128 	push	de
      000F01 21 00 04              4129 	ld	hl, #0x400
      000F04 E5                    4130 	push	hl
      000F05 CDr00r00              4131 	call	_PlayFx
      000F08 E8 0C                 4132 	add	sp, #12
      000F0A C3r9Cr0F              4133 	jp	00162$
      000F0D                       4134 00141$:
                                   4135 ;src/mushroompie.c:187: } else if ((collision_buf[0] == 5) || (collision_buf[1] == 5) || (collision_buf[2] == 5)) {
      000F0D 78                    4136 	ld	a, b
      000F0E D6 05                 4137 	sub	a, #0x05
      000F10 28 0A                 4138 	jr	Z, 00135$
      000F12 79                    4139 	ld	a, c
      000F13 D6 05                 4140 	sub	a, #0x05
      000F15 28 05                 4141 	jr	Z, 00135$
      000F17 7D                    4142 	ld	a, l
      000F18 D6 05                 4143 	sub	a, #0x05
      000F1A 20 1D                 4144 	jr	NZ, 00136$
      000F1C                       4145 00135$:
                                   4146 ;src/mushroompie.c:188: cloud_timer++; cloud_timer &= 3;
      000F1C 21r0Br00              4147 	ld	hl, #_cloud_timer
      000F1F 34                    4148 	inc	(hl)
      000F20 7E                    4149 	ld	a, (hl)
      000F21 E6 03                 4150 	and	a, #0x03
                                   4151 ;src/mushroompie.c:189: if (cloud_timer) { delta_y = 0; dizzy_falling = 0; dizzy_stun = 0; } // clouds are really soft and fluffy
      000F23 77                    4152 	ld	(hl), a
      000F24 B7                    4153 	or	a, a
      000F25 28 75                 4154 	jr	Z, 00162$
      000F27 AF                    4155 	xor	a, a
      000F28 21r18r00              4156 	ld	hl, #_delta_y
      000F2B 22                    4157 	ld	(hl+), a
      000F2C 77                    4158 	ld	(hl), a
      000F2D 21r20r00              4159 	ld	hl, #_dizzy_falling
      000F30 36 00                 4160 	ld	(hl), #0x00
      000F32 21r21r00              4161 	ld	hl, #_dizzy_stun
      000F35 36 00                 4162 	ld	(hl), #0x00
      000F37 18 63                 4163 	jr	00162$
      000F39                       4164 00136$:
                                   4165 ;src/mushroompie.c:191: is_position_safe = 0;
      000F39 21r1Cr00              4166 	ld	hl, #_is_position_safe
      000F3C 36 00                 4167 	ld	(hl), #0x00
                                   4168 ;src/mushroompie.c:192: if (!current_dyn) {
      000F3E 21r05r00              4169 	ld	hl, #_current_dyn + 1
      000F41 3A                    4170 	ld	a, (hl-)
      000F42 B6                    4171 	or	a, (hl)
      000F43 20 57                 4172 	jr	NZ, 00162$
                                   4173 ;src/mushroompie.c:193: if (dizzy_falling < MAX_STUN_HEIGHT) dizzy_falling++;
      000F45 21r20r00              4174 	ld	hl, #_dizzy_falling
      000F48 7E                    4175 	ld	a, (hl)
      000F49 D6 20                 4176 	sub	a, #0x20
      000F4B 30 4F                 4177 	jr	NC, 00162$
      000F4D 34                    4178 	inc	(hl)
      000F4E 18 4C                 4179 	jr	00162$
      000F50                       4180 00151$:
                                   4181 ;src/mushroompie.c:196: } else dizzy_falling = 0;
      000F50 21r20r00              4182 	ld	hl, #_dizzy_falling
      000F53 36 00                 4183 	ld	(hl), #0x00
      000F55 18 45                 4184 	jr	00162$
      000F57                       4185 00161$:
                                   4186 ;src/mushroompie.c:198: if (current_room->room_h_coll) current_room->room_h_coll(dizzy_x, dizzy_y + 4); else get_h_coll(dizzy_x, dizzy_y + 4);
      000F57 21r12r00              4187 	ld	hl, #_dizzy_y
      000F5A 2A                    4188 	ld	a, (hl+)
      000F5B C6 04                 4189 	add	a, #0x04
      000F5D 5F                    4190 	ld	e, a
      000F5E 7E                    4191 	ld	a, (hl)
      000F5F CE 00                 4192 	adc	a, #0x00
      000F61 57                    4193 	ld	d, a
      000F62 78                    4194 	ld	a, b
      000F63 B1                    4195 	or	a, c
      000F64 28 11                 4196 	jr	Z, 00154$
      000F66 D5                    4197 	push	de
      000F67 21r10r00              4198 	ld	hl, #_dizzy_x
      000F6A 2A                    4199 	ld	a, (hl+)
      000F6B 5F                    4200 	ld	e, a
      000F6C 56                    4201 	ld	d, (hl)
      000F6D D5                    4202 	push	de
      000F6E 69                    4203 	ld	l, c
                                   4204 ;	spillPairReg hl
                                   4205 ;	spillPairReg hl
      000F6F 60                    4206 	ld	h, b
                                   4207 ;	spillPairReg hl
                                   4208 ;	spillPairReg hl
      000F70 CDr00r00              4209 	call	___sdcc_call_hl
      000F73 E8 04                 4210 	add	sp, #4
      000F75 18 0D                 4211 	jr	00155$
      000F77                       4212 00154$:
      000F77 D5                    4213 	push	de
      000F78 21r10r00              4214 	ld	hl, #_dizzy_x
      000F7B 2A                    4215 	ld	a, (hl+)
      000F7C 5F                    4216 	ld	e, a
      000F7D 56                    4217 	ld	d, (hl)
      000F7E D5                    4218 	push	de
      000F7F CDr61r0A              4219 	call	_get_h_coll
      000F82 E8 04                 4220 	add	sp, #4
      000F84                       4221 00155$:
                                   4222 ;src/mushroompie.c:200: if ((collision_buf[0] == 1) || (collision_buf[1] == 1) || (collision_buf[2] == 1)) {
      000F84 FAr3Er02              4223 	ld	a, (#_collision_buf + 0)
      000F87 3D                    4224 	dec	a
      000F88 28 0C                 4225 	jr	Z, 00156$
      000F8A FAr3Fr02              4226 	ld	a, (#(_collision_buf + 1) + 0)
      000F8D 3D                    4227 	dec	a
      000F8E 28 06                 4228 	jr	Z, 00156$
      000F90 FAr40r02              4229 	ld	a, (#(_collision_buf + 2) + 0)
      000F93 3D                    4230 	dec	a
      000F94 20 06                 4231 	jr	NZ, 00162$
      000F96                       4232 00156$:
                                   4233 ;src/mushroompie.c:201: delta_y = 0;
      000F96 AF                    4234 	xor	a, a
      000F97 21r18r00              4235 	ld	hl, #_delta_y
      000F9A 22                    4236 	ld	(hl+), a
      000F9B 77                    4237 	ld	(hl), a
      000F9C                       4238 00162$:
                                   4239 ;src/mushroompie.c:205: if (!delta_y) {
      000F9C 21r19r00              4240 	ld	hl, #_delta_y + 1
      000F9F 3A                    4241 	ld	a, (hl-)
      000FA0 B6                    4242 	or	a, (hl)
      000FA1 20 11                 4243 	jr	NZ, 00166$
                                   4244 ;src/mushroompie.c:206: if (dizzy_falling == MAX_STUN_HEIGHT) dizzy_stun = 1;
      000FA3 FAr20r00              4245 	ld	a, (#_dizzy_falling)
      000FA6 D6 20                 4246 	sub	a, #0x20
      000FA8 20 05                 4247 	jr	NZ, 00164$
      000FAA 21r21r00              4248 	ld	hl, #_dizzy_stun
      000FAD 36 01                 4249 	ld	(hl), #0x01
      000FAF                       4250 00164$:
                                   4251 ;src/mushroompie.c:207: dizzy_falling = 0;
      000FAF 21r20r00              4252 	ld	hl, #_dizzy_falling
      000FB2 36 00                 4253 	ld	(hl), #0x00
      000FB4                       4254 00166$:
                                   4255 ;src/mushroompie.c:210: if (delta_x) {
      000FB4 21r17r00              4256 	ld	hl, #_delta_x + 1
      000FB7 3A                    4257 	ld	a, (hl-)
      000FB8 B6                    4258 	or	a, (hl)
      000FB9 CAr54r10              4259 	jp	Z, 00182$
                                   4260 ;src/mushroompie.c:167: if (current_room->room_h_coll) current_room->room_h_coll(dizzy_x, dizzy_y + 21); else get_h_coll(dizzy_x, dizzy_y + 21);
      000FBC 21r0Er00              4261 	ld	hl, #_current_room
      000FBF 2A                    4262 	ld	a, (hl+)
      000FC0 5F                    4263 	ld	e, a
      000FC1 56                    4264 	ld	d, (hl)
                                   4265 ;src/mushroompie.c:212: if (current_room->room_v_coll) current_room->room_v_coll(dizzy_x + delta_x, dizzy_y + 8); else get_v_coll(dizzy_x + delta_x, dizzy_y + 8); 
      000FC2 21r12r00              4266 	ld	hl, #_dizzy_y
      000FC5 2A                    4267 	ld	a, (hl+)
      000FC6 C6 08                 4268 	add	a, #0x08
      000FC8 4F                    4269 	ld	c, a
      000FC9 7E                    4270 	ld	a, (hl)
      000FCA CE 00                 4271 	adc	a, #0x00
      000FCC 47                    4272 	ld	b, a
      000FCD D5                    4273 	push	de
      000FCE 21r10r00              4274 	ld	hl, #_dizzy_x
      000FD1 2A                    4275 	ld	a, (hl+)
      000FD2 5F                    4276 	ld	e, a
      000FD3 56                    4277 	ld	d, (hl)
      000FD4 21r16r00              4278 	ld	hl, #_delta_x
      000FD7 2A                    4279 	ld	a,	(hl+)
      000FD8 66                    4280 	ld	h, (hl)
      000FD9 6F                    4281 	ld	l, a
      000FDA 19                    4282 	add	hl, de
      000FDB D1                    4283 	pop	de
      000FDC 33                    4284 	inc	sp
      000FDD 33                    4285 	inc	sp
      000FDE E5                    4286 	push	hl
      000FDF 21 11 00              4287 	ld	hl, #0x0011
      000FE2 19                    4288 	add	hl, de
      000FE3 5D                    4289 	ld	e, l
      000FE4 54                    4290 	ld	d, h
      000FE5 1A                    4291 	ld	a, (de)
      000FE6 F8 02                 4292 	ldhl	sp,	#2
      000FE8 22                    4293 	ld	(hl+), a
      000FE9 13                    4294 	inc	de
      000FEA 1A                    4295 	ld	a, (de)
      000FEB 77                    4296 	ld	(hl), a
                                   4297 ;src/mushroompie.c:211: if (delta_x < 0) {
      000FEC FAr17r00              4298 	ld	a, (#_delta_x + 1)
      000FEF CB 7F                 4299 	bit	7, a
      000FF1 28 27                 4300 	jr	Z, 00174$
                                   4301 ;src/mushroompie.c:212: if (current_room->room_v_coll) current_room->room_v_coll(dizzy_x + delta_x, dizzy_y + 8); else get_v_coll(dizzy_x + delta_x, dizzy_y + 8); 
      000FF3 F8 03                 4302 	ldhl	sp,	#3
      000FF5 3A                    4303 	ld	a, (hl-)
      000FF6 B6                    4304 	or	a, (hl)
      000FF7 28 13                 4305 	jr	Z, 00168$
      000FF9 2B                    4306 	dec	hl
      000FFA 2B                    4307 	dec	hl
      000FFB C5                    4308 	push	bc
      000FFC 2A                    4309 	ld	a, (hl+)
      000FFD 5F                    4310 	ld	e, a
      000FFE 56                    4311 	ld	d, (hl)
      000FFF D5                    4312 	push	de
      001000 F8 06                 4313 	ldhl	sp,	#6
      001002 2A                    4314 	ld	a, (hl+)
      001003 66                    4315 	ld	h, (hl)
                                   4316 ;	spillPairReg hl
                                   4317 ;	spillPairReg hl
      001004 6F                    4318 	ld	l, a
                                   4319 ;	spillPairReg hl
                                   4320 ;	spillPairReg hl
      001005 CDr00r00              4321 	call	___sdcc_call_hl
      001008 E8 04                 4322 	add	sp, #4
      00100A 18 31                 4323 	jr	00175$
      00100C                       4324 00168$:
      00100C C5                    4325 	push	bc
      00100D F8 02                 4326 	ldhl	sp,	#2
      00100F 2A                    4327 	ld	a, (hl+)
      001010 5F                    4328 	ld	e, a
      001011 56                    4329 	ld	d, (hl)
      001012 D5                    4330 	push	de
      001013 CDr11r0B              4331 	call	_get_v_coll
      001016 E8 04                 4332 	add	sp, #4
      001018 18 23                 4333 	jr	00175$
      00101A                       4334 00174$:
                                   4335 ;src/mushroompie.c:214: if (current_room->room_v_coll) current_room->room_v_coll(dizzy_x + delta_x + 16, dizzy_y + 8); else get_v_coll(dizzy_x + delta_x + 16, dizzy_y + 8);
      00101A D1                    4336 	pop	de
      00101B D5                    4337 	push	de
      00101C 21 10 00              4338 	ld	hl, #0x0010
      00101F 19                    4339 	add	hl, de
      001020 5D                    4340 	ld	e, l
      001021 54                    4341 	ld	d, h
      001022 F8 03                 4342 	ldhl	sp,	#3
      001024 3A                    4343 	ld	a, (hl-)
      001025 B6                    4344 	or	a, (hl)
      001026 28 0E                 4345 	jr	Z, 00171$
      001028 C5                    4346 	push	bc
      001029 D5                    4347 	push	de
      00102A F8 06                 4348 	ldhl	sp,	#6
      00102C 2A                    4349 	ld	a, (hl+)
      00102D 66                    4350 	ld	h, (hl)
                                   4351 ;	spillPairReg hl
                                   4352 ;	spillPairReg hl
      00102E 6F                    4353 	ld	l, a
                                   4354 ;	spillPairReg hl
                                   4355 ;	spillPairReg hl
      00102F CDr00r00              4356 	call	___sdcc_call_hl
      001032 E8 04                 4357 	add	sp, #4
      001034 18 07                 4358 	jr	00175$
      001036                       4359 00171$:
      001036 C5                    4360 	push	bc
      001037 D5                    4361 	push	de
      001038 CDr11r0B              4362 	call	_get_v_coll
      00103B E8 04                 4363 	add	sp, #4
      00103D                       4364 00175$:
                                   4365 ;src/mushroompie.c:217: if ((collision_buf[0] == 1) || (collision_buf[0] == 2) || (collision_buf[1] == 1)) {
      00103D FAr3Er02              4366 	ld	a, (#_collision_buf + 0)
      001040 FE 01                 4367 	cp	a, #0x01
      001042 28 0A                 4368 	jr	Z, 00176$
      001044 D6 02                 4369 	sub	a, #0x02
      001046 28 06                 4370 	jr	Z, 00176$
      001048 FAr3Fr02              4371 	ld	a, (#(_collision_buf + 1) + 0)
      00104B 3D                    4372 	dec	a
      00104C 20 06                 4373 	jr	NZ, 00182$
      00104E                       4374 00176$:
                                   4375 ;src/mushroompie.c:218: delta_x = 0;
      00104E AF                    4376 	xor	a, a
      00104F 21r16r00              4377 	ld	hl, #_delta_x
      001052 22                    4378 	ld	(hl+), a
      001053 77                    4379 	ld	(hl), a
      001054                       4380 00182$:
                                   4381 ;src/mushroompie.c:221: }
      001054 E8 04                 4382 	add	sp, #4
      001056 C9                    4383 	ret
                                   4384 ;src/mushroompie.c:223: void check_dizzy_evil_collisions() {
                                   4385 ;	---------------------------------
                                   4386 ; Function check_dizzy_evil_collisions
                                   4387 ; ---------------------------------
      001057                       4388 _check_dizzy_evil_collisions::
                                   4389 ;src/mushroompie.c:224: if (ani_type != ANI_DEAD) {
      001057 FAr02r00              4390 	ld	a, (#_ani_type)
      00105A D6 07                 4391 	sub	a, #0x07
      00105C C8                    4392 	ret	Z
                                   4393 ;src/mushroompie.c:225: if (current_room->room_evil_coll) current_room->room_evil_coll(dizzy_x, dizzy_y + 4);
      00105D 21r0Er00              4394 	ld	hl, #_current_room
      001060 2A                    4395 	ld	a, (hl+)
      001061 4F                    4396 	ld	c, a
      001062 46                    4397 	ld	b, (hl)
      001063 21 13 00              4398 	ld	hl, #0x0013
      001066 09                    4399 	add	hl, bc
      001067 2A                    4400 	ld	a, (hl+)
      001068 4F                    4401 	ld	c, a
      001069 46                    4402 	ld	b, (hl)
      00106A 78                    4403 	ld	a, b
      00106B B1                    4404 	or	a, c
      00106C 28 1A                 4405 	jr	Z, 00102$
      00106E 21r12r00              4406 	ld	hl, #_dizzy_y
      001071 2A                    4407 	ld	a, (hl+)
      001072 C6 04                 4408 	add	a, #0x04
      001074 5F                    4409 	ld	e, a
      001075 7E                    4410 	ld	a, (hl)
      001076 CE 00                 4411 	adc	a, #0x00
      001078 57                    4412 	ld	d, a
      001079 D5                    4413 	push	de
      00107A 21r10r00              4414 	ld	hl, #_dizzy_x
      00107D 2A                    4415 	ld	a, (hl+)
      00107E 5F                    4416 	ld	e, a
      00107F 56                    4417 	ld	d, (hl)
      001080 D5                    4418 	push	de
      001081 69                    4419 	ld	l, c
                                   4420 ;	spillPairReg hl
                                   4421 ;	spillPairReg hl
      001082 60                    4422 	ld	h, b
                                   4423 ;	spillPairReg hl
                                   4424 ;	spillPairReg hl
      001083 CDr00r00              4425 	call	___sdcc_call_hl
      001086 E8 04                 4426 	add	sp, #4
      001088                       4427 00102$:
                                   4428 ;src/mushroompie.c:226: get_coll(dizzy_x, dizzy_y + 4);
      001088 21r12r00              4429 	ld	hl, #_dizzy_y
      00108B 2A                    4430 	ld	a, (hl+)
      00108C C6 04                 4431 	add	a, #0x04
      00108E 4F                    4432 	ld	c, a
      00108F 7E                    4433 	ld	a, (hl)
      001090 CE 00                 4434 	adc	a, #0x00
      001092 47                    4435 	ld	b, a
      001093 C5                    4436 	push	bc
      001094 21r10r00              4437 	ld	hl, #_dizzy_x
      001097 2A                    4438 	ld	a, (hl+)
      001098 5F                    4439 	ld	e, a
      001099 56                    4440 	ld	d, (hl)
      00109A D5                    4441 	push	de
      00109B CDr9Ar0B              4442 	call	_get_coll
      00109E E8 04                 4443 	add	sp, #4
                                   4444 ;src/mushroompie.c:228: if (collision_buf[0] == 6) {
      0010A0 FAr3Er02              4445 	ld	a, (#_collision_buf + 0)
      0010A3 FE 06                 4446 	cp	a, #0x06
      0010A5 20 0B                 4447 	jr	NZ, 00108$
                                   4448 ;src/mushroompie.c:229: if (dec_energy < 64) dec_energy += 2;
      0010A7 21r35r02              4449 	ld	hl, #_dec_energy
      0010AA 7E                    4450 	ld	a,(hl)
      0010AB FE 40                 4451 	cp	a,#0x40
      0010AD D0                    4452 	ret	NC
      0010AE C6 02                 4453 	add	a, #0x02
      0010B0 77                    4454 	ld	(hl), a
      0010B1 C9                    4455 	ret
      0010B2                       4456 00108$:
                                   4457 ;src/mushroompie.c:230: } else if (collision_buf[0] == 7) {
      0010B2 D6 07                 4458 	sub	a, #0x07
      0010B4 C0                    4459 	ret	NZ
                                   4460 ;src/mushroompie.c:231: dizzy_energy = 1; dec_energy = 1;
      0010B5 21r32r02              4461 	ld	hl, #_dizzy_energy
      0010B8 36 01                 4462 	ld	(hl), #0x01
      0010BA 21r35r02              4463 	ld	hl, #_dec_energy
      0010BD 36 01                 4464 	ld	(hl), #0x01
                                   4465 ;src/mushroompie.c:234: }
      0010BF C9                    4466 	ret
                                   4467 ;src/mushroompie.c:242: void set_room(const UBYTE row, const UBYTE col, const UBYTE fade) {
                                   4468 ;	---------------------------------
                                   4469 ; Function set_room
                                   4470 ; ---------------------------------
      0010C0                       4471 _set_room::
                                   4472 ;src/mushroompie.c:243: if (fade) FADE_OUT;
      0010C0 F8 04                 4473 	ldhl	sp,	#4
      0010C2 7E                    4474 	ld	a, (hl)
      0010C3 B7                    4475 	or	a, a
      0010C4 28 18                 4476 	jr	Z, 00102$
      0010C6 3E 01                 4477 	ld	a, #0x01
      0010C8 F5                    4478 	push	af
      0010C9 33                    4479 	inc	sp
      0010CA CDr00r00              4480 	call	_push_bank
      0010CD 33                    4481 	inc	sp
      0010CE 21 2C 2C              4482 	ld	hl, #0x2c2c
      0010D1 E5                    4483 	push	hl
      0010D2 21 00 93              4484 	ld	hl, #0x9300
      0010D5 E5                    4485 	push	hl
      0010D6 CDr00r00              4486 	call	_FadeDMG
      0010D9 E8 04                 4487 	add	sp, #4
      0010DB CDr00r00              4488 	call	_pop_bank
      0010DE                       4489 00102$:
                                   4490 ;src/mushroompie.c:244: HIDE_SPRITES; HIDE_BKG;
      0010DE F0r00                 4491 	ldh	a, (_LCDC_REG + 0)
      0010E0 E6 FD                 4492 	and	a, #0xfd
      0010E2 E0r00                 4493 	ldh	(_LCDC_REG + 0), a
      0010E4 F0r00                 4494 	ldh	a, (_LCDC_REG + 0)
      0010E6 E6 FE                 4495 	and	a, #0xfe
      0010E8 E0r00                 4496 	ldh	(_LCDC_REG + 0), a
                                   4497 ;src/mushroompie.c:246: current_room = dizzy_world[row]->rooms[col];
      0010EA 01r1Dr06              4498 	ld	bc, #_dizzy_world+0
      0010ED F8 02                 4499 	ldhl	sp,	#2
      0010EF 6E                    4500 	ld	l, (hl)
      0010F0 26 00                 4501 	ld	h, #0x00
      0010F2 29                    4502 	add	hl, hl
      0010F3 09                    4503 	add	hl, bc
      0010F4 2A                    4504 	ld	a, (hl+)
      0010F5 4F                    4505 	ld	c, a
      0010F6 46                    4506 	ld	b, (hl)
      0010F7 03                    4507 	inc	bc
      0010F8 F8 03                 4508 	ldhl	sp,	#3
      0010FA 6E                    4509 	ld	l, (hl)
      0010FB 26 00                 4510 	ld	h, #0x00
      0010FD 29                    4511 	add	hl, hl
      0010FE 09                    4512 	add	hl, bc
      0010FF 5D                    4513 	ld	e, l
      001100 54                    4514 	ld	d, h
      001101 1A                    4515 	ld	a, (de)
      001102 21r0Er00              4516 	ld	hl, #_current_room
      001105 22                    4517 	ld	(hl+), a
      001106 13                    4518 	inc	de
      001107 1A                    4519 	ld	a, (de)
      001108 77                    4520 	ld	(hl), a
                                   4521 ;src/mushroompie.c:247: set_bank(current_room->bank);
      001109 21r0Er00              4522 	ld	hl, #_current_room
      00110C 2A                    4523 	ld	a, (hl+)
      00110D 4F                    4524 	ld	c, a
      00110E 46                    4525 	ld	b, (hl)
      00110F 0A                    4526 	ld	a, (bc)
      001110 F5                    4527 	push	af
      001111 33                    4528 	inc	sp
      001112 CDr00r00              4529 	call	_set_bank
      001115 33                    4530 	inc	sp
                                   4531 ;src/mushroompie.c:250: multiple_move_sprites(evil_sprite_offset, evil_sprite_total_count, 0, 0, (unsigned char *)evil_hide);
      001116 11r91r07              4532 	ld	de, #_evil_hide
      001119 D5                    4533 	push	de
      00111A AF                    4534 	xor	a, a
      00111B 0F                    4535 	rrca
      00111C F5                    4536 	push	af
      00111D 21 09 10              4537 	ld	hl, #0x1009
      001120 E5                    4538 	push	hl
      001121 CDr4Cr03              4539 	call	_multiple_move_sprites
      001124 E8 06                 4540 	add	sp, #6
                                   4541 ;src/mushroompie.c:247: set_bank(current_room->bank);
      001126 21r0Er00              4542 	ld	hl, #_current_room
      001129 2A                    4543 	ld	a, (hl+)
      00112A 4F                    4544 	ld	c, a
      00112B 46                    4545 	ld	b, (hl)
                                   4546 ;src/mushroompie.c:253: unshrink_tiles(0x00, current_room->room_tiles->count, current_room->room_tiles->data); 
      00112C 21 05 00              4547 	ld	hl, #0x0005
      00112F 09                    4548 	add	hl, bc
      001130 2A                    4549 	ld	a, (hl+)
      001131 4F                    4550 	ld	c, a
      001132 46                    4551 	ld	b, (hl)
      001133 59                    4552 	ld	e, c
      001134 50                    4553 	ld	d, b
      001135 13                    4554 	inc	de
      001136 0A                    4555 	ld	a, (bc)
      001137 D5                    4556 	push	de
      001138 67                    4557 	ld	h, a
      001139 2E 00                 4558 	ld	l, #0x00
      00113B E5                    4559 	push	hl
      00113C CDr10r00              4560 	call	_unshrink_tiles
      00113F E8 04                 4561 	add	sp, #4
                                   4562 ;src/mushroompie.c:247: set_bank(current_room->bank);
      001141 21r0Er00              4563 	ld	hl, #_current_room
      001144 2A                    4564 	ld	a, (hl+)
      001145 4F                    4565 	ld	c, a
      001146 46                    4566 	ld	b, (hl)
                                   4567 ;src/mushroompie.c:255: if (current_room->room_init) current_room->room_init();
      001147 21 09 00              4568 	ld	hl, #0x0009
      00114A 09                    4569 	add	hl, bc
      00114B 2A                    4570 	ld	a, (hl+)
      00114C 4F                    4571 	ld	c, a
      00114D 66                    4572 	ld	h, (hl)
                                   4573 ;	spillPairReg hl
      00114E 7C                    4574 	ld	a, h
      00114F B1                    4575 	or	a, c
      001150 28 04                 4576 	jr	Z, 00104$
      001152 69                    4577 	ld	l, c
                                   4578 ;	spillPairReg hl
                                   4579 ;	spillPairReg hl
      001153 CDr00r00              4580 	call	___sdcc_call_hl
      001156                       4581 00104$:
                                   4582 ;src/mushroompie.c:247: set_bank(current_room->bank);
      001156 21r0Er00              4583 	ld	hl, #_current_room
      001159 2A                    4584 	ld	a, (hl+)
      00115A 4F                    4585 	ld	c, a
      00115B 46                    4586 	ld	b, (hl)
                                   4587 ;src/mushroompie.c:257: if (current_room->room_customdraw) current_room->room_customdraw(); else default_draw();
      00115C 21 19 00              4588 	ld	hl, #0x0019
      00115F 09                    4589 	add	hl, bc
      001160 2A                    4590 	ld	a, (hl+)
      001161 4F                    4591 	ld	c, a
      001162 66                    4592 	ld	h, (hl)
                                   4593 ;	spillPairReg hl
      001163 7C                    4594 	ld	a, h
      001164 B1                    4595 	or	a, c
      001165 28 06                 4596 	jr	Z, 00106$
      001167 69                    4597 	ld	l, c
                                   4598 ;	spillPairReg hl
                                   4599 ;	spillPairReg hl
      001168 CDr00r00              4600 	call	___sdcc_call_hl
      00116B 18 03                 4601 	jr	00107$
      00116D                       4602 00106$:
      00116D CDr6Br16              4603 	call	_default_draw
      001170                       4604 00107$:
                                   4605 ;src/mushroompie.c:259: rle_decompress_data(current_room->room_coll_map->rle_data, (UWORD)current_room->room_coll_map->size, coll_buf);
                                   4606 ;src/mushroompie.c:247: set_bank(current_room->bank);
      001170 21r0Er00              4607 	ld	hl, #_current_room
      001173 6E                    4608 	ld	l, (hl)
                                   4609 ;	spillPairReg hl
                                   4610 ;	spillPairReg hl
      001174 FAr0Fr00              4611 	ld	a, (_current_room + 1)
      001177 67                    4612 	ld	h, a
                                   4613 ;	spillPairReg hl
                                   4614 ;	spillPairReg hl
                                   4615 ;src/mushroompie.c:259: rle_decompress_data(current_room->room_coll_map->rle_data, (UWORD)current_room->room_coll_map->size, coll_buf);
      001178 23                    4616 	inc	hl
      001179 23                    4617 	inc	hl
      00117A 23                    4618 	inc	hl
      00117B 2A                    4619 	ld	a, (hl+)
      00117C 4F                    4620 	ld	c, a
      00117D 46                    4621 	ld	b, (hl)
      00117E 69                    4622 	ld	l, c
      00117F 60                    4623 	ld	h, b
      001180 2A                    4624 	ld	a,	(hl+)
      001181 66                    4625 	ld	h, (hl)
                                   4626 ;	spillPairReg hl
      001182 6F                    4627 	ld	l, a
                                   4628 ;	spillPairReg hl
                                   4629 ;	spillPairReg hl
      001183 03                    4630 	inc	bc
      001184 03                    4631 	inc	bc
      001185 11r00r00              4632 	ld	de, #_coll_buf
      001188 D5                    4633 	push	de
      001189 E5                    4634 	push	hl
      00118A C5                    4635 	push	bc
      00118B CDr9Cr01              4636 	call	_rle_decompress_data
      00118E E8 06                 4637 	add	sp, #6
                                   4638 ;src/mushroompie.c:261: set_dizzy_position();
      001190 CDr1Fr0D              4639 	call	_set_dizzy_position
                                   4640 ;src/mushroompie.c:263: SCX_REG = bkg_scroll_x_target = get_x_scroll_value(dizzy_x);
      001193 21r10r00              4641 	ld	hl, #_dizzy_x
      001196 2A                    4642 	ld	a, (hl+)
      001197 5F                    4643 	ld	e, a
      001198 56                    4644 	ld	d, (hl)
      001199 D5                    4645 	push	de
      00119A CDrD7r09              4646 	call	_get_x_scroll_value
      00119D E1                    4647 	pop	hl
      00119E 7B                    4648 	ld	a, e
      00119F EAr36r02              4649 	ld	(#_bkg_scroll_x_target),a
      0011A2 E0r00                 4650 	ldh	(_SCX_REG + 0), a
                                   4651 ;src/mushroompie.c:264: SCY_REG = bkg_scroll_y_target = get_y_scroll_value(dizzy_y);
      0011A4 21r12r00              4652 	ld	hl, #_dizzy_y
      0011A7 2A                    4653 	ld	a, (hl+)
      0011A8 5F                    4654 	ld	e, a
      0011A9 56                    4655 	ld	d, (hl)
      0011AA D5                    4656 	push	de
      0011AB CDr1Cr0A              4657 	call	_get_y_scroll_value
      0011AE E1                    4658 	pop	hl
      0011AF 7B                    4659 	ld	a, e
      0011B0 EAr37r02              4660 	ld	(#_bkg_scroll_y_target),a
      0011B3 E0r00                 4661 	ldh	(_SCY_REG + 0), a
                                   4662 ;src/mushroompie.c:266: SHOW_BKG; SHOW_SPRITES;
      0011B5 F0r00                 4663 	ldh	a, (_LCDC_REG + 0)
      0011B7 F6 01                 4664 	or	a, #0x01
      0011B9 E0r00                 4665 	ldh	(_LCDC_REG + 0), a
      0011BB F0r00                 4666 	ldh	a, (_LCDC_REG + 0)
      0011BD F6 02                 4667 	or	a, #0x02
      0011BF E0r00                 4668 	ldh	(_LCDC_REG + 0), a
                                   4669 ;src/mushroompie.c:267: if (fade) FADE_IN;
      0011C1 F8 04                 4670 	ldhl	sp,	#4
      0011C3 7E                    4671 	ld	a, (hl)
      0011C4 B7                    4672 	or	a, a
      0011C5 C8                    4673 	ret	Z
      0011C6 3E 01                 4674 	ld	a, #0x01
      0011C8 F5                    4675 	push	af
      0011C9 33                    4676 	inc	sp
      0011CA CDr00r00              4677 	call	_push_bank
      0011CD 33                    4678 	inc	sp
      0011CE 21 2C 2C              4679 	ld	hl, #0x2c2c
      0011D1 E5                    4680 	push	hl
      0011D2 3E 93                 4681 	ld	a, #0x93
      0011D4 F5                    4682 	push	af
      0011D5 33                    4683 	inc	sp
      0011D6 3E 01                 4684 	ld	a, #0x01
      0011D8 F5                    4685 	push	af
      0011D9 33                    4686 	inc	sp
      0011DA CDr00r00              4687 	call	_FadeDMG
      0011DD E8 04                 4688 	add	sp, #4
                                   4689 ;src/mushroompie.c:268: }
      0011DF C3r00r00              4690 	jp	_pop_bank
                                   4691 ;src/mushroompie.c:269: void check_change_room() {
                                   4692 ;	---------------------------------
                                   4693 ; Function check_change_room
                                   4694 ; ---------------------------------
      0011E2                       4695 _check_change_room::
                                   4696 ;src/mushroompie.c:270: dizzy_tmp_xy = dizzy_x + delta_x;
      0011E2 FAr10r00              4697 	ld	a, (#_dizzy_x)
      0011E5 21r16r00              4698 	ld	hl, #_delta_x
      0011E8 86                    4699 	add	a, (hl)
      0011E9 EAr14r00              4700 	ld	(#_dizzy_tmp_xy),a
      0011EC FAr11r00              4701 	ld	a, (#_dizzy_x + 1)
      0011EF 21r17r00              4702 	ld	hl, #_delta_x + 1
      0011F2 8E                    4703 	adc	a, (hl)
      0011F3 21r15r00              4704 	ld	hl, #_dizzy_tmp_xy + 1
      0011F6 77                    4705 	ld	(hl), a
                                   4706 ;src/mushroompie.c:271: if (dizzy_tmp_xy < MIN_DIZZY_X) {
      0011F7 CB 7E                 4707 	bit	7, (hl)
      0011F9 28 2A                 4708 	jr	Z, 00109$
                                   4709 ;src/mushroompie.c:272: if (current_room_x) { current_room_x--; dizzy_x = MAX_DIZZY_X; set_room(current_room_y, current_room_x, 1); }
      0011FB 21r0Cr00              4710 	ld	hl, #_current_room_x
      0011FE 7E                    4711 	ld	a, (hl)
      0011FF B7                    4712 	or	a, a
      001200 28 1B                 4713 	jr	Z, 00102$
      001202 35                    4714 	dec	(hl)
      001203 21r10r00              4715 	ld	hl, #_dizzy_x
      001206 3E E0                 4716 	ld	a, #0xe0
      001208 22                    4717 	ld	(hl+), a
      001209 AF                    4718 	xor	a, a
      00120A 77                    4719 	ld	(hl), a
      00120B 3E 01                 4720 	ld	a, #0x01
      00120D F5                    4721 	push	af
      00120E 33                    4722 	inc	sp
      00120F FAr0Cr00              4723 	ld	a, (#_current_room_x)
      001212 67                    4724 	ld	h, a
      001213 FAr0Dr00              4725 	ld	a, (#_current_room_y)
      001216 6F                    4726 	ld	l, a
      001217 E5                    4727 	push	hl
      001218 CDrC0r10              4728 	call	_set_room
      00121B E8 03                 4729 	add	sp, #3
      00121D                       4730 00102$:
                                   4731 ;src/mushroompie.c:273: delta_x = 0;
      00121D AF                    4732 	xor	a, a
      00121E 21r16r00              4733 	ld	hl, #_delta_x
      001221 22                    4734 	ld	(hl+), a
      001222 77                    4735 	ld	(hl), a
      001223 18 4D                 4736 	jr	00110$
      001225                       4737 00109$:
                                   4738 ;src/mushroompie.c:274: } else if (dizzy_tmp_xy > MAX_DIZZY_X) { 
      001225 21r14r00              4739 	ld	hl, #_dizzy_tmp_xy
      001228 3E E0                 4740 	ld	a, #0xe0
      00122A 96                    4741 	sub	a, (hl)
      00122B 23                    4742 	inc	hl
      00122C 3E 00                 4743 	ld	a, #0x00
      00122E 9E                    4744 	sbc	a, (hl)
      00122F 3E 00                 4745 	ld	a, #0x00
      001231 57                    4746 	ld	d, a
      001232 CB 7E                 4747 	bit	7, (hl)
      001234 28 07                 4748 	jr	Z, 00163$
      001236 CB 7A                 4749 	bit	7, d
      001238 20 08                 4750 	jr	NZ, 00164$
      00123A BF                    4751 	cp	a, a
      00123B 18 05                 4752 	jr	00164$
      00123D                       4753 00163$:
      00123D CB 7A                 4754 	bit	7, d
      00123F 28 01                 4755 	jr	Z, 00164$
      001241 37                    4756 	scf
      001242                       4757 00164$:
      001242 30 2E                 4758 	jr	NC, 00110$
                                   4759 ;src/mushroompie.c:275: current_room_x++; 
      001244 21r0Cr00              4760 	ld	hl, #_current_room_x
      001247 34                    4761 	inc	(hl)
                                   4762 ;src/mushroompie.c:276: if (current_room_x < WORLD_WIDTH) { dizzy_x = MIN_DIZZY_X; set_room(current_room_y, current_room_x, 1); } else current_room_x = WORLD_WIDTH - 1;
      001248 7E                    4763 	ld	a, (hl)
      001249 D6 06                 4764 	sub	a, #0x06
      00124B 30 1A                 4765 	jr	NC, 00104$
      00124D AF                    4766 	xor	a, a
      00124E 21r10r00              4767 	ld	hl, #_dizzy_x
      001251 22                    4768 	ld	(hl+), a
      001252 77                    4769 	ld	(hl), a
      001253 3E 01                 4770 	ld	a, #0x01
      001255 F5                    4771 	push	af
      001256 33                    4772 	inc	sp
      001257 FAr0Cr00              4773 	ld	a, (#_current_room_x)
      00125A 67                    4774 	ld	h, a
      00125B FAr0Dr00              4775 	ld	a, (#_current_room_y)
      00125E 6F                    4776 	ld	l, a
      00125F E5                    4777 	push	hl
      001260 CDrC0r10              4778 	call	_set_room
      001263 E8 03                 4779 	add	sp, #3
      001265 18 05                 4780 	jr	00105$
      001267                       4781 00104$:
      001267 21r0Cr00              4782 	ld	hl, #_current_room_x
      00126A 36 05                 4783 	ld	(hl), #0x05
      00126C                       4784 00105$:
                                   4785 ;src/mushroompie.c:277: delta_x = 0;
      00126C AF                    4786 	xor	a, a
      00126D 21r16r00              4787 	ld	hl, #_delta_x
      001270 22                    4788 	ld	(hl+), a
      001271 77                    4789 	ld	(hl), a
      001272                       4790 00110$:
                                   4791 ;src/mushroompie.c:280: dizzy_tmp_xy = dizzy_y + delta_y;
      001272 FAr12r00              4792 	ld	a, (#_dizzy_y)
      001275 21r18r00              4793 	ld	hl, #_delta_y
      001278 86                    4794 	add	a, (hl)
      001279 EAr14r00              4795 	ld	(#_dizzy_tmp_xy),a
      00127C FAr13r00              4796 	ld	a, (#_dizzy_y + 1)
      00127F 21r19r00              4797 	ld	hl, #_delta_y + 1
      001282 8E                    4798 	adc	a, (hl)
      001283 21r15r00              4799 	ld	hl, #_dizzy_tmp_xy + 1
      001286 77                    4800 	ld	(hl), a
                                   4801 ;src/mushroompie.c:281: if (dizzy_tmp_xy < MIN_DIZZY_Y) {
      001287 CB 7E                 4802 	bit	7, (hl)
      001289 28 22                 4803 	jr	Z, 00119$
                                   4804 ;src/mushroompie.c:282: if (current_room_y) { current_room_y--; dizzy_y = MAX_DIZZY_Y; set_room(current_room_y, current_room_x, 1); }
      00128B 21r0Dr00              4805 	ld	hl, #_current_room_y
      00128E 7E                    4806 	ld	a, (hl)
      00128F B7                    4807 	or	a, a
      001290 C8                    4808 	ret	Z
      001291 35                    4809 	dec	(hl)
      001292 21r12r00              4810 	ld	hl, #_dizzy_y
      001295 3E 78                 4811 	ld	a, #0x78
      001297 22                    4812 	ld	(hl+), a
      001298 AF                    4813 	xor	a, a
      001299 77                    4814 	ld	(hl), a
      00129A 3E 01                 4815 	ld	a, #0x01
      00129C F5                    4816 	push	af
      00129D 33                    4817 	inc	sp
      00129E FAr0Cr00              4818 	ld	a, (#_current_room_x)
      0012A1 67                    4819 	ld	h, a
      0012A2 FAr0Dr00              4820 	ld	a, (#_current_room_y)
      0012A5 6F                    4821 	ld	l, a
      0012A6 E5                    4822 	push	hl
      0012A7 CDrC0r10              4823 	call	_set_room
      0012AA E8 03                 4824 	add	sp, #3
      0012AC C9                    4825 	ret
      0012AD                       4826 00119$:
                                   4827 ;src/mushroompie.c:283: } else if (dizzy_tmp_xy > MAX_DIZZY_Y) {
      0012AD 21r14r00              4828 	ld	hl, #_dizzy_tmp_xy
      0012B0 3E 78                 4829 	ld	a, #0x78
      0012B2 96                    4830 	sub	a, (hl)
      0012B3 23                    4831 	inc	hl
      0012B4 3E 00                 4832 	ld	a, #0x00
      0012B6 9E                    4833 	sbc	a, (hl)
      0012B7 3E 00                 4834 	ld	a, #0x00
      0012B9 57                    4835 	ld	d, a
      0012BA CB 7E                 4836 	bit	7, (hl)
      0012BC 28 07                 4837 	jr	Z, 00165$
      0012BE CB 7A                 4838 	bit	7, d
      0012C0 20 08                 4839 	jr	NZ, 00166$
      0012C2 BF                    4840 	cp	a, a
      0012C3 18 05                 4841 	jr	00166$
      0012C5                       4842 00165$:
      0012C5 CB 7A                 4843 	bit	7, d
      0012C7 28 01                 4844 	jr	Z, 00166$
      0012C9 37                    4845 	scf
      0012CA                       4846 00166$:
      0012CA D0                    4847 	ret	NC
                                   4848 ;src/mushroompie.c:284: current_room_y++; 
      0012CB 21r0Dr00              4849 	ld	hl, #_current_room_y
      0012CE 34                    4850 	inc	(hl)
                                   4851 ;src/mushroompie.c:285: if (current_room_y < WORLD_HEIGHT) { dizzy_y = MIN_DIZZY_Y; set_room(current_room_y, current_room_x, 1); } else current_room_y = WORLD_HEIGHT - 1;
      0012CF 7E                    4852 	ld	a, (hl)
      0012D0 D6 02                 4853 	sub	a, #0x02
      0012D2 30 19                 4854 	jr	NC, 00114$
      0012D4 AF                    4855 	xor	a, a
      0012D5 21r12r00              4856 	ld	hl, #_dizzy_y
      0012D8 22                    4857 	ld	(hl+), a
      0012D9 77                    4858 	ld	(hl), a
      0012DA 3E 01                 4859 	ld	a, #0x01
      0012DC F5                    4860 	push	af
      0012DD 33                    4861 	inc	sp
      0012DE FAr0Cr00              4862 	ld	a, (#_current_room_x)
      0012E1 67                    4863 	ld	h, a
      0012E2 FAr0Dr00              4864 	ld	a, (#_current_room_y)
      0012E5 6F                    4865 	ld	l, a
      0012E6 E5                    4866 	push	hl
      0012E7 CDrC0r10              4867 	call	_set_room
      0012EA E8 03                 4868 	add	sp, #3
      0012EC C9                    4869 	ret
      0012ED                       4870 00114$:
      0012ED 21r0Dr00              4871 	ld	hl, #_current_room_y
      0012F0 36 01                 4872 	ld	(hl), #0x01
                                   4873 ;src/mushroompie.c:287: }
      0012F2 C9                    4874 	ret
                                   4875 ;src/include/inventory.h:88: void push_last(items_list * list, game_item * item) {
                                   4876 ;	---------------------------------
                                   4877 ; Function push_last
                                   4878 ; ---------------------------------
      0012F3                       4879 _push_last::
      0012F3 E8 FA                 4880 	add	sp, #-6
                                   4881 ;src/include/inventory.h:89: if ((!item) || (!list)) return;
      0012F5 F8 0B                 4882 	ldhl	sp,	#11
      0012F7 3A                    4883 	ld	a, (hl-)
      0012F8 B6                    4884 	or	a, (hl)
      0012F9 28 60                 4885 	jr	Z, 00107$
      0012FB 2B                    4886 	dec	hl
      0012FC 3A                    4887 	ld	a, (hl-)
      0012FD B6                    4888 	or	a, (hl)
      0012FE 28 5B                 4889 	jr	Z, 00107$
                                   4890 ;src/include/inventory.h:90: list->size++;
      001300 F8 08                 4891 	ldhl	sp,	#8
      001302 7E                    4892 	ld	a, (hl)
      001303 F8 00                 4893 	ldhl	sp,	#0
      001305 77                    4894 	ld	(hl), a
      001306 F8 09                 4895 	ldhl	sp,	#9
      001308 7E                    4896 	ld	a, (hl)
      001309 F8 01                 4897 	ldhl	sp,	#1
      00130B 77                    4898 	ld	(hl), a
      00130C D1                    4899 	pop	de
      00130D D5                    4900 	push	de
      00130E 1A                    4901 	ld	a, (de)
      00130F 4F                    4902 	ld	c, a
      001310 0C                    4903 	inc	c
      001311 E1                    4904 	pop	hl
      001312 E5                    4905 	push	hl
      001313 71                    4906 	ld	(hl), c
                                   4907 ;src/include/inventory.h:91: item->next = 0;
      001314 F8 0A                 4908 	ldhl	sp,	#10
      001316 2A                    4909 	ld	a, (hl+)
      001317 4F                    4910 	ld	c, a
      001318 46                    4911 	ld	b, (hl)
      001319 21 07 00              4912 	ld	hl, #0x0007
      00131C 09                    4913 	add	hl, bc
      00131D AF                    4914 	xor	a, a
      00131E 22                    4915 	ld	(hl+), a
      00131F 77                    4916 	ld	(hl), a
                                   4917 ;src/include/inventory.h:92: if (list->last) list->last->next = item; else list->first = item;
      001320 D1                    4918 	pop	de
      001321 D5                    4919 	push	de
      001322 21 03 00              4920 	ld	hl, #0x0003
      001325 19                    4921 	add	hl, de
      001326 E5                    4922 	push	hl
      001327 7D                    4923 	ld	a, l
      001328 F8 04                 4924 	ldhl	sp,	#4
      00132A 77                    4925 	ld	(hl), a
      00132B E1                    4926 	pop	hl
      00132C 7C                    4927 	ld	a, h
      00132D F8 03                 4928 	ldhl	sp,	#3
      00132F 32                    4929 	ld	(hl-), a
      001330 2A                    4930 	ld	a, (hl+)
      001331 5F                    4931 	ld	e, a
      001332 2A                    4932 	ld	a, (hl+)
      001333 57                    4933 	ld	d, a
      001334 1A                    4934 	ld	a, (de)
      001335 22                    4935 	ld	(hl+), a
      001336 13                    4936 	inc	de
      001337 1A                    4937 	ld	a, (de)
      001338 77                    4938 	ld	(hl), a
      001339 3A                    4939 	ld	a, (hl-)
      00133A B6                    4940 	or	a, (hl)
      00133B 28 10                 4941 	jr	Z, 00105$
      00133D 2A                    4942 	ld	a, (hl+)
      00133E 5F                    4943 	ld	e, a
      00133F 56                    4944 	ld	d, (hl)
      001340 21 07 00              4945 	ld	hl, #0x0007
      001343 19                    4946 	add	hl, de
      001344 5D                    4947 	ld	e, l
      001345 54                    4948 	ld	d, h
      001346 79                    4949 	ld	a, c
      001347 12                    4950 	ld	(de), a
      001348 13                    4951 	inc	de
      001349 78                    4952 	ld	a, b
      00134A 12                    4953 	ld	(de), a
      00134B 18 06                 4954 	jr	00106$
      00134D                       4955 00105$:
      00134D E1                    4956 	pop	hl
      00134E E5                    4957 	push	hl
      00134F 23                    4958 	inc	hl
      001350 79                    4959 	ld	a, c
      001351 22                    4960 	ld	(hl+), a
      001352 70                    4961 	ld	(hl), b
      001353                       4962 00106$:
                                   4963 ;src/include/inventory.h:93: list->last = item;
      001353 F8 02                 4964 	ldhl	sp,	#2
      001355 2A                    4965 	ld	a,	(hl+)
      001356 66                    4966 	ld	h, (hl)
      001357 6F                    4967 	ld	l, a
      001358 79                    4968 	ld	a, c
      001359 22                    4969 	ld	(hl+), a
      00135A 70                    4970 	ld	(hl), b
      00135B                       4971 00107$:
                                   4972 ;src/include/inventory.h:94: }
      00135B E8 06                 4973 	add	sp, #6
      00135D C9                    4974 	ret
                                   4975 ;src/include/inventory.h:95: game_item * pop_by_id(items_list * list, const UBYTE id) {
                                   4976 ;	---------------------------------
                                   4977 ; Function pop_by_id
                                   4978 ; ---------------------------------
      00135E                       4979 _pop_by_id::
      00135E E8 FB                 4980 	add	sp, #-5
                                   4981 ;src/include/inventory.h:96: if (!list) return 0;
      001360 F8 08                 4982 	ldhl	sp,	#8
      001362 3A                    4983 	ld	a, (hl-)
      001363 B6                    4984 	or	a, (hl)
      001364 20 06                 4985 	jr	NZ, 00102$
      001366 11 00 00              4986 	ld	de, #0x0000
      001369 C3r24r14              4987 	jp	00113$
      00136C                       4988 00102$:
                                   4989 ;src/include/inventory.h:97: __temp_game_item2 = 0;
      00136C AF                    4990 	xor	a, a
      00136D 21rCCr02              4991 	ld	hl, #___temp_game_item2
      001370 22                    4992 	ld	(hl+), a
      001371 77                    4993 	ld	(hl), a
                                   4994 ;src/include/inventory.h:98: __temp_game_item = list->first;
      001372 F8 07                 4995 	ldhl	sp,	#7
      001374 2A                    4996 	ld	a, (hl+)
      001375 4F                    4997 	ld	c, a
      001376 46                    4998 	ld	b, (hl)
      001377 69                    4999 	ld	l, c
      001378 60                    5000 	ld	h, b
      001379 23                    5001 	inc	hl
      00137A E5                    5002 	push	hl
      00137B 7D                    5003 	ld	a, l
      00137C F8 03                 5004 	ldhl	sp,	#3
      00137E 77                    5005 	ld	(hl), a
      00137F E1                    5006 	pop	hl
      001380 7C                    5007 	ld	a, h
      001381 F8 02                 5008 	ldhl	sp,	#2
      001383 32                    5009 	ld	(hl-), a
      001384 2A                    5010 	ld	a, (hl+)
      001385 5F                    5011 	ld	e, a
      001386 56                    5012 	ld	d, (hl)
      001387 1A                    5013 	ld	a, (de)
      001388 21rCAr02              5014 	ld	hl, #___temp_game_item
      00138B 22                    5015 	ld	(hl+), a
      00138C 13                    5016 	inc	de
      00138D 1A                    5017 	ld	a, (de)
      00138E 77                    5018 	ld	(hl), a
                                   5019 ;src/include/inventory.h:99: while (__temp_game_item) {
      00138F                       5020 00110$:
      00138F 21rCBr02              5021 	ld	hl, #___temp_game_item + 1
      001392 3A                    5022 	ld	a, (hl-)
      001393 B6                    5023 	or	a, (hl)
      001394 CAr21r14              5024 	jp	Z, 00112$
                                   5025 ;src/include/inventory.h:100: if (__temp_game_item->id == id) {
      001397 2A                    5026 	ld	a, (hl+)
      001398 5F                    5027 	ld	e, a
      001399 56                    5028 	ld	d, (hl)
      00139A 1A                    5029 	ld	a, (de)
      00139B F8 00                 5030 	ldhl	sp,	#0
      00139D 77                    5031 	ld	(hl), a
                                   5032 ;src/include/inventory.h:101: if (__temp_game_item2) __temp_game_item2->next = __temp_game_item->next; else list->first = __temp_game_item->next;
      00139E D5                    5033 	push	de
      00139F 21 07 00              5034 	ld	hl, #0x0007
      0013A2 19                    5035 	add	hl, de
      0013A3 D1                    5036 	pop	de
      0013A4 E5                    5037 	push	hl
      0013A5 7D                    5038 	ld	a, l
      0013A6 F8 05                 5039 	ldhl	sp,	#5
      0013A8 77                    5040 	ld	(hl), a
      0013A9 E1                    5041 	pop	hl
      0013AA 7C                    5042 	ld	a, h
      0013AB F8 04                 5043 	ldhl	sp,	#4
      0013AD 77                    5044 	ld	(hl), a
                                   5045 ;src/include/inventory.h:100: if (__temp_game_item->id == id) {
      0013AE F8 09                 5046 	ldhl	sp,	#9
      0013B0 7E                    5047 	ld	a, (hl)
      0013B1 F8 00                 5048 	ldhl	sp,	#0
      0013B3 96                    5049 	sub	a, (hl)
      0013B4 20 55                 5050 	jr	NZ, 00109$
                                   5051 ;src/include/inventory.h:101: if (__temp_game_item2) __temp_game_item2->next = __temp_game_item->next; else list->first = __temp_game_item->next;
      0013B6 F8 03                 5052 	ldhl	sp,#3
      0013B8 2A                    5053 	ld	a, (hl+)
      0013B9 5F                    5054 	ld	e, a
      0013BA 3A                    5055 	ld	a, (hl-)
      0013BB 57                    5056 	ld	d, a
      0013BC 1A                    5057 	ld	a, (de)
      0013BD 22                    5058 	ld	(hl+), a
      0013BE 13                    5059 	inc	de
      0013BF 1A                    5060 	ld	a, (de)
      0013C0 77                    5061 	ld	(hl), a
      0013C1 21rCDr02              5062 	ld	hl, #___temp_game_item2 + 1
      0013C4 3A                    5063 	ld	a, (hl-)
      0013C5 B6                    5064 	or	a, (hl)
      0013C6 28 11                 5065 	jr	Z, 00104$
      0013C8 2A                    5066 	ld	a, (hl+)
      0013C9 56                    5067 	ld	d, (hl)
      0013CA C6 07                 5068 	add	a, #0x07
      0013CC 5F                    5069 	ld	e, a
      0013CD 30 01                 5070 	jr	NC, 00147$
      0013CF 14                    5071 	inc	d
      0013D0                       5072 00147$:
      0013D0 F8 03                 5073 	ldhl	sp,	#3
      0013D2 2A                    5074 	ld	a, (hl+)
      0013D3 12                    5075 	ld	(de), a
      0013D4 13                    5076 	inc	de
      0013D5 7E                    5077 	ld	a, (hl)
      0013D6 12                    5078 	ld	(de), a
      0013D7 18 0B                 5079 	jr	00105$
      0013D9                       5080 00104$:
      0013D9 F8 01                 5081 	ldhl	sp,#1
      0013DB 2A                    5082 	ld	a, (hl+)
      0013DC 5F                    5083 	ld	e, a
      0013DD 2A                    5084 	ld	a, (hl+)
      0013DE 57                    5085 	ld	d, a
      0013DF 2A                    5086 	ld	a, (hl+)
      0013E0 12                    5087 	ld	(de), a
      0013E1 13                    5088 	inc	de
      0013E2 7E                    5089 	ld	a, (hl)
      0013E3 12                    5090 	ld	(de), a
      0013E4                       5091 00105$:
                                   5092 ;src/include/inventory.h:102: if (!__temp_game_item->next) list->last = __temp_game_item2;
      0013E4 21rCAr02              5093 	ld	hl, #___temp_game_item
      0013E7 2A                    5094 	ld	a, (hl+)
      0013E8 5F                    5095 	ld	e, a
      0013E9 56                    5096 	ld	d, (hl)
      0013EA 21 07 00              5097 	ld	hl, #0x0007
      0013ED 19                    5098 	add	hl, de
      0013EE 2A                    5099 	ld	a, (hl+)
      0013EF 6E                    5100 	ld	l, (hl)
                                   5101 ;	spillPairReg hl
      0013F0 B5                    5102 	or	a, l
      0013F1 20 0D                 5103 	jr	NZ, 00107$
      0013F3 59                    5104 	ld	e, c
      0013F4 50                    5105 	ld	d, b
      0013F5 13                    5106 	inc	de
      0013F6 13                    5107 	inc	de
      0013F7 13                    5108 	inc	de
      0013F8 21rCCr02              5109 	ld	hl, #___temp_game_item2
      0013FB 2A                    5110 	ld	a, (hl+)
      0013FC 12                    5111 	ld	(de), a
      0013FD 13                    5112 	inc	de
      0013FE 7E                    5113 	ld	a, (hl)
      0013FF 12                    5114 	ld	(de), a
      001400                       5115 00107$:
                                   5116 ;src/include/inventory.h:103: list->size--;
      001400 0A                    5117 	ld	a, (bc)
      001401 3D                    5118 	dec	a
      001402 02                    5119 	ld	(bc), a
                                   5120 ;src/include/inventory.h:104: return __temp_game_item;
      001403 21rCAr02              5121 	ld	hl, #___temp_game_item
      001406 2A                    5122 	ld	a, (hl+)
      001407 5F                    5123 	ld	e, a
      001408 56                    5124 	ld	d, (hl)
      001409 18 19                 5125 	jr	00113$
      00140B                       5126 00109$:
                                   5127 ;src/include/inventory.h:106: __temp_game_item2 = __temp_game_item;
      00140B 21rCCr02              5128 	ld	hl, #___temp_game_item2
      00140E 7B                    5129 	ld	a, e
      00140F 22                    5130 	ld	(hl+), a
      001410 72                    5131 	ld	(hl), d
                                   5132 ;src/include/inventory.h:107: __temp_game_item = __temp_game_item->next;
      001411 F8 03                 5133 	ldhl	sp,#3
      001413 2A                    5134 	ld	a, (hl+)
      001414 5F                    5135 	ld	e, a
      001415 56                    5136 	ld	d, (hl)
      001416 1A                    5137 	ld	a, (de)
      001417 21rCAr02              5138 	ld	hl, #___temp_game_item
      00141A 22                    5139 	ld	(hl+), a
      00141B 13                    5140 	inc	de
      00141C 1A                    5141 	ld	a, (de)
      00141D 77                    5142 	ld	(hl), a
      00141E C3r8Fr13              5143 	jp	00110$
      001421                       5144 00112$:
                                   5145 ;src/include/inventory.h:109: return 0;
      001421 11 00 00              5146 	ld	de, #0x0000
      001424                       5147 00113$:
                                   5148 ;src/include/inventory.h:110: }
      001424 E8 05                 5149 	add	sp, #5
      001426 C9                    5150 	ret
                                   5151 ;src/include/inventory.h:111: game_item * find_by_id(items_list * list, const UBYTE id) {
                                   5152 ;	---------------------------------
                                   5153 ; Function find_by_id
                                   5154 ; ---------------------------------
      001427                       5155 _find_by_id::
                                   5156 ;src/include/inventory.h:112: if (!list) return 0;
      001427 F8 03                 5157 	ldhl	sp,	#3
      001429 3A                    5158 	ld	a, (hl-)
      00142A B6                    5159 	or	a, (hl)
      00142B 20 04                 5160 	jr	NZ, 00102$
      00142D 11 00 00              5161 	ld	de, #0x0000
      001430 C9                    5162 	ret
      001431                       5163 00102$:
                                   5164 ;src/include/inventory.h:113: __temp_game_item = list->first;
      001431 F8 02                 5165 	ldhl	sp,	#2
      001433 2A                    5166 	ld	a, (hl+)
      001434 4F                    5167 	ld	c, a
      001435 46                    5168 	ld	b, (hl)
      001436 03                    5169 	inc	bc
      001437 59                    5170 	ld	e, c
      001438 50                    5171 	ld	d, b
      001439 1A                    5172 	ld	a, (de)
      00143A 21rCAr02              5173 	ld	hl, #___temp_game_item
      00143D 22                    5174 	ld	(hl+), a
      00143E 13                    5175 	inc	de
      00143F 1A                    5176 	ld	a, (de)
      001440 77                    5177 	ld	(hl), a
                                   5178 ;src/include/inventory.h:114: while (__temp_game_item) {
      001441                       5179 00105$:
      001441 21rCBr02              5180 	ld	hl, #___temp_game_item + 1
      001444 3A                    5181 	ld	a, (hl-)
      001445 B6                    5182 	or	a, (hl)
      001446 28 22                 5183 	jr	Z, 00107$
                                   5184 ;src/include/inventory.h:115: if (__temp_game_item->id == id) return __temp_game_item;
      001448 2A                    5185 	ld	a, (hl+)
      001449 4F                    5186 	ld	c, a
      00144A 46                    5187 	ld	b, (hl)
      00144B 0A                    5188 	ld	a, (bc)
      00144C 5F                    5189 	ld	e, a
      00144D F8 04                 5190 	ldhl	sp,	#4
      00144F 7E                    5191 	ld	a, (hl)
      001450 93                    5192 	sub	a, e
      001451 20 07                 5193 	jr	NZ, 00104$
      001453 21rCAr02              5194 	ld	hl, #___temp_game_item
      001456 2A                    5195 	ld	a, (hl+)
      001457 5F                    5196 	ld	e, a
      001458 56                    5197 	ld	d, (hl)
      001459 C9                    5198 	ret
      00145A                       5199 00104$:
                                   5200 ;src/include/inventory.h:116: __temp_game_item = __temp_game_item->next;
      00145A 21 07 00              5201 	ld	hl, #0x0007
      00145D 09                    5202 	add	hl, bc
      00145E 5D                    5203 	ld	e, l
      00145F 54                    5204 	ld	d, h
      001460 1A                    5205 	ld	a, (de)
      001461 21rCAr02              5206 	ld	hl, #___temp_game_item
      001464 22                    5207 	ld	(hl+), a
      001465 13                    5208 	inc	de
      001466 1A                    5209 	ld	a, (de)
      001467 77                    5210 	ld	(hl), a
      001468 18 D7                 5211 	jr	00105$
      00146A                       5212 00107$:
                                   5213 ;src/include/inventory.h:118: return 0;
      00146A 11 00 00              5214 	ld	de, #0x0000
                                   5215 ;src/include/inventory.h:119: }
      00146D C9                    5216 	ret
                                   5217 ;src/include/inventory.h:120: game_item * find_by_room_xy(items_list * list, const UBYTE row, const UBYTE col, const UBYTE x, const UBYTE y) {
                                   5218 ;	---------------------------------
                                   5219 ; Function find_by_room_xy
                                   5220 ; ---------------------------------
      00146E                       5221 _find_by_room_xy::
      00146E E8 FC                 5222 	add	sp, #-4
                                   5223 ;src/include/inventory.h:121: if (!list) return 0;
      001470 F8 07                 5224 	ldhl	sp,	#7
      001472 3A                    5225 	ld	a, (hl-)
      001473 B6                    5226 	or	a, (hl)
      001474 20 06                 5227 	jr	NZ, 00102$
      001476 11 00 00              5228 	ld	de, #0x0000
      001479 C3r7Br15              5229 	jp	00114$
      00147C                       5230 00102$:
                                   5231 ;src/include/inventory.h:122: __temp_game_item2 = 0;
      00147C AF                    5232 	xor	a, a
      00147D 21rCCr02              5233 	ld	hl, #___temp_game_item2
      001480 22                    5234 	ld	(hl+), a
      001481 77                    5235 	ld	(hl), a
                                   5236 ;src/include/inventory.h:123: __temp_game_item = list->first;
      001482 F8 06                 5237 	ldhl	sp,	#6
      001484 2A                    5238 	ld	a, (hl+)
      001485 4F                    5239 	ld	c, a
      001486 46                    5240 	ld	b, (hl)
      001487 03                    5241 	inc	bc
      001488 59                    5242 	ld	e, c
      001489 50                    5243 	ld	d, b
      00148A 1A                    5244 	ld	a, (de)
      00148B 21rCAr02              5245 	ld	hl, #___temp_game_item
      00148E 22                    5246 	ld	(hl+), a
      00148F 13                    5247 	inc	de
      001490 1A                    5248 	ld	a, (de)
      001491 77                    5249 	ld	(hl), a
                                   5250 ;src/include/inventory.h:124: while (__temp_game_item) {
      001492                       5251 00111$:
      001492 21rCBr02              5252 	ld	hl, #___temp_game_item + 1
      001495 3A                    5253 	ld	a, (hl-)
      001496 B6                    5254 	or	a, (hl)
      001497 CAr75r15              5255 	jp	Z, 00113$
                                   5256 ;src/include/inventory.h:125: if ((__temp_game_item->room_row == row) && (__temp_game_item->room_col == col)) {
      00149A 7E                    5257 	ld	a, (hl)
      00149B F8 00                 5258 	ldhl	sp,	#0
      00149D 77                    5259 	ld	(hl), a
      00149E FArCBr02              5260 	ld	a, (#___temp_game_item + 1)
      0014A1 F8 01                 5261 	ldhl	sp,	#1
      0014A3 77                    5262 	ld	(hl), a
      0014A4 C1                    5263 	pop	bc
      0014A5 C5                    5264 	push	bc
      0014A6 03                    5265 	inc	bc
      0014A7 0A                    5266 	ld	a, (bc)
      0014A8 4F                    5267 	ld	c, a
      0014A9 F8 08                 5268 	ldhl	sp,	#8
      0014AB 7E                    5269 	ld	a, (hl)
      0014AC 91                    5270 	sub	a, c
      0014AD C2r60r15              5271 	jp	NZ,00109$
      0014B0 C1                    5272 	pop	bc
      0014B1 C5                    5273 	push	bc
      0014B2 03                    5274 	inc	bc
      0014B3 03                    5275 	inc	bc
      0014B4 0A                    5276 	ld	a, (bc)
      0014B5 4F                    5277 	ld	c, a
      0014B6 F8 09                 5278 	ldhl	sp,	#9
      0014B8 7E                    5279 	ld	a, (hl)
      0014B9 91                    5280 	sub	a, c
      0014BA C2r60r15              5281 	jp	NZ,00109$
                                   5282 ;src/include/inventory.h:126: if ((__temp_game_item->x <= (x + 2)) && ((__temp_game_item->x + 1) >= x) &&
      0014BD C1                    5283 	pop	bc
      0014BE C5                    5284 	push	bc
      0014BF 03                    5285 	inc	bc
      0014C0 03                    5286 	inc	bc
      0014C1 03                    5287 	inc	bc
      0014C2 0A                    5288 	ld	a, (bc)
      0014C3 4F                    5289 	ld	c, a
      0014C4 F8 0A                 5290 	ldhl	sp,	#10
      0014C6 7E                    5291 	ld	a, (hl)
      0014C7 F8 02                 5292 	ldhl	sp,	#2
      0014C9 22                    5293 	ld	(hl+), a
      0014CA AF                    5294 	xor	a, a
      0014CB 32                    5295 	ld	(hl-), a
      0014CC 2A                    5296 	ld	a, (hl+)
      0014CD 66                    5297 	ld	h, (hl)
                                   5298 ;	spillPairReg hl
                                   5299 ;	spillPairReg hl
      0014CE 6F                    5300 	ld	l, a
                                   5301 ;	spillPairReg hl
                                   5302 ;	spillPairReg hl
      0014CF 23                    5303 	inc	hl
      0014D0 23                    5304 	inc	hl
      0014D1 06 00                 5305 	ld	b, #0x00
      0014D3 58                    5306 	ld	e, b
      0014D4 54                    5307 	ld	d, h
      0014D5 7D                    5308 	ld	a, l
      0014D6 91                    5309 	sub	a, c
      0014D7 7C                    5310 	ld	a, h
      0014D8 98                    5311 	sbc	a, b
      0014D9 CB 7B                 5312 	bit	7, e
      0014DB 28 07                 5313 	jr	Z, 00165$
      0014DD CB 7A                 5314 	bit	7, d
      0014DF 20 08                 5315 	jr	NZ, 00166$
      0014E1 BF                    5316 	cp	a, a
      0014E2 18 05                 5317 	jr	00166$
      0014E4                       5318 00165$:
      0014E4 CB 7A                 5319 	bit	7, d
      0014E6 28 01                 5320 	jr	Z, 00166$
      0014E8 37                    5321 	scf
      0014E9                       5322 00166$:
      0014E9 38 75                 5323 	jr	C, 00109$
      0014EB 03                    5324 	inc	bc
      0014EC F8 02                 5325 	ldhl	sp,	#2
      0014EE 79                    5326 	ld	a, c
      0014EF 96                    5327 	sub	a, (hl)
      0014F0 23                    5328 	inc	hl
      0014F1 78                    5329 	ld	a, b
      0014F2 9E                    5330 	sbc	a, (hl)
      0014F3 78                    5331 	ld	a, b
      0014F4 57                    5332 	ld	d, a
      0014F5 CB 7E                 5333 	bit	7, (hl)
      0014F7 28 07                 5334 	jr	Z, 00167$
      0014F9 CB 7A                 5335 	bit	7, d
      0014FB 20 08                 5336 	jr	NZ, 00168$
      0014FD BF                    5337 	cp	a, a
      0014FE 18 05                 5338 	jr	00168$
      001500                       5339 00167$:
      001500 CB 7A                 5340 	bit	7, d
      001502 28 01                 5341 	jr	Z, 00168$
      001504 37                    5342 	scf
      001505                       5343 00168$:
      001505 38 59                 5344 	jr	C, 00109$
                                   5345 ;src/include/inventory.h:127: (__temp_game_item->y <= (y + 2)) && ((__temp_game_item->y + 1) >= y)) {
      001507 D1                    5346 	pop	de
      001508 D5                    5347 	push	de
      001509 21 04 00              5348 	ld	hl, #0x0004
      00150C 19                    5349 	add	hl, de
      00150D 4D                    5350 	ld	c, l
      00150E 44                    5351 	ld	b, h
      00150F 0A                    5352 	ld	a, (bc)
      001510 4F                    5353 	ld	c, a
      001511 F8 0B                 5354 	ldhl	sp,	#11
      001513 7E                    5355 	ld	a, (hl)
      001514 F8 02                 5356 	ldhl	sp,	#2
      001516 22                    5357 	ld	(hl+), a
      001517 AF                    5358 	xor	a, a
      001518 32                    5359 	ld	(hl-), a
      001519 2A                    5360 	ld	a, (hl+)
      00151A 66                    5361 	ld	h, (hl)
                                   5362 ;	spillPairReg hl
                                   5363 ;	spillPairReg hl
      00151B 6F                    5364 	ld	l, a
                                   5365 ;	spillPairReg hl
                                   5366 ;	spillPairReg hl
      00151C 23                    5367 	inc	hl
      00151D 23                    5368 	inc	hl
      00151E 06 00                 5369 	ld	b, #0x00
      001520 58                    5370 	ld	e, b
      001521 54                    5371 	ld	d, h
      001522 7D                    5372 	ld	a, l
      001523 91                    5373 	sub	a, c
      001524 7C                    5374 	ld	a, h
      001525 98                    5375 	sbc	a, b
      001526 CB 7B                 5376 	bit	7, e
      001528 28 07                 5377 	jr	Z, 00169$
      00152A CB 7A                 5378 	bit	7, d
      00152C 20 08                 5379 	jr	NZ, 00170$
      00152E BF                    5380 	cp	a, a
      00152F 18 05                 5381 	jr	00170$
      001531                       5382 00169$:
      001531 CB 7A                 5383 	bit	7, d
      001533 28 01                 5384 	jr	Z, 00170$
      001535 37                    5385 	scf
      001536                       5386 00170$:
      001536 38 28                 5387 	jr	C, 00109$
      001538 03                    5388 	inc	bc
      001539 F8 02                 5389 	ldhl	sp,	#2
      00153B 79                    5390 	ld	a, c
      00153C 96                    5391 	sub	a, (hl)
      00153D 23                    5392 	inc	hl
      00153E 78                    5393 	ld	a, b
      00153F 9E                    5394 	sbc	a, (hl)
      001540 78                    5395 	ld	a, b
      001541 57                    5396 	ld	d, a
      001542 CB 7E                 5397 	bit	7, (hl)
      001544 28 07                 5398 	jr	Z, 00171$
      001546 CB 7A                 5399 	bit	7, d
      001548 20 08                 5400 	jr	NZ, 00172$
      00154A BF                    5401 	cp	a, a
      00154B 18 05                 5402 	jr	00172$
      00154D                       5403 00171$:
      00154D CB 7A                 5404 	bit	7, d
      00154F 28 01                 5405 	jr	Z, 00172$
      001551 37                    5406 	scf
      001552                       5407 00172$:
      001552 38 0C                 5408 	jr	C, 00109$
                                   5409 ;src/include/inventory.h:128: __temp_game_item2 = __temp_game_item;
      001554 F8 00                 5410 	ldhl	sp,	#0
      001556 7E                    5411 	ld	a, (hl)
      001557 EArCCr02              5412 	ld	(#___temp_game_item2),a
      00155A F8 01                 5413 	ldhl	sp,	#1
      00155C 7E                    5414 	ld	a, (hl)
      00155D EArCDr02              5415 	ld	(#___temp_game_item2 + 1),a
      001560                       5416 00109$:
                                   5417 ;src/include/inventory.h:131: __temp_game_item = __temp_game_item->next;
      001560 D1                    5418 	pop	de
      001561 D5                    5419 	push	de
      001562 21 07 00              5420 	ld	hl, #0x0007
      001565 19                    5421 	add	hl, de
      001566 4D                    5422 	ld	c, l
      001567 44                    5423 	ld	b, h
      001568 59                    5424 	ld	e, c
      001569 50                    5425 	ld	d, b
      00156A 1A                    5426 	ld	a, (de)
      00156B 21rCAr02              5427 	ld	hl, #___temp_game_item
      00156E 22                    5428 	ld	(hl+), a
      00156F 13                    5429 	inc	de
      001570 1A                    5430 	ld	a, (de)
      001571 77                    5431 	ld	(hl), a
      001572 C3r92r14              5432 	jp	00111$
      001575                       5433 00113$:
                                   5434 ;src/include/inventory.h:133: return __temp_game_item2;
      001575 21rCCr02              5435 	ld	hl, #___temp_game_item2
      001578 2A                    5436 	ld	a, (hl+)
      001579 5F                    5437 	ld	e, a
      00157A 56                    5438 	ld	d, (hl)
      00157B                       5439 00114$:
                                   5440 ;src/include/inventory.h:134: }
      00157B E8 04                 5441 	add	sp, #4
      00157D C9                    5442 	ret
                                   5443 ;src/include/inventory.h:137: void init_game_items() {
                                   5444 ;	---------------------------------
                                   5445 ; Function init_game_items
                                   5446 ; ---------------------------------
      00157E                       5447 _init_game_items::
                                   5448 ;src/include/inventory.h:138: game_item_list.first = game_item_list.last = game_item_list.size = 0;
      00157E 21rC5r02              5449 	ld	hl, #_game_item_list
      001581 36 00                 5450 	ld	(hl), #0x00
      001583 21rC8r02              5451 	ld	hl, #(_game_item_list + 3)
      001586 AF                    5452 	xor	a, a
      001587 22                    5453 	ld	(hl+), a
      001588 77                    5454 	ld	(hl), a
      001589 21rC6r02              5455 	ld	hl, #(_game_item_list + 1)
      00158C AF                    5456 	xor	a, a
      00158D 22                    5457 	ld	(hl+), a
      00158E 77                    5458 	ld	(hl), a
                                   5459 ;src/include/inventory.h:139: for (__temp_i = 0; __temp_i < GAME_ITEMS_COUNT; __temp_i++) {
      00158F 21r0Br02              5460 	ld	hl, #___temp_i
      001592 36 00                 5461 	ld	(hl), #0x00
      001594                       5462 00102$:
                                   5463 ;src/include/inventory.h:140: __temp_game_item = &game_items[__temp_i];
      001594 21r0Br02              5464 	ld	hl, #___temp_i
      001597 4E                    5465 	ld	c, (hl)
      001598 06 00                 5466 	ld	b, #0x00
      00159A 69                    5467 	ld	l, c
      00159B 60                    5468 	ld	h, b
      00159C 29                    5469 	add	hl, hl
      00159D 29                    5470 	add	hl, hl
      00159E 29                    5471 	add	hl, hl
      00159F 09                    5472 	add	hl, bc
      0015A0 01r47r02              5473 	ld	bc,#_game_items
      0015A3 09                    5474 	add	hl,bc
      0015A4 4D                    5475 	ld	c, l
      0015A5 7C                    5476 	ld	a, h
      0015A6 21rCAr02              5477 	ld	hl, #___temp_game_item
      0015A9 71                    5478 	ld	(hl), c
      0015AA 23                    5479 	inc	hl
      0015AB 77                    5480 	ld	(hl), a
                                   5481 ;src/include/inventory.h:141: __temp_game_item_desc = all_items_desc[__temp_i];
      0015AC 21r0Br02              5482 	ld	hl, #___temp_i
      0015AF 6E                    5483 	ld	l, (hl)
                                   5484 ;	spillPairReg hl
                                   5485 ;	spillPairReg hl
      0015B0 26 00                 5486 	ld	h, #0x00
                                   5487 ;	spillPairReg hl
                                   5488 ;	spillPairReg hl
      0015B2 29                    5489 	add	hl, hl
      0015B3 11r26r01              5490 	ld	de, #_all_items_desc
      0015B6 19                    5491 	add	hl, de
      0015B7 5D                    5492 	ld	e, l
      0015B8 54                    5493 	ld	d, h
      0015B9 1A                    5494 	ld	a, (de)
      0015BA 21rD0r02              5495 	ld	hl, #___temp_game_item_desc
      0015BD 22                    5496 	ld	(hl+), a
      0015BE 13                    5497 	inc	de
      0015BF 1A                    5498 	ld	a, (de)
      0015C0 77                    5499 	ld	(hl), a
                                   5500 ;src/include/inventory.h:143: __temp_game_item->id = __temp_game_item_desc->id;
      0015C1 21rCAr02              5501 	ld	hl, #___temp_game_item
      0015C4 2A                    5502 	ld	a, (hl+)
      0015C5 4F                    5503 	ld	c, a
      0015C6 46                    5504 	ld	b, (hl)
      0015C7 21rD0r02              5505 	ld	hl, #___temp_game_item_desc
      0015CA 2A                    5506 	ld	a, (hl+)
      0015CB 5F                    5507 	ld	e, a
      0015CC 56                    5508 	ld	d, (hl)
      0015CD 1A                    5509 	ld	a, (de)
      0015CE 02                    5510 	ld	(bc), a
                                   5511 ;src/include/inventory.h:145: __temp_game_item->room_row = __temp_game_item_desc->room_row; 
      0015CF 21rCAr02              5512 	ld	hl, #___temp_game_item
      0015D2 2A                    5513 	ld	a, (hl+)
      0015D3 4F                    5514 	ld	c, a
      0015D4 46                    5515 	ld	b, (hl)
      0015D5 03                    5516 	inc	bc
      0015D6 21rD0r02              5517 	ld	hl, #___temp_game_item_desc
      0015D9 2A                    5518 	ld	a, (hl+)
      0015DA 5F                    5519 	ld	e, a
      0015DB 56                    5520 	ld	d, (hl)
      0015DC 13                    5521 	inc	de
      0015DD 1A                    5522 	ld	a, (de)
      0015DE 02                    5523 	ld	(bc), a
                                   5524 ;src/include/inventory.h:146: __temp_game_item->room_col = __temp_game_item_desc->room_col; 
      0015DF 21rCAr02              5525 	ld	hl, #___temp_game_item
      0015E2 2A                    5526 	ld	a, (hl+)
      0015E3 4F                    5527 	ld	c, a
      0015E4 46                    5528 	ld	b, (hl)
      0015E5 03                    5529 	inc	bc
      0015E6 03                    5530 	inc	bc
      0015E7 21rD0r02              5531 	ld	hl, #___temp_game_item_desc
      0015EA 2A                    5532 	ld	a, (hl+)
      0015EB 5F                    5533 	ld	e, a
      0015EC 56                    5534 	ld	d, (hl)
      0015ED 13                    5535 	inc	de
      0015EE 13                    5536 	inc	de
      0015EF 1A                    5537 	ld	a, (de)
      0015F0 02                    5538 	ld	(bc), a
                                   5539 ;src/include/inventory.h:147: __temp_game_item->x = __temp_game_item_desc->x;
      0015F1 21rCAr02              5540 	ld	hl, #___temp_game_item
      0015F4 2A                    5541 	ld	a, (hl+)
      0015F5 4F                    5542 	ld	c, a
      0015F6 46                    5543 	ld	b, (hl)
      0015F7 03                    5544 	inc	bc
      0015F8 03                    5545 	inc	bc
      0015F9 03                    5546 	inc	bc
      0015FA 21rD0r02              5547 	ld	hl, #___temp_game_item_desc
      0015FD 2A                    5548 	ld	a, (hl+)
      0015FE 5F                    5549 	ld	e, a
      0015FF 56                    5550 	ld	d, (hl)
      001600 13                    5551 	inc	de
      001601 13                    5552 	inc	de
      001602 13                    5553 	inc	de
      001603 1A                    5554 	ld	a, (de)
      001604 02                    5555 	ld	(bc), a
                                   5556 ;src/include/inventory.h:148: __temp_game_item->y = __temp_game_item_desc->y;
      001605 21rCAr02              5557 	ld	hl, #___temp_game_item
      001608 2A                    5558 	ld	a, (hl+)
      001609 4F                    5559 	ld	c, a
      00160A 46                    5560 	ld	b, (hl)
      00160B 03                    5561 	inc	bc
      00160C 03                    5562 	inc	bc
      00160D 03                    5563 	inc	bc
      00160E 03                    5564 	inc	bc
      00160F 21rD0r02              5565 	ld	hl, #___temp_game_item_desc
      001612 2A                    5566 	ld	a, (hl+)
      001613 5F                    5567 	ld	e, a
      001614 56                    5568 	ld	d, (hl)
      001615 13                    5569 	inc	de
      001616 13                    5570 	inc	de
      001617 13                    5571 	inc	de
      001618 13                    5572 	inc	de
      001619 1A                    5573 	ld	a, (de)
      00161A 02                    5574 	ld	(bc), a
                                   5575 ;src/include/inventory.h:149: __temp_game_item->desc = __temp_game_item_desc;
      00161B 21rCAr02              5576 	ld	hl, #___temp_game_item
      00161E 2A                    5577 	ld	a, (hl+)
      00161F 4F                    5578 	ld	c, a
      001620 46                    5579 	ld	b, (hl)
      001621 03                    5580 	inc	bc
      001622 03                    5581 	inc	bc
      001623 03                    5582 	inc	bc
      001624 03                    5583 	inc	bc
      001625 03                    5584 	inc	bc
      001626 21rD0r02              5585 	ld	hl, #___temp_game_item_desc
      001629 2A                    5586 	ld	a, (hl+)
      00162A 02                    5587 	ld	(bc), a
      00162B 03                    5588 	inc	bc
      00162C 7E                    5589 	ld	a, (hl)
      00162D 02                    5590 	ld	(bc), a
                                   5591 ;src/include/inventory.h:151: push_last((items_list *)&game_item_list, __temp_game_item);
      00162E 21rCAr02              5592 	ld	hl, #___temp_game_item
      001631 2A                    5593 	ld	a, (hl+)
      001632 5F                    5594 	ld	e, a
      001633 56                    5595 	ld	d, (hl)
      001634 D5                    5596 	push	de
      001635 11rC5r02              5597 	ld	de, #_game_item_list
      001638 D5                    5598 	push	de
      001639 CDrF3r12              5599 	call	_push_last
      00163C E8 04                 5600 	add	sp, #4
                                   5601 ;src/include/inventory.h:139: for (__temp_i = 0; __temp_i < GAME_ITEMS_COUNT; __temp_i++) {
      00163E 21r0Br02              5602 	ld	hl, #___temp_i
      001641 34                    5603 	inc	(hl)
      001642 7E                    5604 	ld	a, (hl)
      001643 D6 0E                 5605 	sub	a, #0x0e
      001645 DAr94r15              5606 	jp	C, 00102$
                                   5607 ;src/include/inventory.h:153: inventory_item_list.first = inventory_item_list.last = inventory_item_list.size = 0;
      001648 21rB6r03              5608 	ld	hl, #_inventory_item_list
      00164B 36 00                 5609 	ld	(hl), #0x00
      00164D 21rB9r03              5610 	ld	hl, #(_inventory_item_list + 3)
      001650 AF                    5611 	xor	a, a
      001651 22                    5612 	ld	(hl+), a
      001652 77                    5613 	ld	(hl), a
      001653 21rB7r03              5614 	ld	hl, #(_inventory_item_list + 1)
      001656 AF                    5615 	xor	a, a
      001657 22                    5616 	ld	(hl+), a
      001658 77                    5617 	ld	(hl), a
                                   5618 ;src/include/inventory.h:154: item_stack.first = item_stack.last = item_stack.size = 0;
      001659 21rBBr03              5619 	ld	hl, #_item_stack
      00165C 36 00                 5620 	ld	(hl), #0x00
      00165E 21rBEr03              5621 	ld	hl, #(_item_stack + 3)
      001661 AF                    5622 	xor	a, a
      001662 22                    5623 	ld	(hl+), a
      001663 77                    5624 	ld	(hl), a
      001664 21rBCr03              5625 	ld	hl, #(_item_stack + 1)
      001667 AF                    5626 	xor	a, a
      001668 22                    5627 	ld	(hl+), a
      001669 77                    5628 	ld	(hl), a
                                   5629 ;src/include/inventory.h:155: }
      00166A C9                    5630 	ret
                                   5631 ;src/include/room_defaults.h:1: void default_draw() {
                                   5632 ;	---------------------------------
                                   5633 ; Function default_draw
                                   5634 ; ---------------------------------
      00166B                       5635 _default_draw::
                                   5636 ;src/include/room_defaults.h:3: rle_decompress_data(current_room->room_map->rle_data, (UWORD)current_room->room_map->size, coll_buf);
      00166B 21r0Er00              5637 	ld	hl, #_current_room
      00166E 6E                    5638 	ld	l, (hl)
                                   5639 ;	spillPairReg hl
                                   5640 ;	spillPairReg hl
      00166F FAr0Fr00              5641 	ld	a, (_current_room + 1)
      001672 67                    5642 	ld	h, a
                                   5643 ;	spillPairReg hl
                                   5644 ;	spillPairReg hl
      001673 23                    5645 	inc	hl
      001674 2A                    5646 	ld	a, (hl+)
      001675 4F                    5647 	ld	c, a
      001676 46                    5648 	ld	b, (hl)
      001677 69                    5649 	ld	l, c
      001678 60                    5650 	ld	h, b
      001679 2A                    5651 	ld	a,	(hl+)
      00167A 66                    5652 	ld	h, (hl)
                                   5653 ;	spillPairReg hl
      00167B 6F                    5654 	ld	l, a
                                   5655 ;	spillPairReg hl
                                   5656 ;	spillPairReg hl
      00167C 03                    5657 	inc	bc
      00167D 03                    5658 	inc	bc
      00167E 11r00r00              5659 	ld	de, #_coll_buf
      001681 D5                    5660 	push	de
      001682 E5                    5661 	push	hl
      001683 C5                    5662 	push	bc
      001684 CDr9Cr01              5663 	call	_rle_decompress_data
      001687 E8 06                 5664 	add	sp, #6
                                   5665 ;src/include/room_defaults.h:4: place_room_items(current_room_y, current_room_x, coll_buf);
      001689 11r00r00              5666 	ld	de, #_coll_buf
      00168C D5                    5667 	push	de
      00168D FAr0Cr00              5668 	ld	a, (#_current_room_x)
      001690 67                    5669 	ld	h, a
      001691 FAr0Dr00              5670 	ld	a, (#_current_room_y)
      001694 6F                    5671 	ld	l, a
      001695 E5                    5672 	push	hl
      001696 CDrBEr01              5673 	call	_place_room_items
      001699 E8 04                 5674 	add	sp, #4
                                   5675 ;src/include/room_defaults.h:6: set_bkg_tiles(0, 3, room_width, room_height, coll_buf);
      00169B 11r00r00              5676 	ld	de, #_coll_buf
      00169E D5                    5677 	push	de
      00169F 21 1E 11              5678 	ld	hl, #0x111e
      0016A2 E5                    5679 	push	hl
      0016A3 21 00 03              5680 	ld	hl, #0x300
      0016A6 E5                    5681 	push	hl
      0016A7 CDr00r00              5682 	call	_set_bkg_tiles
      0016AA E8 06                 5683 	add	sp, #6
                                   5684 ;src/include/room_defaults.h:7: }
      0016AC C9                    5685 	ret
                                   5686 ;src/include/room_defaults.h:9: UBYTE default_drop(UBYTE id) {
                                   5687 ;	---------------------------------
                                   5688 ; Function default_drop
                                   5689 ; ---------------------------------
      0016AD                       5690 _default_drop::
                                   5691 ;src/include/room_defaults.h:11: if (id == ID_FIREFLY) {
      0016AD F8 02                 5692 	ldhl	sp,	#2
      0016AF 7E                    5693 	ld	a, (hl)
      0016B0 D6 08                 5694 	sub	a, #0x08
      0016B2 20 2D                 5695 	jr	NZ, 00104$
                                   5696 ;src/include/room_defaults.h:12: show_dialog_window(4, &firefly_out);
      0016B4 11r00r00              5697 	ld	de, #_firefly_out
      0016B7 D5                    5698 	push	de
      0016B8 3E 04                 5699 	ld	a, #0x04
      0016BA F5                    5700 	push	af
      0016BB 33                    5701 	inc	sp
      0016BC CDr71r00              5702 	call	_show_dialog_window
      0016BF E8 03                 5703 	add	sp, #3
                                   5704 ;src/include/room_defaults.h:14: temp_item = pop_by_id(&item_stack, ID_JAR);
      0016C1 3E 06                 5705 	ld	a, #0x06
      0016C3 F5                    5706 	push	af
      0016C4 33                    5707 	inc	sp
      0016C5 11rBBr03              5708 	ld	de, #_item_stack
      0016C8 D5                    5709 	push	de
      0016C9 CDr5Er13              5710 	call	_pop_by_id
      0016CC E8 03                 5711 	add	sp, #3
      0016CE 4B                    5712 	ld	c, e
                                   5713 ;src/include/room_defaults.h:15: if (temp_item) push_last(&inventory_item_list, temp_item);
      0016CF 7A                    5714 	ld	a,d
      0016D0 47                    5715 	ld	b,a
      0016D1 B3                    5716 	or	a, e
      0016D2 28 0A                 5717 	jr	Z, 00102$
      0016D4 C5                    5718 	push	bc
      0016D5 11rB6r03              5719 	ld	de, #_inventory_item_list
      0016D8 D5                    5720 	push	de
      0016D9 CDrF3r12              5721 	call	_push_last
      0016DC E8 04                 5722 	add	sp, #4
      0016DE                       5723 00102$:
                                   5724 ;src/include/room_defaults.h:17: return ID_LID;
      0016DE 1E 07                 5725 	ld	e, #0x07
      0016E0 C9                    5726 	ret
      0016E1                       5727 00104$:
                                   5728 ;src/include/room_defaults.h:19: return ID_ITEM_NONE;
      0016E1 1E 00                 5729 	ld	e, #0x00
                                   5730 ;src/include/room_defaults.h:20: }
      0016E3 C9                    5731 	ret
                                   5732 ;src/mushroompie.c:401: void reset_world() {
                                   5733 ;	---------------------------------
                                   5734 ; Function reset_world
                                   5735 ; ---------------------------------
      0016E4                       5736 _reset_world::
      0016E4 E8 FC                 5737 	add	sp, #-4
                                   5738 ;src/mushroompie.c:402: for (UBYTE row = 0; row < WORLD_HEIGHT; row++) {
      0016E6 0E 00                 5739 	ld	c, #0x00
      0016E8                       5740 00110$:
      0016E8 79                    5741 	ld	a, c
      0016E9 D6 02                 5742 	sub	a, #0x02
      0016EB 30 65                 5743 	jr	NC, 00112$
                                   5744 ;src/mushroompie.c:403: for (UBYTE col = 0; col < WORLD_WIDTH; col++) {
      0016ED 06 00                 5745 	ld	b, #0x00
      0016EF                       5746 00107$:
      0016EF 78                    5747 	ld	a, b
      0016F0 D6 06                 5748 	sub	a, #0x06
      0016F2 30 5B                 5749 	jr	NC, 00111$
                                   5750 ;src/mushroompie.c:404: const room_t * cur_room = dizzy_world[row]->rooms[col];
      0016F4 69                    5751 	ld	l, c
                                   5752 ;	spillPairReg hl
                                   5753 ;	spillPairReg hl
      0016F5 26 00                 5754 	ld	h, #0x00
                                   5755 ;	spillPairReg hl
                                   5756 ;	spillPairReg hl
      0016F7 29                    5757 	add	hl, hl
      0016F8 11r1Dr06              5758 	ld	de, #_dizzy_world
      0016FB 19                    5759 	add	hl, de
      0016FC 2A                    5760 	ld	a, (hl+)
      0016FD 6E                    5761 	ld	l, (hl)
                                   5762 ;	spillPairReg hl
      0016FE 5F                    5763 	ld	e, a
      0016FF 55                    5764 	ld	d, l
      001700 13                    5765 	inc	de
      001701 68                    5766 	ld	l, b
                                   5767 ;	spillPairReg hl
                                   5768 ;	spillPairReg hl
      001702 26 00                 5769 	ld	h, #0x00
                                   5770 ;	spillPairReg hl
                                   5771 ;	spillPairReg hl
      001704 29                    5772 	add	hl, hl
      001705 19                    5773 	add	hl, de
      001706 5D                    5774 	ld	e, l
      001707 54                    5775 	ld	d, h
      001708 1A                    5776 	ld	a, (de)
      001709 F8 00                 5777 	ldhl	sp,	#0
      00170B 22                    5778 	ld	(hl+), a
      00170C 13                    5779 	inc	de
      00170D 1A                    5780 	ld	a, (de)
      00170E 77                    5781 	ld	(hl), a
                                   5782 ;src/mushroompie.c:405: if ((cur_room) && (cur_room->room_reset)) push_bank(cur_room->bank),cur_room->room_reset(),pop_bank();
      00170F F8 01                 5783 	ldhl	sp,	#1
      001711 3A                    5784 	ld	a, (hl-)
      001712 B6                    5785 	or	a, (hl)
      001713 28 37                 5786 	jr	Z, 00108$
      001715 D1                    5787 	pop	de
      001716 D5                    5788 	push	de
      001717 21 17 00              5789 	ld	hl, #0x0017
      00171A 19                    5790 	add	hl, de
      00171B E5                    5791 	push	hl
      00171C 7D                    5792 	ld	a, l
      00171D F8 04                 5793 	ldhl	sp,	#4
      00171F 77                    5794 	ld	(hl), a
      001720 E1                    5795 	pop	hl
      001721 7C                    5796 	ld	a, h
      001722 F8 03                 5797 	ldhl	sp,	#3
      001724 32                    5798 	ld	(hl-), a
      001725 2A                    5799 	ld	a, (hl+)
      001726 5F                    5800 	ld	e, a
      001727 56                    5801 	ld	d, (hl)
      001728 1A                    5802 	ld	a, (de)
      001729 6F                    5803 	ld	l, a
                                   5804 ;	spillPairReg hl
                                   5805 ;	spillPairReg hl
      00172A 13                    5806 	inc	de
      00172B 1A                    5807 	ld	a, (de)
      00172C B5                    5808 	or	a, l
      00172D 28 1D                 5809 	jr	Z, 00108$
      00172F D1                    5810 	pop	de
      001730 D5                    5811 	push	de
      001731 1A                    5812 	ld	a, (de)
      001732 C5                    5813 	push	bc
      001733 F5                    5814 	push	af
      001734 33                    5815 	inc	sp
      001735 CDr00r00              5816 	call	_push_bank
      001738 33                    5817 	inc	sp
      001739 C1                    5818 	pop	bc
      00173A F8 02                 5819 	ldhl	sp,#2
      00173C 2A                    5820 	ld	a, (hl+)
      00173D 5F                    5821 	ld	e, a
      00173E 56                    5822 	ld	d, (hl)
      00173F 1A                    5823 	ld	a, (de)
      001740 6F                    5824 	ld	l, a
                                   5825 ;	spillPairReg hl
                                   5826 ;	spillPairReg hl
      001741 13                    5827 	inc	de
      001742 1A                    5828 	ld	a, (de)
      001743 67                    5829 	ld	h, a
                                   5830 ;	spillPairReg hl
                                   5831 ;	spillPairReg hl
      001744 C5                    5832 	push	bc
      001745 CDr00r00              5833 	call	___sdcc_call_hl
      001748 CDr00r00              5834 	call	_pop_bank
      00174B C1                    5835 	pop	bc
      00174C                       5836 00108$:
                                   5837 ;src/mushroompie.c:403: for (UBYTE col = 0; col < WORLD_WIDTH; col++) {
      00174C 04                    5838 	inc	b
      00174D 18 A0                 5839 	jr	00107$
      00174F                       5840 00111$:
                                   5841 ;src/mushroompie.c:402: for (UBYTE row = 0; row < WORLD_HEIGHT; row++) {
      00174F 0C                    5842 	inc	c
      001750 18 96                 5843 	jr	00110$
      001752                       5844 00112$:
                                   5845 ;src/mushroompie.c:408: }
      001752 E8 04                 5846 	add	sp, #4
      001754 C9                    5847 	ret
                                   5848 ;src/mushroompie.c:410: void init_game() {
                                   5849 ;	---------------------------------
                                   5850 ; Function init_game
                                   5851 ; ---------------------------------
      001755                       5852 _init_game::
                                   5853 ;src/mushroompie.c:411: FADE_OUT;
      001755 3E 01                 5854 	ld	a, #0x01
      001757 F5                    5855 	push	af
      001758 33                    5856 	inc	sp
      001759 CDr00r00              5857 	call	_push_bank
      00175C 33                    5858 	inc	sp
      00175D 21 2C 2C              5859 	ld	hl, #0x2c2c
      001760 E5                    5860 	push	hl
      001761 21 00 93              5861 	ld	hl, #0x9300
      001764 E5                    5862 	push	hl
      001765 CDr00r00              5863 	call	_FadeDMG
      001768 E8 04                 5864 	add	sp, #4
      00176A CDr00r00              5865 	call	_pop_bank
                                   5866 ;src/mushroompie.c:413: reset_world();
      00176D CDrE4r16              5867 	call	_reset_world
                                   5868 ;src/mushroompie.c:415: init_game_items();
      001770 CDr7Er15              5869 	call	_init_game_items
                                   5870 ;src/mushroompie.c:417: game_over = 0;
      001773 21r1Er00              5871 	ld	hl, #_game_over
      001776 36 00                 5872 	ld	(hl), #0x00
                                   5873 ;src/mushroompie.c:418: init_dizzy_coins(); show_coins();
      001778 CDrDEr07              5874 	call	_init_dizzy_coins
      00177B CDr66r08              5875 	call	_show_coins
                                   5876 ;src/mushroompie.c:419: init_dizzy_lives(); show_lives();
      00177E CDrE4r07              5877 	call	_init_dizzy_lives
      001781 CDr15r08              5878 	call	_show_lives
                                   5879 ;src/mushroompie.c:420: init_dizzy_energy(); show_energy();
      001784 CDrEAr07              5880 	call	_init_dizzy_energy
      001787 CDr8Fr08              5881 	call	_show_energy
                                   5882 ;src/mushroompie.c:422: current_room_x = 1, current_room_y = 1; 
      00178A 21r0Cr00              5883 	ld	hl, #_current_room_x
      00178D 36 01                 5884 	ld	(hl), #0x01
      00178F 21r0Dr00              5885 	ld	hl, #_current_room_y
      001792 36 01                 5886 	ld	(hl), #0x01
                                   5887 ;src/mushroompie.c:423: set_room(current_room_y, current_room_x, 0);    
      001794 AF                    5888 	xor	a, a
      001795 67                    5889 	ld	h, a
      001796 2E 01                 5890 	ld	l, #0x01
      001798 E5                    5891 	push	hl
      001799 3E 01                 5892 	ld	a, #0x01
      00179B F5                    5893 	push	af
      00179C 33                    5894 	inc	sp
      00179D CDrC0r10              5895 	call	_set_room
      0017A0 E8 03                 5896 	add	sp, #3
                                   5897 ;src/mushroompie.c:425: set_dizzy_animdata(&m_stand_0);
      0017A2 11r00r00              5898 	ld	de, #_m_stand_0
      0017A5 D5                    5899 	push	de
      0017A6 CDr01r0D              5900 	call	_set_dizzy_animdata
      0017A9 E1                    5901 	pop	hl
                                   5902 ;src/mushroompie.c:427: dizzy_x = 116, dizzy_y = 72;
      0017AA 21r10r00              5903 	ld	hl, #_dizzy_x
      0017AD 3E 74                 5904 	ld	a, #0x74
      0017AF 22                    5905 	ld	(hl+), a
      0017B0 AF                    5906 	xor	a, a
      0017B1 77                    5907 	ld	(hl), a
      0017B2 21r12r00              5908 	ld	hl, #_dizzy_y
      0017B5 3E 48                 5909 	ld	a, #0x48
      0017B7 22                    5910 	ld	(hl+), a
      0017B8 AF                    5911 	xor	a, a
      0017B9 77                    5912 	ld	(hl), a
                                   5913 ;src/mushroompie.c:428: ani_type = ANI_STAND; ani_phase = 0;
      0017BA 21r02r00              5914 	ld	hl, #_ani_type
      0017BD 36 00                 5915 	ld	(hl), #0x00
      0017BF 21r03r00              5916 	ld	hl, #_ani_phase
      0017C2 36 00                 5917 	ld	(hl), #0x00
                                   5918 ;src/mushroompie.c:429: set_dizzy_position();
      0017C4 CDr1Fr0D              5919 	call	_set_dizzy_position
                                   5920 ;src/mushroompie.c:431: delay(200);
      0017C7 11 C8 00              5921 	ld	de, #0x00c8
      0017CA D5                    5922 	push	de
      0017CB CDr00r00              5923 	call	_delay
      0017CE E1                    5924 	pop	hl
                                   5925 ;src/mushroompie.c:432: FADE_IN;
      0017CF 3E 01                 5926 	ld	a, #0x01
      0017D1 F5                    5927 	push	af
      0017D2 33                    5928 	inc	sp
      0017D3 CDr00r00              5929 	call	_push_bank
      0017D6 33                    5930 	inc	sp
      0017D7 21 2C 2C              5931 	ld	hl, #0x2c2c
      0017DA E5                    5932 	push	hl
      0017DB 3E 93                 5933 	ld	a, #0x93
      0017DD F5                    5934 	push	af
      0017DE 33                    5935 	inc	sp
      0017DF 3E 01                 5936 	ld	a, #0x01
      0017E1 F5                    5937 	push	af
      0017E2 33                    5938 	inc	sp
      0017E3 CDr00r00              5939 	call	_FadeDMG
      0017E6 E8 04                 5940 	add	sp, #4
                                   5941 ;src/mushroompie.c:433: }
      0017E8 C3r00r00              5942 	jp	_pop_bank
                                   5943 ;src/mushroompie.c:437: void main() {
                                   5944 ;	---------------------------------
                                   5945 ; Function main
                                   5946 ; ---------------------------------
      0017EB                       5947 _main::
      0017EB 3B                    5948 	dec	sp
      0017EC 3B                    5949 	dec	sp
                                   5950 ;src/mushroompie.c:438: DISPLAY_OFF;
      0017ED CDr00r00              5951 	call	_display_off
                                   5952 ;src/mushroompie.c:440: set_bank(1);
      0017F0 3E 01                 5953 	ld	a, #0x01
      0017F2 F5                    5954 	push	af
      0017F3 33                    5955 	inc	sp
      0017F4 CDr00r00              5956 	call	_set_bank
      0017F7 33                    5957 	inc	sp
                                   5958 ;src/mushroompie.c:443: NR52_REG = 0x80; // Enables sound, always set this first
      0017F8 3E 80                 5959 	ld	a, #0x80
      0017FA E0r00                 5960 	ldh	(_NR52_REG + 0), a
                                   5961 ;src/mushroompie.c:444: NR51_REG = 0xFF; // Enables all channels (left and right)
      0017FC 3E FF                 5962 	ld	a, #0xff
      0017FE E0r00                 5963 	ldh	(_NR51_REG + 0), a
                                   5964 ;src/mushroompie.c:445: NR50_REG = 0x77; // Max volume
      001800 3E 77                 5965 	ld	a, #0x77
      001802 E0r00                 5966 	ldh	(_NR50_REG + 0), a
                                   5967 ;src/mushroompie.c:447: hUGE_init(song);
      001804 11r00r00              5968 	ld	de, #_song
      001807 D5                    5969 	push	de
      001808 CDr00r00              5970 	call	_hUGE_init
      00180B E1                    5971 	pop	hl
                                   5972 ;src/mushroompie.c:467: }
      00180C F3                    5973 	di
                                   5974 ;src/mushroompie.c:450: LCDC_REG = 0x44U;
      00180D 3E 44                 5975 	ld	a, #0x44
      00180F E0r00                 5976 	ldh	(_LCDC_REG + 0), a
                                   5977 ;src/mushroompie.c:453: STAT_REG = 0x50;
      001811 3E 50                 5978 	ld	a, #0x50
      001813 E0r00                 5979 	ldh	(_STAT_REG + 0), a
                                   5980 ;src/mushroompie.c:454: LYC_REG = 0;
      001815 AF                    5981 	xor	a, a
      001816 E0r00                 5982 	ldh	(_LYC_REG + 0), a
                                   5983 ;src/mushroompie.c:456: add_LCD(lcd_interrupt); 
      001818 11r00r00              5984 	ld	de, #_lcd_interrupt
      00181B D5                    5985 	push	de
      00181C CDr00r00              5986 	call	_add_LCD
      00181F E1                    5987 	pop	hl
                                   5988 ;src/mushroompie.c:457: add_VBL(vbl_interrupt); 
      001820 11r4Ar00              5989 	ld	de, #_vbl_interrupt
      001823 D5                    5990 	push	de
      001824 CDr00r00              5991 	call	_add_VBL
      001827 E1                    5992 	pop	hl
                                   5993 ;src/mushroompie.c:463: add_LCD(wait_int_handler);
      001828 11r00r00              5994 	ld	de, #_wait_int_handler
      00182B D5                    5995 	push	de
      00182C CDr00r00              5996 	call	_add_LCD
      00182F E1                    5997 	pop	hl
                                   5998 ;src/mushroompie.c:466: set_interrupts(VBL_IFLAG | LCD_IFLAG);
      001830 3E 03                 5999 	ld	a, #0x03
      001832 F5                    6000 	push	af
      001833 33                    6001 	inc	sp
      001834 CDr00r00              6002 	call	_set_interrupts
      001837 33                    6003 	inc	sp
      001838 FB                    6004 	ei
                                   6005 ;src/mushroompie.c:470: BGP_REG = OBP0_REG = OBP1_REG = 0xFF;
      001839 3E FF                 6006 	ld	a, #0xff
      00183B E0r00                 6007 	ldh	(_OBP1_REG + 0), a
      00183D 3E FF                 6008 	ld	a, #0xff
      00183F E0r00                 6009 	ldh	(_OBP0_REG + 0), a
      001841 3E FF                 6010 	ld	a, #0xff
      001843 E0r00                 6011 	ldh	(_BGP_REG + 0), a
                                   6012 ;src/mushroompie.c:472: SPRITES_8x8;
      001845 F0r00                 6013 	ldh	a, (_LCDC_REG + 0)
      001847 E6 FB                 6014 	and	a, #0xfb
      001849 E0r00                 6015 	ldh	(_LCDC_REG + 0), a
                                   6016 ;src/mushroompie.c:473: init_dizzy();
      00184B CDrE2r0C              6017 	call	_init_dizzy
                                   6018 ;src/mushroompie.c:474: SHOW_SPRITES;
      00184E F0r00                 6019 	ldh	a, (_LCDC_REG + 0)
      001850 F6 02                 6020 	or	a, #0x02
      001852 E0r00                 6021 	ldh	(_LCDC_REG + 0), a
                                   6022 ;src/mushroompie.c:476: WX_REG = 7; WY_REG = 0;
      001854 3E 07                 6023 	ld	a, #0x07
      001856 E0r00                 6024 	ldh	(_WX_REG + 0), a
      001858 AF                    6025 	xor	a, a
      001859 E0r00                 6026 	ldh	(_WY_REG + 0), a
                                   6027 ;src/mushroompie.c:480: window_tiles_hiwater -= title_tiles.count;
      00185B 21r00r00              6028 	ld	hl, #_title_tiles
      00185E 4E                    6029 	ld	c, (hl)
      00185F AF                    6030 	xor	a, a
      001860 91                    6031 	sub	a, c
      001861 21r43r02              6032 	ld	hl, #_window_tiles_hiwater
      001864 77                    6033 	ld	(hl), a
                                   6034 ;src/mushroompie.c:481: unshrink_tiles(window_tiles_hiwater, title_tiles.count, title_tiles.data);
      001865 01r01r00              6035 	ld	bc, #_title_tiles + 1
      001868 FAr00r00              6036 	ld	a, (#_title_tiles + 0)
      00186B C5                    6037 	push	bc
      00186C F5                    6038 	push	af
      00186D 33                    6039 	inc	sp
      00186E 7E                    6040 	ld	a, (hl)
      00186F F5                    6041 	push	af
      001870 33                    6042 	inc	sp
      001871 CDr10r00              6043 	call	_unshrink_tiles
      001874 E8 04                 6044 	add	sp, #4
                                   6045 ;src/mushroompie.c:483: inventoty_tiles_start = window_tiles_hiwater -= dialog_frame_tiles.count;
      001876 21r00r00              6046 	ld	hl, #_dialog_frame_tiles
      001879 4E                    6047 	ld	c, (hl)
      00187A FAr43r02              6048 	ld	a, (#_window_tiles_hiwater)
      00187D 91                    6049 	sub	a, c
      00187E EAr44r02              6050 	ld	(#_inventoty_tiles_start),a
      001881 21r43r02              6051 	ld	hl, #_window_tiles_hiwater
      001884 77                    6052 	ld	(hl), a
                                   6053 ;src/mushroompie.c:484: unshrink_tiles(window_tiles_hiwater, dialog_frame_tiles.count, dialog_frame_tiles.data);
      001885 01r01r00              6054 	ld	bc, #_dialog_frame_tiles + 1
      001888 FAr00r00              6055 	ld	a, (#_dialog_frame_tiles + 0)
      00188B C5                    6056 	push	bc
      00188C F5                    6057 	push	af
      00188D 33                    6058 	inc	sp
      00188E 7E                    6059 	ld	a, (hl)
      00188F F5                    6060 	push	af
      001890 33                    6061 	inc	sp
      001891 CDr10r00              6062 	call	_unshrink_tiles
      001894 E8 04                 6063 	add	sp, #4
                                   6064 ;src/mushroompie.c:486: dizzy_energy_start = window_tiles_hiwater -= energy_tiles.count;
      001896 21r00r00              6065 	ld	hl, #_energy_tiles
      001899 4E                    6066 	ld	c, (hl)
      00189A FAr43r02              6067 	ld	a, (#_window_tiles_hiwater)
      00189D 91                    6068 	sub	a, c
      00189E EAr11r02              6069 	ld	(#_dizzy_energy_start),a
      0018A1 21r43r02              6070 	ld	hl, #_window_tiles_hiwater
      0018A4 77                    6071 	ld	(hl), a
                                   6072 ;src/mushroompie.c:487: unshrink_tiles(window_tiles_hiwater, energy_tiles.count, energy_tiles.data);
      0018A5 01r01r00              6073 	ld	bc, #_energy_tiles + 1
      0018A8 FAr00r00              6074 	ld	a, (#_energy_tiles + 0)
      0018AB C5                    6075 	push	bc
      0018AC F5                    6076 	push	af
      0018AD 33                    6077 	inc	sp
      0018AE 7E                    6078 	ld	a, (hl)
      0018AF F5                    6079 	push	af
      0018B0 33                    6080 	inc	sp
      0018B1 CDr10r00              6081 	call	_unshrink_tiles
      0018B4 E8 04                 6082 	add	sp, #4
                                   6083 ;src/mushroompie.c:489: font_tiles_start = window_tiles_hiwater -= font_tiles.count;
      0018B6 21r00r00              6084 	ld	hl, #_font_tiles
      0018B9 4E                    6085 	ld	c, (hl)
      0018BA FAr43r02              6086 	ld	a, (#_window_tiles_hiwater)
      0018BD 91                    6087 	sub	a, c
      0018BE EAr45r02              6088 	ld	(#_font_tiles_start),a
      0018C1 EAr43r02              6089 	ld	(#_window_tiles_hiwater),a
                                   6090 ;src/mushroompie.c:490: digits_start = font_tiles_start + 0x0F;
      0018C4 21r45r02              6091 	ld	hl, #_font_tiles_start
      0018C7 4E                    6092 	ld	c, (hl)
      0018C8 79                    6093 	ld	a, c
      0018C9 C6 0F                 6094 	add	a, #0x0f
      0018CB EAr12r02              6095 	ld	(#_digits_start),a
                                   6096 ;src/mushroompie.c:491: dizzy_live_symbol = font_tiles_start + 0x1F;
      0018CE 79                    6097 	ld	a, c
      0018CF C6 1F                 6098 	add	a, #0x1f
      0018D1 EAr10r02              6099 	ld	(#_dizzy_live_symbol),a
                                   6100 ;src/mushroompie.c:492: unshrink_tiles(window_tiles_hiwater, font_tiles.count, font_tiles.data);
      0018D4 01r01r00              6101 	ld	bc, #_font_tiles + 1
      0018D7 FAr00r00              6102 	ld	a, (#_font_tiles + 0)
      0018DA C5                    6103 	push	bc
      0018DB F5                    6104 	push	af
      0018DC 33                    6105 	inc	sp
      0018DD FAr43r02              6106 	ld	a, (#_window_tiles_hiwater)
      0018E0 F5                    6107 	push	af
      0018E1 33                    6108 	inc	sp
      0018E2 CDr10r00              6109 	call	_unshrink_tiles
      0018E5 E8 04                 6110 	add	sp, #4
                                   6111 ;src/mushroompie.c:494: set_win_tiles(0, 0, 20, 3, title_map);
      0018E7 11r00r00              6112 	ld	de, #_title_map
      0018EA D5                    6113 	push	de
      0018EB 21 14 03              6114 	ld	hl, #0x314
      0018EE E5                    6115 	push	hl
      0018EF AF                    6116 	xor	a, a
      0018F0 0F                    6117 	rrca
      0018F1 F5                    6118 	push	af
      0018F2 CDr00r00              6119 	call	_set_win_tiles
      0018F5 E8 06                 6120 	add	sp, #6
                                   6121 ;src/mushroompie.c:496: current_room_x = 1, current_room_y = 1; 
      0018F7 21r0Cr00              6122 	ld	hl, #_current_room_x
      0018FA 36 01                 6123 	ld	(hl), #0x01
      0018FC 21r0Dr00              6124 	ld	hl, #_current_room_y
      0018FF 36 01                 6125 	ld	(hl), #0x01
                                   6126 ;src/mushroompie.c:498: init_game_items();
      001901 CDr7Er15              6127 	call	_init_game_items
                                   6128 ;src/mushroompie.c:499: set_room(current_room_y, current_room_x, 0);
      001904 AF                    6129 	xor	a, a
      001905 F5                    6130 	push	af
      001906 33                    6131 	inc	sp
      001907 FAr0Cr00              6132 	ld	a, (#_current_room_x)
      00190A 67                    6133 	ld	h, a
      00190B FAr0Dr00              6134 	ld	a, (#_current_room_y)
      00190E 6F                    6135 	ld	l, a
      00190F E5                    6136 	push	hl
      001910 CDrC0r10              6137 	call	_set_room
      001913 E8 03                 6138 	add	sp, #3
                                   6139 ;src/mushroompie.c:501: SHOW_BKG;
      001915 F0r00                 6140 	ldh	a, (_LCDC_REG + 0)
      001917 F6 01                 6141 	or	a, #0x01
      001919 E0r00                 6142 	ldh	(_LCDC_REG + 0), a
                                   6143 ;src/mushroompie.c:502: DISPLAY_ON;
      00191B F0r00                 6144 	ldh	a, (_LCDC_REG + 0)
      00191D F6 80                 6145 	or	a, #0x80
      00191F E0r00                 6146 	ldh	(_LCDC_REG + 0), a
                                   6147 ;src/mushroompie.c:505: FADE_IN;
      001921 3E 01                 6148 	ld	a, #0x01
      001923 F5                    6149 	push	af
      001924 33                    6150 	inc	sp
      001925 CDr00r00              6151 	call	_push_bank
      001928 33                    6152 	inc	sp
      001929 21 2C 2C              6153 	ld	hl, #0x2c2c
      00192C E5                    6154 	push	hl
      00192D 21 01 93              6155 	ld	hl, #0x9301
      001930 E5                    6156 	push	hl
      001931 CDr00r00              6157 	call	_FadeDMG
      001934 E8 04                 6158 	add	sp, #4
      001936 CDr00r00              6159 	call	_pop_bank
                                   6160 ;src/mushroompie.c:507: show_dialog_window(6, &start_dialog);
      001939 11r00r00              6161 	ld	de, #_start_dialog
      00193C D5                    6162 	push	de
      00193D 3E 06                 6163 	ld	a, #0x06
      00193F F5                    6164 	push	af
      001940 33                    6165 	inc	sp
      001941 CDr71r00              6166 	call	_show_dialog_window
      001944 E8 03                 6167 	add	sp, #3
                                   6168 ;src/mushroompie.c:509: init_game();
      001946 CDr55r17              6169 	call	_init_game
                                   6170 ;src/mushroompie.c:517: while(1) {
      001949                       6171 00208$:
                                   6172 ;src/mushroompie.c:518: ani_type_old = ani_type;
      001949 FAr02r00              6173 	ld	a, (#_ani_type)
      00194C EAr00r02              6174 	ld	(#_ani_type_old),a
                                   6175 ;src/mushroompie.c:520: if (!death_pause) {
      00194F FAr1Fr00              6176 	ld	a, (#_death_pause)
      001952 B7                    6177 	or	a, a
      001953 C2rB0r1C              6178 	jp	NZ, 00160$
                                   6179 ;src/mushroompie.c:521: joy = joypad();
      001956 CDr00r00              6180 	call	_joypad
      001959 21r1Dr00              6181 	ld	hl, #_joy
      00195C 73                    6182 	ld	(hl), e
                                   6183 ;src/mushroompie.c:522: __temp_i = animation[ani_type]->interr;
      00195D 01r39r05              6184 	ld	bc, #_animation+0
      001960 21r02r00              6185 	ld	hl, #_ani_type
      001963 6E                    6186 	ld	l, (hl)
                                   6187 ;	spillPairReg hl
                                   6188 ;	spillPairReg hl
      001964 26 00                 6189 	ld	h, #0x00
                                   6190 ;	spillPairReg hl
                                   6191 ;	spillPairReg hl
      001966 29                    6192 	add	hl, hl
      001967 09                    6193 	add	hl, bc
      001968 2A                    6194 	ld	a, (hl+)
      001969 4F                    6195 	ld	c, a
      00196A 46                    6196 	ld	b, (hl)
      00196B 03                    6197 	inc	bc
      00196C 03                    6198 	inc	bc
      00196D 0A                    6199 	ld	a, (bc)
      00196E EAr0Br02              6200 	ld	(#___temp_i),a
                                   6201 ;src/mushroompie.c:523: if ((!current_dyn) && (!dizzy_falling) && ((__temp_i == 255) || (__temp_i == ani_phase))) {
      001971 21r05r00              6202 	ld	hl, #_current_dyn + 1
      001974 3A                    6203 	ld	a, (hl-)
      001975 B6                    6204 	or	a, (hl)
      001976 C2r4Br1A              6205 	jp	NZ, 00122$
      001979 FAr20r00              6206 	ld	a, (#_dizzy_falling)
      00197C B7                    6207 	or	a, a
      00197D C2r4Br1A              6208 	jp	NZ, 00122$
      001980 FAr0Br02              6209 	ld	a, (#___temp_i)
      001983 3C                    6210 	inc	a
      001984 28 0A                 6211 	jr	Z, 00121$
      001986 FAr0Br02              6212 	ld	a, (#___temp_i)
      001989 21r03r00              6213 	ld	hl, #_ani_phase
      00198C 96                    6214 	sub	a, (hl)
      00198D C2r4Br1A              6215 	jp	NZ,00122$
      001990                       6216 00121$:
                                   6217 ;src/mushroompie.c:524: if (!joy) {
      001990 FAr1Dr00              6218 	ld	a, (#_joy)
      001993 B7                    6219 	or	a, a
      001994 20 08                 6220 	jr	NZ, 00119$
                                   6221 ;src/mushroompie.c:525: ani_type = ANI_STAND;    
      001996 21r02r00              6222 	ld	hl, #_ani_type
      001999 36 00                 6223 	ld	(hl), #0x00
      00199B C3r4Br1A              6224 	jp	00122$
      00199E                       6225 00119$:
                                   6226 ;src/mushroompie.c:526: } else if (joy & J_LEFT) {
      00199E 21r1Dr00              6227 	ld	hl, #_joy
      0019A1 56                    6228 	ld	d, (hl)
                                   6229 ;src/mushroompie.c:527: if ((joy & J_UP) || (joy & J_A)) {
      0019A2 7A                    6230 	ld	a, d
      0019A3 E6 04                 6231 	and	a, #0x04
      0019A5 1E 00                 6232 	ld	e, #0x00
      0019A7 F5                    6233 	push	af
      0019A8 7A                    6234 	ld	a, d
      0019A9 E6 10                 6235 	and	a, #0x10
      0019AB 4F                    6236 	ld	c, a
      0019AC 06 00                 6237 	ld	b, #0x00
      0019AE F1                    6238 	pop	af
                                   6239 ;src/mushroompie.c:526: } else if (joy & J_LEFT) {
      0019AF CB 4A                 6240 	bit	1, d
      0019B1 28 32                 6241 	jr	Z, 00116$
                                   6242 ;src/mushroompie.c:527: if ((joy & J_UP) || (joy & J_A)) {
      0019B3 B3                    6243 	or	a, e
      0019B4 20 04                 6244 	jr	NZ, 00101$
      0019B6 78                    6245 	ld	a, b
      0019B7 B1                    6246 	or	a, c
      0019B8 28 24                 6247 	jr	Z, 00102$
      0019BA                       6248 00101$:
                                   6249 ;src/mushroompie.c:528: ani_type = ANI_JUMP_L;
      0019BA 21r02r00              6250 	ld	hl, #_ani_type
      0019BD 36 09                 6251 	ld	(hl), #0x09
                                   6252 ;src/mushroompie.c:529: SND_JUMP;
      0019BF 11 C5 00              6253 	ld	de, #0x00c5
      0019C2 D5                    6254 	push	de
      0019C3 11 78 00              6255 	ld	de, #0x0078
      0019C6 D5                    6256 	push	de
      0019C7 11 53 00              6257 	ld	de, #0x0053
      0019CA D5                    6258 	push	de
      0019CB 11 84 00              6259 	ld	de, #0x0084
      0019CE D5                    6260 	push	de
      0019CF 11 65 00              6261 	ld	de, #0x0065
      0019D2 D5                    6262 	push	de
      0019D3 21 00 08              6263 	ld	hl, #0x800
      0019D6 E5                    6264 	push	hl
      0019D7 CDr00r00              6265 	call	_PlayFx
      0019DA E8 0C                 6266 	add	sp, #12
      0019DC 18 6D                 6267 	jr	00122$
      0019DE                       6268 00102$:
                                   6269 ;src/mushroompie.c:531: ani_type = ANI_WALK_L;
      0019DE 21r02r00              6270 	ld	hl, #_ani_type
      0019E1 36 03                 6271 	ld	(hl), #0x03
      0019E3 18 66                 6272 	jr	00122$
      0019E5                       6273 00116$:
                                   6274 ;src/mushroompie.c:533: } else if (joy & J_RIGHT) {
      0019E5 CB 42                 6275 	bit	0, d
      0019E7 28 32                 6276 	jr	Z, 00113$
                                   6277 ;src/mushroompie.c:534: if ((joy & J_UP) || (joy & J_A)) {
      0019E9 B3                    6278 	or	a, e
      0019EA 20 04                 6279 	jr	NZ, 00105$
      0019EC 78                    6280 	ld	a, b
      0019ED B1                    6281 	or	a, c
      0019EE 28 24                 6282 	jr	Z, 00106$
      0019F0                       6283 00105$:
                                   6284 ;src/mushroompie.c:535: ani_type = ANI_JUMP_R;
      0019F0 21r02r00              6285 	ld	hl, #_ani_type
      0019F3 36 08                 6286 	ld	(hl), #0x08
                                   6287 ;src/mushroompie.c:536: SND_JUMP;
      0019F5 11 C5 00              6288 	ld	de, #0x00c5
      0019F8 D5                    6289 	push	de
      0019F9 11 78 00              6290 	ld	de, #0x0078
      0019FC D5                    6291 	push	de
      0019FD 11 53 00              6292 	ld	de, #0x0053
      001A00 D5                    6293 	push	de
      001A01 11 84 00              6294 	ld	de, #0x0084
      001A04 D5                    6295 	push	de
      001A05 11 65 00              6296 	ld	de, #0x0065
      001A08 D5                    6297 	push	de
      001A09 21 00 08              6298 	ld	hl, #0x800
      001A0C E5                    6299 	push	hl
      001A0D CDr00r00              6300 	call	_PlayFx
      001A10 E8 0C                 6301 	add	sp, #12
      001A12 18 37                 6302 	jr	00122$
      001A14                       6303 00106$:
                                   6304 ;src/mushroompie.c:538: ani_type = ANI_WALK_R; 
      001A14 21r02r00              6305 	ld	hl, #_ani_type
      001A17 36 02                 6306 	ld	(hl), #0x02
      001A19 18 30                 6307 	jr	00122$
      001A1B                       6308 00113$:
                                   6309 ;src/mushroompie.c:540: } else if ((joy == J_UP) || (joy == J_A)) {
      001A1B FAr1Dr00              6310 	ld	a, (#_joy)
      001A1E D6 04                 6311 	sub	a, #0x04
      001A20 28 07                 6312 	jr	Z, 00109$
      001A22 FAr1Dr00              6313 	ld	a, (#_joy)
      001A25 D6 10                 6314 	sub	a, #0x10
      001A27 20 22                 6315 	jr	NZ, 00122$
      001A29                       6316 00109$:
                                   6317 ;src/mushroompie.c:541: ani_type = ANI_UP;
      001A29 21r02r00              6318 	ld	hl, #_ani_type
      001A2C 36 01                 6319 	ld	(hl), #0x01
                                   6320 ;src/mushroompie.c:542: SND_JUMP;
      001A2E 11 C5 00              6321 	ld	de, #0x00c5
      001A31 D5                    6322 	push	de
      001A32 11 78 00              6323 	ld	de, #0x0078
      001A35 D5                    6324 	push	de
      001A36 11 53 00              6325 	ld	de, #0x0053
      001A39 D5                    6326 	push	de
      001A3A 11 84 00              6327 	ld	de, #0x0084
      001A3D D5                    6328 	push	de
      001A3E 11 65 00              6329 	ld	de, #0x0065
      001A41 D5                    6330 	push	de
      001A42 21 00 08              6331 	ld	hl, #0x800
      001A45 E5                    6332 	push	hl
      001A46 CDr00r00              6333 	call	_PlayFx
      001A49 E8 0C                 6334 	add	sp, #12
      001A4B                       6335 00122$:
                                   6336 ;src/mushroompie.c:545: if (joy == J_B) {
      001A4B FAr1Dr00              6337 	ld	a, (#_joy)
      001A4E D6 20                 6338 	sub	a, #0x20
      001A50 C2rB0r1C              6339 	jp	NZ,00160$
                                   6340 ;src/mushroompie.c:546: if (is_position_safe) {
      001A53 FAr1Cr00              6341 	ld	a, (#_is_position_safe)
      001A56 B7                    6342 	or	a, a
      001A57 CArB0r1C              6343 	jp	Z, 00160$
                                   6344 ;src/mushroompie.c:547: waitpadup();
      001A5A CDr00r00              6345 	call	_waitpadup
                                   6346 ;src/mushroompie.c:548: UBYTE redraw_room = 0, warning_shown = 0, current_item_id = 0;
      001A5D 01 00 00              6347 	ld	bc, #0x0
                                   6348 ;src/mushroompie.c:549: tile_pos_x = dizzy_x >> 3, tile_pos_y = dizzy_y >> 3;
      001A60 21r10r00              6349 	ld	hl, #_dizzy_x
      001A63 2A                    6350 	ld	a, (hl+)
      001A64 5F                    6351 	ld	e, a
      001A65 56                    6352 	ld	d, (hl)
      001A66 CB 2A                 6353 	sra	d
      001A68 CB 1B                 6354 	rr	e
      001A6A CB 2A                 6355 	sra	d
      001A6C CB 1B                 6356 	rr	e
      001A6E CB 2A                 6357 	sra	d
      001A70 CB 1B                 6358 	rr	e
      001A72 21r3Ar02              6359 	ld	hl, #_tile_pos_x
      001A75 73                    6360 	ld	(hl), e
      001A76 21r12r00              6361 	ld	hl, #_dizzy_y
      001A79 2A                    6362 	ld	a, (hl+)
      001A7A 5F                    6363 	ld	e, a
      001A7B 56                    6364 	ld	d, (hl)
      001A7C CB 2A                 6365 	sra	d
      001A7E CB 1B                 6366 	rr	e
      001A80 CB 2A                 6367 	sra	d
      001A82 CB 1B                 6368 	rr	e
      001A84 CB 2A                 6369 	sra	d
      001A86 CB 1B                 6370 	rr	e
      001A88 21r3Br02              6371 	ld	hl, #_tile_pos_y
      001A8B 73                    6372 	ld	(hl), e
                                   6373 ;src/mushroompie.c:550: __temp_game_item3 = find_by_room_xy(&game_item_list, current_room_y, current_room_x, tile_pos_x, tile_pos_y);
      001A8C C5                    6374 	push	bc
      001A8D 7E                    6375 	ld	a, (hl)
      001A8E F5                    6376 	push	af
      001A8F 33                    6377 	inc	sp
      001A90 FAr3Ar02              6378 	ld	a, (#_tile_pos_x)
      001A93 67                    6379 	ld	h, a
      001A94 FAr0Cr00              6380 	ld	a, (#_current_room_x)
      001A97 6F                    6381 	ld	l, a
      001A98 E5                    6382 	push	hl
      001A99 FAr0Dr00              6383 	ld	a, (#_current_room_y)
      001A9C F5                    6384 	push	af
      001A9D 33                    6385 	inc	sp
      001A9E 11rC5r02              6386 	ld	de, #_game_item_list
      001AA1 D5                    6387 	push	de
      001AA2 CDr6Er14              6388 	call	_find_by_room_xy
      001AA5 E8 06                 6389 	add	sp, #6
      001AA7 C1                    6390 	pop	bc
      001AA8 21rCEr02              6391 	ld	hl, #___temp_game_item3
      001AAB 7B                    6392 	ld	a, e
      001AAC 22                    6393 	ld	(hl+), a
      001AAD 72                    6394 	ld	(hl), d
                                   6395 ;src/mushroompie.c:551: if (__temp_game_item3) {
      001AAE 3A                    6396 	ld	a, (hl-)
      001AAF B6                    6397 	or	a, (hl)
      001AB0 CAr43r1B              6398 	jp	Z, 00133$
                                   6399 ;src/mushroompie.c:552: current_item_id = __temp_game_item3->id;
      001AB3 2A                    6400 	ld	a, (hl+)
      001AB4 5F                    6401 	ld	e, a
      001AB5 56                    6402 	ld	d, (hl)
      001AB6 1A                    6403 	ld	a, (de)
      001AB7 F8 01                 6404 	ldhl	sp,	#1
      001AB9 77                    6405 	ld	(hl), a
                                   6406 ;src/mushroompie.c:553: if (current_item_id & ID_TREASURE) {
      001ABA E5                    6407 	push	hl
      001ABB CB 7E                 6408 	bit	7, (hl)
      001ABD E1                    6409 	pop	hl
      001ABE 28 47                 6410 	jr	Z, 00130$
                                   6411 ;src/mushroompie.c:554: SND_COIN;
      001AC0 11 C7 00              6412 	ld	de, #0x00c7
      001AC3 D5                    6413 	push	de
      001AC4 AF                    6414 	xor	a, a
      001AC5 37                    6415 	scf
      001AC6 F5                    6416 	push	af
      001AC7 11 44 00              6417 	ld	de, #0x0044
      001ACA D5                    6418 	push	de
      001ACB 11 B7 00              6419 	ld	de, #0x00b7
      001ACE D5                    6420 	push	de
      001ACF 11 00 00              6421 	ld	de, #0x0000
      001AD2 D5                    6422 	push	de
      001AD3 21 00 04              6423 	ld	hl, #0x400
      001AD6 E5                    6424 	push	hl
      001AD7 CDr00r00              6425 	call	_PlayFx
      001ADA E8 0C                 6426 	add	sp, #12
                                   6427 ;src/mushroompie.c:555: pop_by_id(&game_item_list, current_item_id);
      001ADC F8 01                 6428 	ldhl	sp,	#1
      001ADE 7E                    6429 	ld	a, (hl)
      001ADF F5                    6430 	push	af
      001AE0 33                    6431 	inc	sp
      001AE1 11rC5r02              6432 	ld	de, #_game_item_list
      001AE4 D5                    6433 	push	de
      001AE5 CDr5Er13              6434 	call	_pop_by_id
      001AE8 E8 03                 6435 	add	sp, #3
                                   6436 ;src/mushroompie.c:556: show_dialog_window(2, &coin_found);
      001AEA 11r00r00              6437 	ld	de, #_coin_found
      001AED D5                    6438 	push	de
      001AEE 3E 02                 6439 	ld	a, #0x02
      001AF0 F5                    6440 	push	af
      001AF1 33                    6441 	inc	sp
      001AF2 CDr71r00              6442 	call	_show_dialog_window
      001AF5 E8 03                 6443 	add	sp, #3
                                   6444 ;src/mushroompie.c:557: add_coins(1); 
      001AF7 3E 01                 6445 	ld	a, #0x01
      001AF9 F5                    6446 	push	af
      001AFA 33                    6447 	inc	sp
      001AFB CDr50r08              6448 	call	_add_coins
      001AFE 33                    6449 	inc	sp
                                   6450 ;src/mushroompie.c:558: show_coins();
      001AFF CDr66r08              6451 	call	_show_coins
                                   6452 ;src/mushroompie.c:559: redraw_room = 1;
                                   6453 ;src/mushroompie.c:560: warning_shown = 1;
      001B02 01 01 01              6454 	ld	bc, #0x101
      001B05 18 3C                 6455 	jr	00133$
      001B07                       6456 00130$:
                                   6457 ;src/mushroompie.c:562: if (inventory_item_list.size < 3) {
      001B07 FArB6r03              6458 	ld	a, (#_inventory_item_list + 0)
      001B0A D6 03                 6459 	sub	a, #0x03
      001B0C 30 24                 6460 	jr	NC, 00127$
                                   6461 ;src/mushroompie.c:563: pop_by_id(&game_item_list, current_item_id);
      001B0E C5                    6462 	push	bc
      001B0F F8 03                 6463 	ldhl	sp,	#3
      001B11 7E                    6464 	ld	a, (hl)
      001B12 F5                    6465 	push	af
      001B13 33                    6466 	inc	sp
      001B14 11rC5r02              6467 	ld	de, #_game_item_list
      001B17 D5                    6468 	push	de
      001B18 CDr5Er13              6469 	call	_pop_by_id
      001B1B E8 03                 6470 	add	sp, #3
      001B1D 21rCEr02              6471 	ld	hl, #___temp_game_item3
      001B20 2A                    6472 	ld	a, (hl+)
      001B21 5F                    6473 	ld	e, a
      001B22 56                    6474 	ld	d, (hl)
      001B23 D5                    6475 	push	de
      001B24 11rB6r03              6476 	ld	de, #_inventory_item_list
      001B27 D5                    6477 	push	de
      001B28 CDrF3r12              6478 	call	_push_last
      001B2B E8 04                 6479 	add	sp, #4
      001B2D C1                    6480 	pop	bc
                                   6481 ;src/mushroompie.c:565: redraw_room = 1;
      001B2E 0E 01                 6482 	ld	c, #0x01
      001B30 18 11                 6483 	jr	00133$
      001B32                       6484 00127$:
                                   6485 ;src/mushroompie.c:567: show_dialog_window(2, &too_much_items);
      001B32 C5                    6486 	push	bc
      001B33 11r00r00              6487 	ld	de, #_too_much_items
      001B36 D5                    6488 	push	de
      001B37 3E 02                 6489 	ld	a, #0x02
      001B39 F5                    6490 	push	af
      001B3A 33                    6491 	inc	sp
      001B3B CDr71r00              6492 	call	_show_dialog_window
      001B3E E8 03                 6493 	add	sp, #3
      001B40 C1                    6494 	pop	bc
                                   6495 ;src/mushroompie.c:568: warning_shown = 1;
      001B41 06 01                 6496 	ld	b, #0x01
      001B43                       6497 00133$:
                                   6498 ;src/mushroompie.c:572: if (!warning_shown) {
      001B43 78                    6499 	ld	a, b
      001B44 B7                    6500 	or	a, a
      001B45 C2r42r1C              6501 	jp	NZ, 00149$
                                   6502 ;src/mushroompie.c:573: __temp_game_item3 = show_inventory();
      001B48 C5                    6503 	push	bc
      001B49 CDrADr01              6504 	call	_show_inventory
      001B4C C1                    6505 	pop	bc
      001B4D 21rCEr02              6506 	ld	hl, #___temp_game_item3
      001B50 7B                    6507 	ld	a, e
      001B51 22                    6508 	ld	(hl+), a
      001B52 72                    6509 	ld	(hl), d
                                   6510 ;src/mushroompie.c:574: if (__temp_game_item3) {
      001B53 3A                    6511 	ld	a, (hl-)
      001B54 B6                    6512 	or	a, (hl)
      001B55 CAr42r1C              6513 	jp	Z, 00149$
                                   6514 ;src/mushroompie.c:575: current_item_id = __temp_game_item3->id;
      001B58 6E                    6515 	ld	l, (hl)
                                   6516 ;	spillPairReg hl
                                   6517 ;	spillPairReg hl
      001B59 FArCFr02              6518 	ld	a, (___temp_game_item3 + 1)
      001B5C 67                    6519 	ld	h, a
                                   6520 ;	spillPairReg hl
                                   6521 ;	spillPairReg hl
      001B5D 46                    6522 	ld	b, (hl)
                                   6523 ;src/mushroompie.c:576: pop_by_id(&inventory_item_list, current_item_id);
      001B5E C5                    6524 	push	bc
      001B5F C5                    6525 	push	bc
      001B60 33                    6526 	inc	sp
      001B61 11rB6r03              6527 	ld	de, #_inventory_item_list
      001B64 D5                    6528 	push	de
      001B65 CDr5Er13              6529 	call	_pop_by_id
      001B68 E8 03                 6530 	add	sp, #3
      001B6A C1                    6531 	pop	bc
                                   6532 ;src/mushroompie.c:579: if (current_room->room_use) {
      001B6B 21r0Er00              6533 	ld	hl, #_current_room
      001B6E 2A                    6534 	ld	a, (hl+)
      001B6F 5F                    6535 	ld	e, a
      001B70 56                    6536 	ld	d, (hl)
      001B71 21 15 00              6537 	ld	hl, #0x0015
      001B74 19                    6538 	add	hl, de
      001B75 5D                    6539 	ld	e, l
      001B76 54                    6540 	ld	d, h
      001B77 1A                    6541 	ld	a, (de)
      001B78 F8 00                 6542 	ldhl	sp,	#0
      001B7A 22                    6543 	ld	(hl+), a
      001B7B 13                    6544 	inc	de
      001B7C 1A                    6545 	ld	a, (de)
      001B7D 77                    6546 	ld	(hl), a
      001B7E F8 01                 6547 	ldhl	sp,	#1
      001B80 3A                    6548 	ld	a, (hl-)
      001B81 B6                    6549 	or	a, (hl)
      001B82 28 1D                 6550 	jr	Z, 00135$
                                   6551 ;src/mushroompie.c:580: current_item_id = current_room->room_use(tile_pos_x, tile_pos_y + 1, current_item_id);
      001B84 FAr3Br02              6552 	ld	a, (#_tile_pos_y)
      001B87 3C                    6553 	inc	a
      001B88 C5                    6554 	push	bc
      001B89 C5                    6555 	push	bc
      001B8A 33                    6556 	inc	sp
      001B8B F5                    6557 	push	af
      001B8C 33                    6558 	inc	sp
      001B8D FAr3Ar02              6559 	ld	a, (#_tile_pos_x)
      001B90 F5                    6560 	push	af
      001B91 33                    6561 	inc	sp
      001B92 F8 05                 6562 	ldhl	sp,	#5
      001B94 2A                    6563 	ld	a, (hl+)
      001B95 66                    6564 	ld	h, (hl)
                                   6565 ;	spillPairReg hl
                                   6566 ;	spillPairReg hl
      001B96 6F                    6567 	ld	l, a
                                   6568 ;	spillPairReg hl
                                   6569 ;	spillPairReg hl
      001B97 CDr00r00              6570 	call	___sdcc_call_hl
      001B9A E8 03                 6571 	add	sp, #3
      001B9C 7B                    6572 	ld	a, e
      001B9D C1                    6573 	pop	bc
      001B9E 47                    6574 	ld	b, a
      001B9F 18 09                 6575 	jr	00136$
      001BA1                       6576 00135$:
                                   6577 ;src/mushroompie.c:581: } else current_item_id = default_drop(current_item_id);
      001BA1 C5                    6578 	push	bc
      001BA2 C5                    6579 	push	bc
      001BA3 33                    6580 	inc	sp
      001BA4 CDrADr16              6581 	call	_default_drop
      001BA7 33                    6582 	inc	sp
      001BA8 C1                    6583 	pop	bc
      001BA9 43                    6584 	ld	b, e
      001BAA                       6585 00136$:
                                   6586 ;src/mushroompie.c:583: if (current_item_id) {
      001BAA 78                    6587 	ld	a, b
      001BAB B7                    6588 	or	a, a
      001BAC 28 4B                 6589 	jr	Z, 00143$
                                   6590 ;src/mushroompie.c:584: push_last(&item_stack, __temp_game_item3);
      001BAE C5                    6591 	push	bc
      001BAF 21rCEr02              6592 	ld	hl, #___temp_game_item3
      001BB2 2A                    6593 	ld	a, (hl+)
      001BB3 5F                    6594 	ld	e, a
      001BB4 56                    6595 	ld	d, (hl)
      001BB5 D5                    6596 	push	de
      001BB6 11rBBr03              6597 	ld	de, #_item_stack
      001BB9 D5                    6598 	push	de
      001BBA CDrF3r12              6599 	call	_push_last
      001BBD E8 04                 6600 	add	sp, #4
      001BBF C1                    6601 	pop	bc
                                   6602 ;src/mushroompie.c:585: if (current_item_id == ID_ITEM_USED) {
      001BC0 78                    6603 	ld	a, b
      001BC1 D6 0F                 6604 	sub	a, #0x0f
      001BC3 20 0A                 6605 	jr	NZ, 00140$
                                   6606 ;src/mushroompie.c:586: __temp_game_item3 = 0;
      001BC5 AF                    6607 	xor	a, a
      001BC6 21rCEr02              6608 	ld	hl, #___temp_game_item3
      001BC9 22                    6609 	ld	(hl+), a
      001BCA 77                    6610 	ld	(hl), a
                                   6611 ;src/mushroompie.c:587: redraw_room = 1;
      001BCB 0E 01                 6612 	ld	c, #0x01
      001BCD 18 2A                 6613 	jr	00143$
      001BCF                       6614 00140$:
                                   6615 ;src/mushroompie.c:589: __temp_game_item3 = pop_by_id(&game_item_list, current_item_id);
      001BCF C5                    6616 	push	bc
      001BD0 C5                    6617 	push	bc
      001BD1 33                    6618 	inc	sp
      001BD2 11rC5r02              6619 	ld	de, #_game_item_list
      001BD5 D5                    6620 	push	de
      001BD6 CDr5Er13              6621 	call	_pop_by_id
      001BD9 E8 03                 6622 	add	sp, #3
      001BDB C1                    6623 	pop	bc
      001BDC 21rCEr02              6624 	ld	hl, #___temp_game_item3
      001BDF 7B                    6625 	ld	a, e
      001BE0 22                    6626 	ld	(hl+), a
      001BE1 72                    6627 	ld	(hl), d
                                   6628 ;src/mushroompie.c:590: if (!__temp_game_item3) __temp_game_item3 = pop_by_id(&item_stack, current_item_id);
      001BE2 3A                    6629 	ld	a, (hl-)
      001BE3 B6                    6630 	or	a, (hl)
      001BE4 20 13                 6631 	jr	NZ, 00143$
      001BE6 C5                    6632 	push	bc
      001BE7 C5                    6633 	push	bc
      001BE8 33                    6634 	inc	sp
      001BE9 11rBBr03              6635 	ld	de, #_item_stack
      001BEC D5                    6636 	push	de
      001BED CDr5Er13              6637 	call	_pop_by_id
      001BF0 E8 03                 6638 	add	sp, #3
      001BF2 C1                    6639 	pop	bc
      001BF3 21rCEr02              6640 	ld	hl, #___temp_game_item3
      001BF6 7B                    6641 	ld	a, e
      001BF7 22                    6642 	ld	(hl+), a
      001BF8 72                    6643 	ld	(hl), d
      001BF9                       6644 00143$:
                                   6645 ;src/mushroompie.c:594: if (__temp_game_item3) {
      001BF9 21rCFr02              6646 	ld	hl, #___temp_game_item3 + 1
      001BFC 3A                    6647 	ld	a, (hl-)
      001BFD B6                    6648 	or	a, (hl)
      001BFE 28 42                 6649 	jr	Z, 00149$
                                   6650 ;src/mushroompie.c:595: __temp_game_item3->room_row = current_room_y, __temp_game_item3->room_col = current_room_x;
      001C00 2A                    6651 	ld	a, (hl+)
      001C01 4F                    6652 	ld	c, a
      001C02 46                    6653 	ld	b, (hl)
      001C03 03                    6654 	inc	bc
      001C04 FAr0Dr00              6655 	ld	a, (#_current_room_y)
      001C07 02                    6656 	ld	(bc), a
      001C08 21rCEr02              6657 	ld	hl, #___temp_game_item3
      001C0B 2A                    6658 	ld	a, (hl+)
      001C0C 4F                    6659 	ld	c, a
      001C0D 46                    6660 	ld	b, (hl)
      001C0E 03                    6661 	inc	bc
      001C0F 03                    6662 	inc	bc
      001C10 FAr0Cr00              6663 	ld	a, (#_current_room_x)
      001C13 02                    6664 	ld	(bc), a
                                   6665 ;src/mushroompie.c:596: __temp_game_item3->x = tile_pos_x, __temp_game_item3->y = tile_pos_y + 1;
      001C14 21rCEr02              6666 	ld	hl, #___temp_game_item3
      001C17 2A                    6667 	ld	a, (hl+)
      001C18 4F                    6668 	ld	c, a
      001C19 46                    6669 	ld	b, (hl)
      001C1A 03                    6670 	inc	bc
      001C1B 03                    6671 	inc	bc
      001C1C 03                    6672 	inc	bc
      001C1D FAr3Ar02              6673 	ld	a, (#_tile_pos_x)
      001C20 02                    6674 	ld	(bc), a
      001C21 21rCEr02              6675 	ld	hl, #___temp_game_item3
      001C24 2A                    6676 	ld	a, (hl+)
      001C25 4F                    6677 	ld	c, a
      001C26 46                    6678 	ld	b, (hl)
      001C27 03                    6679 	inc	bc
      001C28 03                    6680 	inc	bc
      001C29 03                    6681 	inc	bc
      001C2A 03                    6682 	inc	bc
      001C2B FAr3Br02              6683 	ld	a, (#_tile_pos_y)
      001C2E 3C                    6684 	inc	a
      001C2F 02                    6685 	ld	(bc), a
                                   6686 ;src/mushroompie.c:597: push_last(&game_item_list, __temp_game_item3);
      001C30 21rCEr02              6687 	ld	hl, #___temp_game_item3
      001C33 2A                    6688 	ld	a, (hl+)
      001C34 5F                    6689 	ld	e, a
      001C35 56                    6690 	ld	d, (hl)
      001C36 D5                    6691 	push	de
      001C37 11rC5r02              6692 	ld	de, #_game_item_list
      001C3A D5                    6693 	push	de
      001C3B CDrF3r12              6694 	call	_push_last
      001C3E E8 04                 6695 	add	sp, #4
                                   6696 ;src/mushroompie.c:598: redraw_room = 1;
      001C40 0E 01                 6697 	ld	c, #0x01
      001C42                       6698 00149$:
                                   6699 ;src/mushroompie.c:602: if (redraw_room) {
      001C42 79                    6700 	ld	a, c
      001C43 B7                    6701 	or	a, a
      001C44 28 6A                 6702 	jr	Z, 00160$
                                   6703 ;src/mushroompie.c:603: FADE_OUT;
      001C46 3E 01                 6704 	ld	a, #0x01
      001C48 F5                    6705 	push	af
      001C49 33                    6706 	inc	sp
      001C4A CDr00r00              6707 	call	_push_bank
      001C4D 33                    6708 	inc	sp
      001C4E 21 2C 2C              6709 	ld	hl, #0x2c2c
      001C51 E5                    6710 	push	hl
      001C52 21 00 93              6711 	ld	hl, #0x9300
      001C55 E5                    6712 	push	hl
      001C56 CDr00r00              6713 	call	_FadeDMG
      001C59 E8 04                 6714 	add	sp, #4
      001C5B CDr00r00              6715 	call	_pop_bank
                                   6716 ;src/mushroompie.c:579: if (current_room->room_use) {
      001C5E 21r0Er00              6717 	ld	hl, #_current_room
      001C61 2A                    6718 	ld	a, (hl+)
      001C62 4F                    6719 	ld	c, a
      001C63 46                    6720 	ld	b, (hl)
                                   6721 ;src/mushroompie.c:605: if (current_room->room_customdraw) current_room->room_customdraw(); else default_draw();
      001C64 21 19 00              6722 	ld	hl, #0x0019
      001C67 09                    6723 	add	hl, bc
      001C68 2A                    6724 	ld	a, (hl+)
      001C69 4F                    6725 	ld	c, a
      001C6A 66                    6726 	ld	h, (hl)
                                   6727 ;	spillPairReg hl
      001C6B 7C                    6728 	ld	a, h
      001C6C B1                    6729 	or	a, c
      001C6D 28 06                 6730 	jr	Z, 00151$
      001C6F 69                    6731 	ld	l, c
                                   6732 ;	spillPairReg hl
                                   6733 ;	spillPairReg hl
      001C70 CDr00r00              6734 	call	___sdcc_call_hl
      001C73 18 03                 6735 	jr	00152$
      001C75                       6736 00151$:
      001C75 CDr6Br16              6737 	call	_default_draw
      001C78                       6738 00152$:
                                   6739 ;src/mushroompie.c:606: FADE_IN;
      001C78 3E 01                 6740 	ld	a, #0x01
      001C7A F5                    6741 	push	af
      001C7B 33                    6742 	inc	sp
      001C7C CDr00r00              6743 	call	_push_bank
      001C7F 33                    6744 	inc	sp
      001C80 21 2C 2C              6745 	ld	hl, #0x2c2c
      001C83 E5                    6746 	push	hl
      001C84 21 01 93              6747 	ld	hl, #0x9301
      001C87 E5                    6748 	push	hl
      001C88 CDr00r00              6749 	call	_FadeDMG
      001C8B E8 04                 6750 	add	sp, #4
      001C8D CDr00r00              6751 	call	_pop_bank
                                   6752 ;src/mushroompie.c:608: rle_decompress_data(current_room->room_coll_map->rle_data, (UWORD)current_room->room_coll_map->size, coll_buf);
                                   6753 ;src/mushroompie.c:579: if (current_room->room_use) {
      001C90 21r0Er00              6754 	ld	hl, #_current_room
      001C93 6E                    6755 	ld	l, (hl)
                                   6756 ;	spillPairReg hl
                                   6757 ;	spillPairReg hl
      001C94 FAr0Fr00              6758 	ld	a, (_current_room + 1)
      001C97 67                    6759 	ld	h, a
                                   6760 ;	spillPairReg hl
                                   6761 ;	spillPairReg hl
                                   6762 ;src/mushroompie.c:608: rle_decompress_data(current_room->room_coll_map->rle_data, (UWORD)current_room->room_coll_map->size, coll_buf);
      001C98 23                    6763 	inc	hl
      001C99 23                    6764 	inc	hl
      001C9A 23                    6765 	inc	hl
      001C9B 2A                    6766 	ld	a, (hl+)
      001C9C 4F                    6767 	ld	c, a
      001C9D 46                    6768 	ld	b, (hl)
      001C9E 69                    6769 	ld	l, c
      001C9F 60                    6770 	ld	h, b
      001CA0 2A                    6771 	ld	a,	(hl+)
      001CA1 66                    6772 	ld	h, (hl)
                                   6773 ;	spillPairReg hl
      001CA2 6F                    6774 	ld	l, a
                                   6775 ;	spillPairReg hl
                                   6776 ;	spillPairReg hl
      001CA3 03                    6777 	inc	bc
      001CA4 03                    6778 	inc	bc
      001CA5 11r00r00              6779 	ld	de, #_coll_buf
      001CA8 D5                    6780 	push	de
      001CA9 E5                    6781 	push	hl
      001CAA C5                    6782 	push	bc
      001CAB CDr9Cr01              6783 	call	_rle_decompress_data
      001CAE E8 06                 6784 	add	sp, #6
      001CB0                       6785 00160$:
                                   6786 ;src/mushroompie.c:522: __temp_i = animation[ani_type]->interr;
      001CB0 21r02r00              6787 	ld	hl, #_ani_type
      001CB3 6E                    6788 	ld	l, (hl)
                                   6789 ;	spillPairReg hl
                                   6790 ;	spillPairReg hl
      001CB4 26 00                 6791 	ld	h, #0x00
                                   6792 ;	spillPairReg hl
                                   6793 ;	spillPairReg hl
                                   6794 ;src/mushroompie.c:618: if (double_dyn) current_dyn = double_y_data[ani_type]; else current_dyn = move_y_data[ani_type]; 
      001CB6 29                    6795 	add	hl, hl
      001CB7 4D                    6796 	ld	c, l
      001CB8 44                    6797 	ld	b, h
                                   6798 ;src/mushroompie.c:614: if (ani_type != ani_type_old) { 
      001CB9 FAr02r00              6799 	ld	a, (#_ani_type)
      001CBC 21r00r02              6800 	ld	hl, #_ani_type_old
      001CBF 96                    6801 	sub	a, (hl)
      001CC0 28 3A                 6802 	jr	Z, 00167$
                                   6803 ;src/mushroompie.c:615: ani_phase = 0; 
      001CC2 21r03r00              6804 	ld	hl, #_ani_phase
      001CC5 36 00                 6805 	ld	(hl), #0x00
                                   6806 ;src/mushroompie.c:616: ani_update = 1;
      001CC7 21r08r00              6807 	ld	hl, #_ani_update
      001CCA 36 01                 6808 	ld	(hl), #0x01
                                   6809 ;src/mushroompie.c:617: if (!current_dyn) {
      001CCC 21r05r00              6810 	ld	hl, #_current_dyn + 1
      001CCF 3A                    6811 	ld	a, (hl-)
      001CD0 B6                    6812 	or	a, (hl)
      001CD1 20 24                 6813 	jr	NZ, 00165$
                                   6814 ;src/mushroompie.c:618: if (double_dyn) current_dyn = double_y_data[ani_type]; else current_dyn = move_y_data[ani_type]; 
      001CD3 FAr06r00              6815 	ld	a, (#_double_dyn)
      001CD6 B7                    6816 	or	a, a
      001CD7 28 10                 6817 	jr	Z, 00162$
      001CD9 21rE3r05              6818 	ld	hl, #_double_y_data
      001CDC 09                    6819 	add	hl, bc
      001CDD 5D                    6820 	ld	e, l
      001CDE 54                    6821 	ld	d, h
      001CDF 1A                    6822 	ld	a, (de)
      001CE0 21r04r00              6823 	ld	hl, #_current_dyn
      001CE3 22                    6824 	ld	(hl+), a
      001CE4 13                    6825 	inc	de
      001CE5 1A                    6826 	ld	a, (de)
      001CE6 77                    6827 	ld	(hl), a
      001CE7 18 0E                 6828 	jr	00165$
      001CE9                       6829 00162$:
      001CE9 21rCFr05              6830 	ld	hl, #_move_y_data
      001CEC 09                    6831 	add	hl, bc
      001CED 5D                    6832 	ld	e, l
      001CEE 54                    6833 	ld	d, h
      001CEF 1A                    6834 	ld	a, (de)
      001CF0 21r04r00              6835 	ld	hl, #_current_dyn
      001CF3 22                    6836 	ld	(hl+), a
      001CF4 13                    6837 	inc	de
      001CF5 1A                    6838 	ld	a, (de)
      001CF6 77                    6839 	ld	(hl), a
      001CF7                       6840 00165$:
                                   6841 ;src/mushroompie.c:620: current_dyn_phase = 0;
      001CF7 21r07r00              6842 	ld	hl, #_current_dyn_phase
      001CFA 36 00                 6843 	ld	(hl), #0x00
      001CFC                       6844 00167$:
                                   6845 ;src/mushroompie.c:622: double_dyn = 0;     
      001CFC 21r06r00              6846 	ld	hl, #_double_dyn
      001CFF 36 00                 6847 	ld	(hl), #0x00
                                   6848 ;src/mushroompie.c:624: if (walk_update) {
      001D01 FAr09r00              6849 	ld	a, (#_walk_update)
      001D04 B7                    6850 	or	a, a
      001D05 CArF6r1D              6851 	jp	Z, 00180$
                                   6852 ;src/mushroompie.c:625: is_position_safe = 0;
      001D08 21r1Cr00              6853 	ld	hl, #_is_position_safe
      001D0B 36 00                 6854 	ld	(hl), #0x00
                                   6855 ;src/mushroompie.c:626: if ((!current_dyn) && ((ani_type == ANI_STAND) || (ani_type == ANI_WALK_L) || (ani_type == ANI_WALK_R))) {
      001D0D 21r05r00              6856 	ld	hl, #_current_dyn + 1
      001D10 3A                    6857 	ld	a, (hl-)
      001D11 B6                    6858 	or	a, (hl)
      001D12 20 3C                 6859 	jr	NZ, 00169$
      001D14 21r02r00              6860 	ld	hl, #_ani_type
      001D17 7E                    6861 	ld	a, (hl)
      001D18 B7                    6862 	or	a, a
      001D19 28 0C                 6863 	jr	Z, 00168$
      001D1B 7E                    6864 	ld	a, (hl)
      001D1C D6 03                 6865 	sub	a, #0x03
      001D1E 28 07                 6866 	jr	Z, 00168$
      001D20 FAr02r00              6867 	ld	a, (#_ani_type)
      001D23 D6 02                 6868 	sub	a, #0x02
      001D25 20 29                 6869 	jr	NZ, 00169$
      001D27                       6870 00168$:
                                   6871 ;src/mushroompie.c:627: tmp_room_x = current_room_x; tmp_room_y = current_room_y;
      001D27 FAr0Cr00              6872 	ld	a, (#_current_room_x)
      001D2A EAr01r02              6873 	ld	(#_tmp_room_x),a
      001D2D FAr0Dr00              6874 	ld	a, (#_current_room_y)
      001D30 EAr02r02              6875 	ld	(#_tmp_room_y),a
                                   6876 ;src/mushroompie.c:628: tmp_dizzy_x = dizzy_x; tmp_dizzy_y = dizzy_y;
      001D33 FAr10r00              6877 	ld	a, (#_dizzy_x)
      001D36 EAr07r02              6878 	ld	(#_tmp_dizzy_x),a
      001D39 FAr11r00              6879 	ld	a, (#_dizzy_x + 1)
      001D3C EAr08r02              6880 	ld	(#_tmp_dizzy_x + 1),a
      001D3F FAr12r00              6881 	ld	a, (#_dizzy_y)
      001D42 EAr09r02              6882 	ld	(#_tmp_dizzy_y),a
      001D45 FAr13r00              6883 	ld	a, (#_dizzy_y + 1)
      001D48 EAr0Ar02              6884 	ld	(#_tmp_dizzy_y + 1),a
                                   6885 ;src/mushroompie.c:629: is_position_safe = 1;
      001D4B 21r1Cr00              6886 	ld	hl, #_is_position_safe
      001D4E 36 01                 6887 	ld	(hl), #0x01
      001D50                       6888 00169$:
                                   6889 ;src/mushroompie.c:632: delta_x = move_x_data[ani_type];
      001D50 21rF7r05              6890 	ld	hl, #_move_x_data
      001D53 09                    6891 	add	hl, bc
      001D54 5D                    6892 	ld	e, l
      001D55 54                    6893 	ld	d, h
      001D56 1A                    6894 	ld	a, (de)
      001D57 21r16r00              6895 	ld	hl, #_delta_x
      001D5A 22                    6896 	ld	(hl+), a
      001D5B 13                    6897 	inc	de
      001D5C 1A                    6898 	ld	a, (de)
      001D5D 77                    6899 	ld	(hl), a
                                   6900 ;src/mushroompie.c:634: if ((bal_update) && (current_dyn)) {
      001D5E FAr0Ar00              6901 	ld	a, (#_bal_update)
      001D61 B7                    6902 	or	a, a
      001D62 28 41                 6903 	jr	Z, 00176$
      001D64 21r05r00              6904 	ld	hl, #_current_dyn + 1
      001D67 3A                    6905 	ld	a, (hl-)
      001D68 B6                    6906 	or	a, (hl)
      001D69 28 3A                 6907 	jr	Z, 00176$
                                   6908 ;src/mushroompie.c:635: delta_y += current_dyn->steps[current_dyn_phase];
      001D6B 2A                    6909 	ld	a, (hl+)
      001D6C 4F                    6910 	ld	c, a
      001D6D 46                    6911 	ld	b, (hl)
      001D6E 59                    6912 	ld	e, c
      001D6F 50                    6913 	ld	d, b
      001D70 13                    6914 	inc	de
      001D71 21r07r00              6915 	ld	hl, #_current_dyn_phase
      001D74 6E                    6916 	ld	l, (hl)
                                   6917 ;	spillPairReg hl
                                   6918 ;	spillPairReg hl
      001D75 26 00                 6919 	ld	h, #0x00
                                   6920 ;	spillPairReg hl
                                   6921 ;	spillPairReg hl
      001D77 29                    6922 	add	hl, hl
      001D78 19                    6923 	add	hl, de
      001D79 5D                    6924 	ld	e, l
      001D7A 54                    6925 	ld	d, h
      001D7B 1A                    6926 	ld	a, (de)
      001D7C F8 00                 6927 	ldhl	sp,	#0
      001D7E 22                    6928 	ld	(hl+), a
      001D7F 13                    6929 	inc	de
      001D80 1A                    6930 	ld	a, (de)
      001D81 77                    6931 	ld	(hl), a
      001D82 21r18r00              6932 	ld	hl, #_delta_y
      001D85 2A                    6933 	ld	a, (hl+)
      001D86 5F                    6934 	ld	e, a
      001D87 56                    6935 	ld	d, (hl)
      001D88 E1                    6936 	pop	hl
      001D89 E5                    6937 	push	hl
      001D8A 19                    6938 	add	hl, de
      001D8B 5D                    6939 	ld	e, l
      001D8C 54                    6940 	ld	d, h
      001D8D 21r18r00              6941 	ld	hl, #_delta_y
      001D90 7B                    6942 	ld	a, e
      001D91 22                    6943 	ld	(hl+), a
      001D92 72                    6944 	ld	(hl), d
                                   6945 ;src/mushroompie.c:636: current_dyn_phase++; if (current_dyn_phase >= current_dyn->count) current_dyn = 0;
      001D93 21r07r00              6946 	ld	hl, #_current_dyn_phase
      001D96 34                    6947 	inc	(hl)
      001D97 0A                    6948 	ld	a, (bc)
      001D98 4F                    6949 	ld	c, a
      001D99 7E                    6950 	ld	a, (hl)
      001D9A 91                    6951 	sub	a, c
      001D9B 38 0E                 6952 	jr	C, 00177$
      001D9D AF                    6953 	xor	a, a
      001D9E 21r04r00              6954 	ld	hl, #_current_dyn
      001DA1 22                    6955 	ld	(hl+), a
      001DA2 77                    6956 	ld	(hl), a
      001DA3 18 06                 6957 	jr	00177$
      001DA5                       6958 00176$:
                                   6959 ;src/mushroompie.c:637: } else delta_y = 0;
      001DA5 AF                    6960 	xor	a, a
      001DA6 21r18r00              6961 	ld	hl, #_delta_y
      001DA9 22                    6962 	ld	(hl+), a
      001DAA 77                    6963 	ld	(hl), a
      001DAB                       6964 00177$:
                                   6965 ;src/mushroompie.c:639: check_change_room();
      001DAB CDrE2r11              6966 	call	_check_change_room
                                   6967 ;src/mushroompie.c:641: check_dizzy_collisions();
      001DAE CDr9Cr0D              6968 	call	_check_dizzy_collisions
                                   6969 ;src/mushroompie.c:642: dizzy_x += delta_x; dizzy_y += delta_y;
      001DB1 FAr10r00              6970 	ld	a, (#_dizzy_x)
      001DB4 21r16r00              6971 	ld	hl, #_delta_x
      001DB7 86                    6972 	add	a, (hl)
      001DB8 21r10r00              6973 	ld	hl, #_dizzy_x
      001DBB 22                    6974 	ld	(hl+), a
      001DBC 7E                    6975 	ld	a, (hl)
      001DBD 21r17r00              6976 	ld	hl, #_delta_x + 1
      001DC0 8E                    6977 	adc	a, (hl)
      001DC1 EAr11r00              6978 	ld	(#_dizzy_x + 1),a
      001DC4 FAr12r00              6979 	ld	a, (#_dizzy_y)
      001DC7 21r18r00              6980 	ld	hl, #_delta_y
      001DCA 86                    6981 	add	a, (hl)
      001DCB 21r12r00              6982 	ld	hl, #_dizzy_y
      001DCE 22                    6983 	ld	(hl+), a
      001DCF 7E                    6984 	ld	a, (hl)
      001DD0 21r19r00              6985 	ld	hl, #_delta_y + 1
      001DD3 8E                    6986 	adc	a, (hl)
      001DD4 EAr13r00              6987 	ld	(#_dizzy_y + 1),a
                                   6988 ;src/mushroompie.c:644: set_dizzy_position();
      001DD7 CDr1Fr0D              6989 	call	_set_dizzy_position
                                   6990 ;src/mushroompie.c:646: set_enemies_position();
      001DDA CDrB8r0C              6991 	call	_set_enemies_position
                                   6992 ;src/mushroompie.c:648: walk_update = 0; bal_update = 0;
      001DDD 21r09r00              6993 	ld	hl, #_walk_update
      001DE0 36 00                 6994 	ld	(hl), #0x00
      001DE2 21r0Ar00              6995 	ld	hl, #_bal_update
      001DE5 36 00                 6996 	ld	(hl), #0x00
                                   6997 ;src/mushroompie.c:649: delta_x = delta_y = 0;
      001DE7 AF                    6998 	xor	a, a
      001DE8 21r18r00              6999 	ld	hl, #_delta_y
      001DEB 22                    7000 	ld	(hl+), a
      001DEC 77                    7001 	ld	(hl), a
      001DED AF                    7002 	xor	a, a
      001DEE 21r16r00              7003 	ld	hl, #_delta_x
      001DF1 22                    7004 	ld	(hl+), a
      001DF2 77                    7005 	ld	(hl), a
                                   7006 ;src/mushroompie.c:651: update_energy();
      001DF3 CDr47r09              7007 	call	_update_energy
      001DF6                       7008 00180$:
                                   7009 ;src/mushroompie.c:654: if (ani_update) {
      001DF6 FAr08r00              7010 	ld	a, (#_ani_update)
      001DF9 B7                    7011 	or	a, a
      001DFA CAr49r19              7012 	jp	Z, 00208$
                                   7013 ;src/mushroompie.c:655: current_animation = animation[ani_type];
      001DFD 21r02r00              7014 	ld	hl, #_ani_type
      001E00 6E                    7015 	ld	l, (hl)
                                   7016 ;	spillPairReg hl
                                   7017 ;	spillPairReg hl
      001E01 26 00                 7018 	ld	h, #0x00
                                   7019 ;	spillPairReg hl
                                   7020 ;	spillPairReg hl
      001E03 29                    7021 	add	hl, hl
      001E04 11r39r05              7022 	ld	de, #_animation
      001E07 19                    7023 	add	hl, de
      001E08 5D                    7024 	ld	e, l
      001E09 54                    7025 	ld	d, h
      001E0A 1A                    7026 	ld	a, (de)
      001E0B 21rFEr01              7027 	ld	hl, #_current_animation
      001E0E 22                    7028 	ld	(hl+), a
      001E0F 13                    7029 	inc	de
      001E10 1A                    7030 	ld	a, (de)
      001E11 77                    7031 	ld	(hl), a
                                   7032 ;src/mushroompie.c:656: wait_vbl_done();
      001E12 CDr00r00              7033 	call	_wait_vbl_done
                                   7034 ;src/mushroompie.c:657: set_dizzy_animdata(current_animation->steps[ani_phase]);
      001E15 21rFEr01              7035 	ld	hl, #_current_animation
      001E18 2A                    7036 	ld	a, (hl+)
      001E19 4F                    7037 	ld	c, a
      001E1A 46                    7038 	ld	b, (hl)
      001E1B 03                    7039 	inc	bc
      001E1C 03                    7040 	inc	bc
      001E1D 03                    7041 	inc	bc
      001E1E 03                    7042 	inc	bc
      001E1F 03                    7043 	inc	bc
      001E20 21r03r00              7044 	ld	hl, #_ani_phase
      001E23 6E                    7045 	ld	l, (hl)
                                   7046 ;	spillPairReg hl
                                   7047 ;	spillPairReg hl
      001E24 26 00                 7048 	ld	h, #0x00
                                   7049 ;	spillPairReg hl
                                   7050 ;	spillPairReg hl
      001E26 29                    7051 	add	hl, hl
      001E27 09                    7052 	add	hl, bc
      001E28 2A                    7053 	ld	a, (hl+)
      001E29 4F                    7054 	ld	c, a
      001E2A 46                    7055 	ld	b, (hl)
      001E2B C5                    7056 	push	bc
      001E2C CDr01r0D              7057 	call	_set_dizzy_animdata
      001E2F E1                    7058 	pop	hl
                                   7059 ;src/mushroompie.c:658: ani_phase++; 
      001E30 21r03r00              7060 	ld	hl, #_ani_phase
      001E33 34                    7061 	inc	(hl)
                                   7062 ;src/mushroompie.c:657: set_dizzy_animdata(current_animation->steps[ani_phase]);
      001E34 21rFEr01              7063 	ld	hl, #_current_animation
      001E37 2A                    7064 	ld	a, (hl+)
      001E38 4F                    7065 	ld	c, a
      001E39 46                    7066 	ld	b, (hl)
                                   7067 ;src/mushroompie.c:659: if (ani_phase >= current_animation->count) {
      001E3A 0A                    7068 	ld	a, (bc)
      001E3B 5F                    7069 	ld	e, a
      001E3C FAr03r00              7070 	ld	a, (#_ani_phase)
      001E3F 93                    7071 	sub	a, e
      001E40 38 48                 7072 	jr	C, 00189$
                                   7073 ;src/mushroompie.c:660: if ((dizzy_stun) && (ani_type != ANI_DEAD)) {
      001E42 FAr21r00              7074 	ld	a, (#_dizzy_stun)
      001E45 B7                    7075 	or	a, a
      001E46 28 1F                 7076 	jr	Z, 00185$
      001E48 FAr02r00              7077 	ld	a, (#_ani_type)
      001E4B D6 07                 7078 	sub	a, #0x07
      001E4D 28 18                 7079 	jr	Z, 00185$
                                   7080 ;src/mushroompie.c:661: ani_type = ANI_STUN;
      001E4F 21r02r00              7081 	ld	hl, #_ani_type
      001E52 36 06                 7082 	ld	(hl), #0x06
                                   7083 ;src/mushroompie.c:662: ani_phase = 0;
      001E54 21r03r00              7084 	ld	hl, #_ani_phase
      001E57 36 00                 7085 	ld	(hl), #0x00
                                   7086 ;src/mushroompie.c:663: dizzy_stun = 0;
      001E59 21r21r00              7087 	ld	hl, #_dizzy_stun
      001E5C 36 00                 7088 	ld	(hl), #0x00
                                   7089 ;src/mushroompie.c:664: dec_energy += 10;
      001E5E 21r35r02              7090 	ld	hl, #_dec_energy
      001E61 7E                    7091 	ld	a, (hl)
      001E62 C6 0A                 7092 	add	a, #0x0a
      001E64 77                    7093 	ld	(hl), a
      001E65 18 23                 7094 	jr	00189$
      001E67                       7095 00185$:
                                   7096 ;src/mushroompie.c:665: } else if (dizzy_falling) { 
      001E67 FAr20r00              7097 	ld	a, (#_dizzy_falling)
      001E6A B7                    7098 	or	a, a
      001E6B 28 0F                 7099 	jr	Z, 00182$
                                   7100 ;src/mushroompie.c:666: ani_type = current_animation->fall_state;
      001E6D 03                    7101 	inc	bc
      001E6E 03                    7102 	inc	bc
      001E6F 03                    7103 	inc	bc
      001E70 03                    7104 	inc	bc
      001E71 0A                    7105 	ld	a, (bc)
      001E72 EAr02r00              7106 	ld	(#_ani_type),a
                                   7107 ;src/mushroompie.c:667: ani_phase = 0;
      001E75 21r03r00              7108 	ld	hl, #_ani_phase
      001E78 36 00                 7109 	ld	(hl), #0x00
      001E7A 18 0E                 7110 	jr	00189$
      001E7C                       7111 00182$:
                                   7112 ;src/mushroompie.c:669: ani_type = current_animation->next_state;
      001E7C 59                    7113 	ld	e, c
      001E7D 50                    7114 	ld	d, b
      001E7E 13                    7115 	inc	de
      001E7F 13                    7116 	inc	de
      001E80 13                    7117 	inc	de
      001E81 1A                    7118 	ld	a, (de)
      001E82 EAr02r00              7119 	ld	(#_ani_type),a
                                   7120 ;src/mushroompie.c:670: ani_phase = current_animation->cycle;
      001E85 03                    7121 	inc	bc
      001E86 0A                    7122 	ld	a, (bc)
      001E87 EAr03r00              7123 	ld	(#_ani_phase),a
      001E8A                       7124 00189$:
                                   7125 ;src/mushroompie.c:673: ani_update = 0;
      001E8A 21r08r00              7126 	ld	hl, #_ani_update
      001E8D 36 00                 7127 	ld	(hl), #0x00
                                   7128 ;src/mushroompie.c:675: if (ani_type == ANI_DEAD) {
      001E8F FAr02r00              7129 	ld	a, (#_ani_type)
      001E92 D6 07                 7130 	sub	a, #0x07
      001E94 20 7B                 7131 	jr	NZ, 00198$
                                   7132 ;src/mushroompie.c:676: dizzy_stun = 0;
      001E96 21r21r00              7133 	ld	hl, #_dizzy_stun
      001E99 36 00                 7134 	ld	(hl), #0x00
                                   7135 ;src/mushroompie.c:677: if (death_pause) death_pause--;
      001E9B 21r1Fr00              7136 	ld	hl, #_death_pause
      001E9E 7E                    7137 	ld	a, (hl)
      001E9F B7                    7138 	or	a, a
      001EA0 28 01                 7139 	jr	Z, 00191$
      001EA2 35                    7140 	dec	(hl)
      001EA3                       7141 00191$:
                                   7142 ;src/mushroompie.c:678: if (!death_pause) {
      001EA3 FAr1Fr00              7143 	ld	a, (#_death_pause)
      001EA6 B7                    7144 	or	a, a
      001EA7 20 6B                 7145 	jr	NZ, 00199$
                                   7146 ;src/mushroompie.c:679: if (!game_over) {
      001EA9 FAr1Er00              7147 	ld	a, (#_game_over)
      001EAC B7                    7148 	or	a, a
      001EAD 20 50                 7149 	jr	NZ, 00193$
                                   7150 ;src/mushroompie.c:680: dizzy_x = safe_dizzy_x, dizzy_y = safe_dizzy_y;
      001EAF FAr03r02              7151 	ld	a, (#_safe_dizzy_x)
      001EB2 EAr10r00              7152 	ld	(#_dizzy_x),a
      001EB5 FAr04r02              7153 	ld	a, (#_safe_dizzy_x + 1)
      001EB8 EAr11r00              7154 	ld	(#_dizzy_x + 1),a
      001EBB FAr05r02              7155 	ld	a, (#_safe_dizzy_y)
      001EBE EAr12r00              7156 	ld	(#_dizzy_y),a
      001EC1 FAr06r02              7157 	ld	a, (#_safe_dizzy_y + 1)
      001EC4 EAr13r00              7158 	ld	(#_dizzy_y + 1),a
                                   7159 ;src/mushroompie.c:681: current_room_x = safe_room_x; current_room_y = safe_room_y;
      001EC7 FAr1Ar00              7160 	ld	a, (#_safe_room_x)
      001ECA EAr0Cr00              7161 	ld	(#_current_room_x),a
      001ECD FAr1Br00              7162 	ld	a, (#_safe_room_y)
      001ED0 EAr0Dr00              7163 	ld	(#_current_room_y),a
                                   7164 ;src/mushroompie.c:682: set_room(current_room_y, current_room_x, 1);
      001ED3 3E 01                 7165 	ld	a, #0x01
      001ED5 F5                    7166 	push	af
      001ED6 33                    7167 	inc	sp
      001ED7 FAr0Cr00              7168 	ld	a, (#_current_room_x)
      001EDA 67                    7169 	ld	h, a
      001EDB FAr0Dr00              7170 	ld	a, (#_current_room_y)
      001EDE 6F                    7171 	ld	l, a
      001EDF E5                    7172 	push	hl
      001EE0 CDrC0r10              7173 	call	_set_room
      001EE3 E8 03                 7174 	add	sp, #3
                                   7175 ;src/mushroompie.c:683: wait_vbl_done();
      001EE5 CDr00r00              7176 	call	_wait_vbl_done
                                   7177 ;src/mushroompie.c:684: set_dizzy_animdata(&m_stand_0);
      001EE8 11r00r00              7178 	ld	de, #_m_stand_0
      001EEB D5                    7179 	push	de
      001EEC CDr01r0D              7180 	call	_set_dizzy_animdata
      001EEF E1                    7181 	pop	hl
                                   7182 ;src/mushroompie.c:685: init_dizzy_energy(); 
      001EF0 CDrEAr07              7183 	call	_init_dizzy_energy
                                   7184 ;src/mushroompie.c:686: ani_type = ANI_STAND; ani_phase = 0;
      001EF3 21r02r00              7185 	ld	hl, #_ani_type
      001EF6 36 00                 7186 	ld	(hl), #0x00
      001EF8 21r03r00              7187 	ld	hl, #_ani_phase
      001EFB 36 00                 7188 	ld	(hl), #0x00
      001EFD 18 15                 7189 	jr	00199$
      001EFF                       7190 00193$:
                                   7191 ;src/mushroompie.c:688: show_dialog_window(5, &game_over_dialog);
      001EFF 11r00r00              7192 	ld	de, #_game_over_dialog
      001F02 D5                    7193 	push	de
      001F03 3E 05                 7194 	ld	a, #0x05
      001F05 F5                    7195 	push	af
      001F06 33                    7196 	inc	sp
      001F07 CDr71r00              7197 	call	_show_dialog_window
      001F0A E8 03                 7198 	add	sp, #3
                                   7199 ;src/mushroompie.c:689: init_game();
      001F0C CDr55r17              7200 	call	_init_game
      001F0F 18 03                 7201 	jr	00199$
      001F11                       7202 00198$:
                                   7203 ;src/mushroompie.c:692: } else check_dizzy_evil_collisions();
      001F11 CDr57r10              7204 	call	_check_dizzy_evil_collisions
      001F14                       7205 00199$:
                                   7206 ;src/mushroompie.c:694: if (is_position_safe) {
      001F14 FAr1Cr00              7207 	ld	a, (#_is_position_safe)
      001F17 B7                    7208 	or	a, a
      001F18 CAr49r19              7209 	jp	Z, 00208$
                                   7210 ;src/mushroompie.c:695: if (!((dizzy_falling) || (dec_energy))) {
      001F1B FAr20r00              7211 	ld	a, (#_dizzy_falling)
      001F1E B7                    7212 	or	a, a
      001F1F 20 2A                 7213 	jr	NZ, 00201$
      001F21 FAr35r02              7214 	ld	a, (#_dec_energy)
      001F24 B7                    7215 	or	a, a
      001F25 20 24                 7216 	jr	NZ, 00201$
                                   7217 ;src/mushroompie.c:696: safe_room_x = tmp_room_x, safe_room_y = tmp_room_y; 
      001F27 FAr01r02              7218 	ld	a, (#_tmp_room_x)
      001F2A EAr1Ar00              7219 	ld	(#_safe_room_x),a
      001F2D FAr02r02              7220 	ld	a, (#_tmp_room_y)
      001F30 EAr1Br00              7221 	ld	(#_safe_room_y),a
                                   7222 ;src/mushroompie.c:697: safe_dizzy_x = tmp_dizzy_x, safe_dizzy_y = tmp_dizzy_y;
      001F33 FAr07r02              7223 	ld	a, (#_tmp_dizzy_x)
      001F36 EAr03r02              7224 	ld	(#_safe_dizzy_x),a
      001F39 FAr08r02              7225 	ld	a, (#_tmp_dizzy_x + 1)
      001F3C EAr04r02              7226 	ld	(#_safe_dizzy_x + 1),a
      001F3F FAr09r02              7227 	ld	a, (#_tmp_dizzy_y)
      001F42 EAr05r02              7228 	ld	(#_safe_dizzy_y),a
      001F45 FAr0Ar02              7229 	ld	a, (#_tmp_dizzy_y + 1)
      001F48 EAr06r02              7230 	ld	(#_safe_dizzy_y + 1),a
      001F4B                       7231 00201$:
                                   7232 ;src/mushroompie.c:699: is_position_safe = 0;
      001F4B 21r1Cr00              7233 	ld	hl, #_is_position_safe
      001F4E 36 00                 7234 	ld	(hl), #0x00
      001F50 C3r49r19              7235 	jp	00208$
                                   7236 ;src/mushroompie.c:703: }
      001F53 33                    7237 	inc	sp
      001F54 33                    7238 	inc	sp
      001F55 C9                    7239 	ret
                                   7240 	.area _CODE
                                   7241 	.area _INITIALIZER
      000000                       7242 __xinit____CRASH_HEANDLER_INIT:
      000000r00r00                 7243 	.dw ___HandleCrash
      000002                       7244 __xinit__ani_type:
      000002 00                    7245 	.db #0x00	; 0
      000003                       7246 __xinit__ani_phase:
      000003 00                    7247 	.db #0x00	; 0
      000004                       7248 __xinit__current_dyn:
      000004 00 00                 7249 	.dw #0x0000
      000006                       7250 __xinit__double_dyn:
      000006 00                    7251 	.db #0x00	; 0
      000007                       7252 __xinit__current_dyn_phase:
      000007 00                    7253 	.db #0x00	; 0
      000008                       7254 __xinit__ani_update:
      000008 00                    7255 	.db #0x00	; 0
      000009                       7256 __xinit__walk_update:
      000009 00                    7257 	.db #0x00	; 0
      00000A                       7258 __xinit__bal_update:
      00000A 00                    7259 	.db #0x00	; 0
      00000B                       7260 __xinit__cloud_timer:
      00000B 00                    7261 	.db #0x00	; 0
      00000C                       7262 __xinit__current_room_x:
      00000C 01                    7263 	.db #0x01	; 1
      00000D                       7264 __xinit__current_room_y:
      00000D 01                    7265 	.db #0x01	; 1
      00000E                       7266 __xinit__current_room:
      00000E 00 00                 7267 	.dw #0x0000
      000010                       7268 __xinit__dizzy_x:
      000010 68 00                 7269 	.dw #0x0068
      000012                       7270 __xinit__dizzy_y:
      000012 48 00                 7271 	.dw #0x0048
      000014                       7272 __xinit__dizzy_tmp_xy:
      000014 00 00                 7273 	.dw #0x0000
      000016                       7274 __xinit__delta_x:
      000016 00 00                 7275 	.dw #0x0000
      000018                       7276 __xinit__delta_y:
      000018 00 00                 7277 	.dw #0x0000
      00001A                       7278 __xinit__safe_room_x:
      00001A 00                    7279 	.db #0x00	; 0
      00001B                       7280 __xinit__safe_room_y:
      00001B 00                    7281 	.db #0x00	; 0
      00001C                       7282 __xinit__is_position_safe:
      00001C 01                    7283 	.db #0x01	; 1
      00001D                       7284 __xinit__joy:
      00001D 00                    7285 	.db #0x00	; 0
      00001E                       7286 __xinit__game_over:
      00001E 00                    7287 	.db #0x00	; 0
      00001F                       7288 __xinit__death_pause:
      00001F 00                    7289 	.db #0x00	; 0
      000020                       7290 __xinit__dizzy_falling:
      000020 00                    7291 	.db #0x00	; 0
      000021                       7292 __xinit__dizzy_stun:
      000021 00                    7293 	.db #0x00	; 0
      000022                       7294 __xinit__dizzy_old_pos_x:
      000022 FF FF                 7295 	.dw #0xffff
      000024                       7296 __xinit__dizzy_old_pos_y:
      000024 FF FF                 7297 	.dw #0xffff
      000026                       7298 __xinit__tim_div:
      000026 00                    7299 	.db #0x00	; 0
      000027                       7300 __xinit____lcd_int_state:
      000027 00                    7301 	.db #0x00	; 0
      000028                       7302 __xinit__inventory:
      000028 00                    7303 	.db #0x00	; 0
      000029                       7304 __xinit__lyc_table:
      000029 00                    7305 	.db #0x00	; 0
      00002A 17                    7306 	.db #0x17	; 23
      00002B 00                    7307 	.db #0x00	; 0
      00002C 17                    7308 	.db #0x17	; 23
      00002D 00                    7309 	.db #0x00	; 0
      00002E 17                    7310 	.db #0x17	; 23
      00002F 37                    7311 	.db #0x37	; 55	'7'
      000030 6F                    7312 	.db #0x6f	; 111	'o'
                                   7313 	.area _CABS (ABS)
